[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"[![CI Status](https://github.com/AY2223S1-CS2103T-W13-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-W13-2/tp/actions)","lastModifiedDate":"2022-09-23"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"* **Long Time No See (LTNS)** is a desktop task tracking app made for financial advisors to manage their contact base and stay connected with their clients. Made simpler with an intuitive and minimalistic graphical user interface (GUI) and customised functionalities to pinpoint your needs, LTNS will enable you to stay close to your dearest clients!\u003cbr\u003e","lastModifiedDate":"2022-10-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"* as a tool for Financial Advisors who wants to upgrade their networking capacities","lastModifiedDate":"2022-10-28"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"* as a tracker tool that helps them manage their time spent on clients alongside their studies","lastModifiedDate":"2022-09-23"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"* The project is a software engineering project for a desktop application (callsed LongTimeNoSee) used for managing an individual financial advisor’s services.","lastModifiedDate":"2022-09-23"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"* It is **written in OOP fashion**. It provides a **reasonably well-written** code base.","lastModifiedDate":"2022-09-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"* It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"* It is named `LongTimeNoSee` (`LTNS` for short) as a play on how financial advisors often use the infamous line to start a conversation with someone they haven’t spoken to for a long while.","lastModifiedDate":"2022-09-23"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"* For the detailed documentation of this project, see the **[LongTimeNoSee Product Website](https://ay2223s1-cs2103t-w13-2.github.io/tp/)**.","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"  This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2022-09-23"}],"authorContributionMap":{"loyhongshenggg":10,"-":5,"marcusczh":1}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"mainClassName \u003d \u0027longtimenosee.Main\u0027","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"    archiveFileName \u003d \u0027longtimenosee.jar\u0027","lastModifiedDate":"2022-10-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":74,"author":{"gitId":"marcusczh"},"content":"run {","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-10-15"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"-":70,"marcusczh":6}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"### Hong Sheng","lastModifiedDate":"2022-09-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"\u003cimg src\u003d\"images/loyhongshenggg.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"[[github](http://github.com/loyhongshenggg)]","lastModifiedDate":"2022-09-23"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"[[portfolio](team/loyhongshenggg.md)]","lastModifiedDate":"2022-09-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"* Role: Team Lead and Developer","lastModifiedDate":"2022-09-23"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"* Responsibilities: Team Coordination, UI/UX of LTNS, Wireframing/Figma diagram, Main reviewer for Damien","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"* In-charge of features: Ui, LTNS main UI/UX, pin, viewPin and viewIncome","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"### Damien Koh","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"\u003cimg src\u003d\"images/ssatu.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"[[github](http://github.com/ssatu)]","lastModifiedDate":"2022-09-27"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"[[portfolio](team/ssatu.md)]","lastModifiedDate":"2022-09-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"* Responsibilities: Documentation, Testing, Deliverables and deadlines, Main reviewer for Colin","lastModifiedDate":"2022-09-27"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"* In-charge of features: Policy management","lastModifiedDate":"2022-09-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"### Reuben Chay","lastModifiedDate":"2022-09-23"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"\u003cimg src\u003d\"images/reubenchay.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"loyhongshenggg"},"content":"[[github](https://github.com/ReubenChay)]","lastModifiedDate":"2022-09-23"},{"lineNumber":38,"author":{"gitId":"loyhongshenggg"},"content":"[[portfolio](team/reubenchay.md)]","lastModifiedDate":"2022-09-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2022-09-27"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"* Responsibilities: Scheduling and tracking, code quality, Main reviewer for Hong Sheng","lastModifiedDate":"2022-09-27"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"* In-charge of features: sort","lastModifiedDate":"2022-09-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"### Colin Toh","lastModifiedDate":"2022-09-23"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"\u003cimg src\u003d\"images/cowlinn.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"[[github](http://github.com/cowlinn)]","lastModifiedDate":"2022-09-23"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"[[portfolio](team/cowlinn.md)]","lastModifiedDate":"2022-09-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"* Responsibilities:Integration, Testing, Main Reviewer for Marcus","lastModifiedDate":"2022-09-23"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"* In-Charge of Features: Client Class Management","lastModifiedDate":"2022-09-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"### Marcus Chua","lastModifiedDate":"2022-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"\u003cimg src\u003d\"images/marcusczh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"[[github](https://github.com/marcusczh)]","lastModifiedDate":"2022-09-22"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"[[portfolio](team/marcusczh.md)]","lastModifiedDate":"2022-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2022-09-22"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"* Responsibilities: Code quality, integration, Main reviewer for Reuben","lastModifiedDate":"2022-09-23"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"* In-charge of features: findClient, findPolicy, findEvent","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"loyhongshenggg":15,"Ssatu":8,"cowlinn":2,"-":34,"marcusczh":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.)","lastModifiedDate":"2022-10-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/java/longtimenosee/ui/Ui.java)","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"![Structure of UI Component](./images/UiClassDiagram.png)","lastModifiedDate":"2022-10-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `EventListPanel`, `PolicyListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2022-10-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/java/longtimenosee/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2022-10-19"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"Similarly, the layout of [`PersonListPanel`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/java/longtimenosee/ui/PersonListPanel.java), [`PolicyListPanel`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/java/longtimenosee/ui/PolicyListPanel.java) and [`EventListPanel`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/java/longtimenosee/ui/EventListPanel.java) are all specified in their respective [`.fxml`](https://github.com/AY2223S1-CS2103T-W13-2/tp/tree/master/src/main/resources/view) files.","lastModifiedDate":"2022-10-20"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"The layout of [`IncomeGraph`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/java/longtimenosee/ui/IncomeGraph.java) is specified in [`LineGraph.fxml`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/resources/view/LineGraph.fxml)","lastModifiedDate":"2022-10-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"* depends on some classes in the `Model`, `Policy` and `Event` component, as it displays `Person`, `Policy` and `Event` objects residing in the `Model`.","lastModifiedDate":"2022-10-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"marcusczh"},"content":"**API** : [`Model.java`](https://github.com/AY2223S1-CS2103T-W13-2/tp/blob/master/src/main/java/longtimenosee/model/Model.java)","lastModifiedDate":"2022-10-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"marcusczh"},"content":"* stores the following address book data","lastModifiedDate":"2022-10-20"},{"lineNumber":129,"author":{"gitId":"marcusczh"},"content":"  * all `Person` objects (which are contained in a `UniquePersonList` object)","lastModifiedDate":"2022-10-20"},{"lineNumber":130,"author":{"gitId":"marcusczh"},"content":"  * all `Policy` objects (which are contained in a `UniquePolicyList` object)","lastModifiedDate":"2022-10-20"},{"lineNumber":131,"author":{"gitId":"marcusczh"},"content":"  \u003cimg src\u003d\"images/ModelPolicyClassDiagram.png\" width\u003d\"500\" /\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":132,"author":{"gitId":"marcusczh"},"content":"  * all `Event` objects (which are contained in a `UniqueEventList` object)","lastModifiedDate":"2022-10-21"},{"lineNumber":133,"author":{"gitId":"marcusczh"},"content":"  \u003cimg src\u003d\"images/ModelEventClassDiagram.png\"  width\u003d\"500\"/\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":134,"author":{"gitId":"marcusczh"},"content":"* stores the currently \u0027selected\u0027 `XYZ` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cXYZ\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2022-10-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** `XYZ` refers to either Person, Policy or Event\u003c/div\u003e","lastModifiedDate":"2022-10-28"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"marcusczh"},"content":"Classes used by multiple components are in the `longtimenosee.commons` package.","lastModifiedDate":"2022-10-20"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"loyhongshenggg"},"content":"### pin and viewPin feature","lastModifiedDate":"2022-10-20"},{"lineNumber":163,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":164,"author":{"gitId":"loyhongshenggg"},"content":"#### Implementation","lastModifiedDate":"2022-10-20"},{"lineNumber":165,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":166,"author":{"gitId":"loyhongshenggg"},"content":"Each person object has a boolean attribute known as pinned. When the user pins the person using the index. This attribute will be set to true. When the user pins that same person again, this attribute will be set to false.","lastModifiedDate":"2022-10-20"},{"lineNumber":167,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":168,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":169,"author":{"gitId":"loyhongshenggg"},"content":"* `pin \u003cIndex\u003e` — Sets the boolean pinned attribute to a value of true.","lastModifiedDate":"2022-10-20"},{"lineNumber":170,"author":{"gitId":"loyhongshenggg"},"content":"* `pin \u003cIndex\u003e` — If the boolean pinned attribute was previously set true, calling the command again will set it to false.","lastModifiedDate":"2022-10-20"},{"lineNumber":171,"author":{"gitId":"loyhongshenggg"},"content":"* `viewPin` — Uses the predicate PinnedPersonPredicate to sort the full list of existing clients to display only clients with pinned attribute of true.","lastModifiedDate":"2022-10-20"},{"lineNumber":172,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":173,"author":{"gitId":"loyhongshenggg"},"content":"The following sequence diagram summarizes how pin works:","lastModifiedDate":"2022-10-20"},{"lineNumber":174,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":175,"author":{"gitId":"loyhongshenggg"},"content":"![PinSequenceDiagram](images/PinSequenceDiagram.png)","lastModifiedDate":"2022-10-20"},{"lineNumber":176,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":177,"author":{"gitId":"loyhongshenggg"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2022-10-20"},{"lineNumber":178,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":179,"author":{"gitId":"Ssatu"},"content":"#### Pin activity diagram:","lastModifiedDate":"2022-10-28"},{"lineNumber":180,"author":{"gitId":"loyhongshenggg"},"content":"\u003cimg src\u003d\"images/PinActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":181,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":182,"author":{"gitId":"loyhongshenggg"},"content":"#### View Pin Activity diagram:","lastModifiedDate":"2022-10-20"},{"lineNumber":183,"author":{"gitId":"loyhongshenggg"},"content":"\u003cimg src\u003d\"images/ViewPinActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":184,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":185,"author":{"gitId":"loyhongshenggg"},"content":"#### Design considerations:","lastModifiedDate":"2022-10-20"},{"lineNumber":186,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":187,"author":{"gitId":"loyhongshenggg"},"content":"**Aspect: How pin and viewPin executes:**","lastModifiedDate":"2022-10-20"},{"lineNumber":188,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":189,"author":{"gitId":"loyhongshenggg"},"content":"* **Alternative 1 (current choice):** Uses a predicate to sort through pinned clients.","lastModifiedDate":"2022-10-20"},{"lineNumber":190,"author":{"gitId":"loyhongshenggg"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2022-10-20"},{"lineNumber":191,"author":{"gitId":"loyhongshenggg"},"content":"    * Cons: Hard for additional extensions given that this method uses a boolean attribute.","lastModifiedDate":"2022-10-20"},{"lineNumber":192,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":193,"author":{"gitId":"loyhongshenggg"},"content":"* **Alternative 2:** Saves the entire address book of clients pinned.","lastModifiedDate":"2022-10-20"},{"lineNumber":194,"author":{"gitId":"loyhongshenggg"},"content":"  * Pros: More potential for further extensions.","lastModifiedDate":"2022-10-20"},{"lineNumber":195,"author":{"gitId":"loyhongshenggg"},"content":"  * Cons: May result in performance issues in terms of memory usage.","lastModifiedDate":"2022-10-20"},{"lineNumber":196,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":197,"author":{"gitId":"loyhongshenggg"},"content":"### viewIncome feature","lastModifiedDate":"2022-10-20"},{"lineNumber":198,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":199,"author":{"gitId":"loyhongshenggg"},"content":"#### Implementation","lastModifiedDate":"2022-10-20"},{"lineNumber":200,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":201,"author":{"gitId":"loyhongshenggg"},"content":"This feature builds on the new policy class created. Where each client has a set of policies assigned to them. In this case, a financial advisor’s income is treated as a class by itself. Where inside the class there are methods of retrieving the income based on different factors stated below.","lastModifiedDate":"2022-10-20"},{"lineNumber":202,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":203,"author":{"gitId":"loyhongshenggg"},"content":"The main calculation done in class FinancialAdvisorIncome is a function called calculateIncome. This function iterates through a list of clients and for each client, it iterates through the list of policies they have. For each of the policies, LocalDate and Period are used to determine which commission (out of the 3 year differing rates) the assigned policy of the current person is in. Subsequently, all commissions are multiplied by policy premium with the duration of the policy (relative from start date to given date) and summed to give income for a particular year.","lastModifiedDate":"2022-10-20"},{"lineNumber":204,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":205,"author":{"gitId":"loyhongshenggg"},"content":"* `viewIncome \u003cYear\u003e` — Invokes the calculation of user\u0027s three year income with `\u003cYear\u003e` as the first year via the function .","lastModifiedDate":"2022-10-20"},{"lineNumber":206,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":207,"author":{"gitId":"loyhongshenggg"},"content":"Given below is an example usage scenario and how the pin mechanism behaves at each step. (To be continued)","lastModifiedDate":"2022-10-20"},{"lineNumber":208,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":209,"author":{"gitId":"loyhongshenggg"},"content":"#### Design considerations:","lastModifiedDate":"2022-10-20"},{"lineNumber":210,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":211,"author":{"gitId":"loyhongshenggg"},"content":"**Aspect: How viewIncome executes:**","lastModifiedDate":"2022-10-20"},{"lineNumber":212,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":213,"author":{"gitId":"loyhongshenggg"},"content":"* **Alternative 1 (current choice):** Encapsulate user\u0027s income into a class of its own","lastModifiedDate":"2022-10-20"},{"lineNumber":214,"author":{"gitId":"Ssatu"},"content":"    * Pros: By assigning FinancialAdvisorIncome as a class, we are able to add an additional layer of abstraction to deriving the financial advisors income. By doing so, it is easier to utilise the income for other features.","lastModifiedDate":"2022-10-28"},{"lineNumber":215,"author":{"gitId":"loyhongshenggg"},"content":"    * Cons: Might pose a problem for retrival of values from class.","lastModifiedDate":"2022-10-20"},{"lineNumber":216,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":217,"author":{"gitId":"loyhongshenggg"},"content":"* **Alternative 2:** Saves the entire address book of clients pinned.","lastModifiedDate":"2022-10-20"},{"lineNumber":218,"author":{"gitId":"loyhongshenggg"},"content":"    * Pros: More potential for further extensions.","lastModifiedDate":"2022-10-20"},{"lineNumber":219,"author":{"gitId":"loyhongshenggg"},"content":"    * Cons: May result in performance issues in terms of memory usage.","lastModifiedDate":"2022-10-20"},{"lineNumber":220,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":221,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":222,"author":{"gitId":"ReubenChay"},"content":"### Sort Feature","lastModifiedDate":"2022-10-18"},{"lineNumber":223,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":224,"author":{"gitId":"ReubenChay"},"content":"#### Implementation","lastModifiedDate":"2022-10-18"},{"lineNumber":225,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":226,"author":{"gitId":"ReubenChay"},"content":"The Sort mechanism is facilitated by `UniquePersonList`, which utilizes Java\u0027s `ObservableList` library to store the client list.","lastModifiedDate":"2022-10-18"},{"lineNumber":227,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":228,"author":{"gitId":"ReubenChay"},"content":"The method `FXCollections.sort()` is called by UniquePersonList, which takes in a comparator as an argument and sorts the client list based on the comparator supplied.","lastModifiedDate":"2022-10-18"},{"lineNumber":229,"author":{"gitId":"ReubenChay"},"content":"Each attribute of a client which is considered a valid sorting metric has its own comparator within its class.","lastModifiedDate":"2022-10-18"},{"lineNumber":230,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":231,"author":{"gitId":"ReubenChay"},"content":"This operation is exposed in the `Model` interface as `Model#sort()`.","lastModifiedDate":"2022-10-18"},{"lineNumber":232,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":233,"author":{"gitId":"ReubenChay"},"content":"Given below is an example usage scenario and how the `Sort` mechanism behaves at each step.","lastModifiedDate":"2022-10-18"},{"lineNumber":234,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":235,"author":{"gitId":"ReubenChay"},"content":"Step 1.  The user executes `list` to view his current client list.","lastModifiedDate":"2022-10-18"},{"lineNumber":236,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":237,"author":{"gitId":"ReubenChay"},"content":"Step 2. The user executes `sort income` to view his client list by ascending income levels. This will pass the income comparator to `Model#sort()`. The list will be sorted and changes can be viewed immediately.","lastModifiedDate":"2022-10-18"},{"lineNumber":238,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":239,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":240,"author":{"gitId":"ReubenChay"},"content":"The following sequence diagram shows how the sort operation works:","lastModifiedDate":"2022-10-18"},{"lineNumber":241,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":242,"author":{"gitId":"ReubenChay"},"content":"![Sort Sequence Diagram](./images/SortSequenceDiagram.png)","lastModifiedDate":"2022-10-20"},{"lineNumber":243,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":244,"author":{"gitId":"ReubenChay"},"content":"The following activity diagram summarizes what happens when a user issues a `sort` command:","lastModifiedDate":"2022-10-18"},{"lineNumber":245,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":246,"author":{"gitId":"ReubenChay"},"content":"![Sort Activity Diagram](./images/SortActivityDiagram.png)","lastModifiedDate":"2022-10-20"},{"lineNumber":247,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":248,"author":{"gitId":"ReubenChay"},"content":"#### Design Considerations","lastModifiedDate":"2022-10-18"},{"lineNumber":249,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":250,"author":{"gitId":"ReubenChay"},"content":"**Aspect: How to manage saving changes to `Storage`**","lastModifiedDate":"2022-10-18"},{"lineNumber":251,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":252,"author":{"gitId":"ReubenChay"},"content":"As any commands called which modifies the `AddressBook` will save these changes to storage, a major design consideration was whether to save these post-sort changes to the storage","lastModifiedDate":"2022-10-18"},{"lineNumber":253,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":254,"author":{"gitId":"ReubenChay"},"content":"* **Alternative 1 (current choice):** save the changes as per normal but provide an option to return to the default sorting view","lastModifiedDate":"2022-10-18"},{"lineNumber":255,"author":{"gitId":"ReubenChay"},"content":"  * Pros: Easy to implement, less memory required to keep separate original list ","lastModifiedDate":"2022-10-18"},{"lineNumber":256,"author":{"gitId":"ReubenChay"},"content":"  * Cons: Client list remains in a particular order after `sort` command is called until `sort default` is issued","lastModifiedDate":"2022-10-18"},{"lineNumber":257,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":258,"author":{"gitId":"ReubenChay"},"content":"* **Alternative 2:** keep original list and sorted list as 2 separate lists ","lastModifiedDate":"2022-10-18"},{"lineNumber":259,"author":{"gitId":"ReubenChay"},"content":"  * Pros: User need not call further command to view original list","lastModifiedDate":"2022-10-18"},{"lineNumber":260,"author":{"gitId":"ReubenChay"},"content":"  * Cons: More memory to store 2nd list, more difficult to implement ","lastModifiedDate":"2022-10-18"},{"lineNumber":261,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":262,"author":{"gitId":"ReubenChay"},"content":"**Aspect: How to sort list given different metrics** ","lastModifiedDate":"2022-10-18"},{"lineNumber":263,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":264,"author":{"gitId":"ReubenChay"},"content":"* **Alternative 1 (current choice):** each sortable class has its own comparator and will be passed as an argument after `sort` command is parsed","lastModifiedDate":"2022-10-18"},{"lineNumber":265,"author":{"gitId":"ReubenChay"},"content":"  * Pros: Better abstraction and Better OOP ","lastModifiedDate":"2022-10-18"},{"lineNumber":266,"author":{"gitId":"ReubenChay"},"content":"  * Cons: Comparators must be written for every class  ","lastModifiedDate":"2022-10-18"},{"lineNumber":267,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":268,"author":{"gitId":"ReubenChay"},"content":"* **Alternative 2:** `Model` decides how to sort the client list based on sort metric called ","lastModifiedDate":"2022-10-18"},{"lineNumber":269,"author":{"gitId":"ReubenChay"},"content":"  * Pros: Easier to implement ","lastModifiedDate":"2022-10-18"},{"lineNumber":270,"author":{"gitId":"ReubenChay"},"content":"  * Cons: less abstraction; information about client attributes will have to be unnecessarily exposed to `Model` class ","lastModifiedDate":"2022-10-18"},{"lineNumber":271,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":272,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"cowlinn"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state/","lastModifiedDate":"2022-10-20"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":339,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":340,"author":{"gitId":"cowlinn"},"content":"## AddEvent Feature ","lastModifiedDate":"2022-10-20"},{"lineNumber":341,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":342,"author":{"gitId":"cowlinn"},"content":"### Proposed Implementation ","lastModifiedDate":"2022-10-20"},{"lineNumber":343,"author":{"gitId":"cowlinn"},"content":"The proposed `AddEvent` feature is facilitated by the `AddressBook` Model. The `AddressBook` contains information on the list of people and the current events available (i.e: `UniqueEventList` and `UniquePersonList`). The `AddEventParser`  serves as an additional \u003ci\u003eabstraction of logic\u003c/i\u003e to determine the validity of an Event on the following conditions, and throws an appropriate exception based on the following conditions. ","lastModifiedDate":"2022-10-20"},{"lineNumber":344,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":345,"author":{"gitId":"cowlinn"},"content":"* Valid Client Name : An event is tagged to a single Client. The Client’s name must already exist in the `UniqueEventList`. If said person specified does not exist, the `AddEventParser` throws an: `InvalidPersonException`","lastModifiedDate":"2022-10-20"},{"lineNumber":346,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":347,"author":{"gitId":"Ssatu"},"content":"* No overlapping events: . If the event overlaps with another event (i.e: occurs on the same day, and has a start and end time that coincides with another event in `UniqueEventList`, the `AddEventParser` throws an: `OverlapEventException`.)","lastModifiedDate":"2022-10-28"},{"lineNumber":348,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":349,"author":{"gitId":"cowlinn"},"content":"### Given below is an example usage scenario and how the `AddEventCommand` behaves at each step.","lastModifiedDate":"2022-10-20"},{"lineNumber":350,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":351,"author":{"gitId":"cowlinn"},"content":"\u003cB\u003eStep 1\u003c/B\u003e. The user launches the application for the first time. The` AddressBook` model is initialized with both the appropriate `UniquePersonList` and `UniqueEventList`. The lists are empty, with a person named `John Williams`. ","lastModifiedDate":"2022-10-20"},{"lineNumber":352,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":353,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":354,"author":{"gitId":"cowlinn"},"content":"\u003cB\u003eStep 2\u003c/B\u003e. The user adds an event `newEvent desc Star Wars Soundtrack  pName John Williams, date/2020-01-01, start/12:00 end/13:00`. The event is added successfully.","lastModifiedDate":"2022-10-20"},{"lineNumber":355,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":356,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":357,"author":{"gitId":"cowlinn"},"content":"\u003cB\u003eStep 3\u003c/B\u003e. The user then adds a new event `newEvent desc JurassicWorld Soundtrack  pName John Williams, date/2020-01-01, start/12:30 end/13:00`. This time window of this event overlaps with the previously event, and the Event List is no longer updated. An `OverlapEventException` is thrown by the parser.","lastModifiedDate":"2022-10-20"},{"lineNumber":358,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":359,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":360,"author":{"gitId":"cowlinn"},"content":"### The following activity diagram summarizes how an `AddEventCommand` is parsed at each step.","lastModifiedDate":"2022-10-20"},{"lineNumber":361,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":362,"author":{"gitId":"cowlinn"},"content":"\u003cp align \u003d\"center\"\u003e \u003cimg src\u003d\"images/AddEventActivityDiagram.png\" width\u003d\"650\" /\u003e \u003c/p\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":363,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":364,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":365,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":366,"author":{"gitId":"cowlinn"},"content":"## Design considerations:","lastModifiedDate":"2022-10-20"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":380,"author":{"gitId":"cowlinn"},"content":"**Aspect: Should events that occured in the past be auto-deleted on startup of app?:**","lastModifiedDate":"2022-10-20"},{"lineNumber":381,"author":{"gitId":"cowlinn"},"content":"* **Alternative 1 (current choice):** Don\u0027t delete, in fact allow users to add events that happened in the past. ","lastModifiedDate":"2022-10-20"},{"lineNumber":382,"author":{"gitId":"cowlinn"},"content":"   * Pros: Our target audience (Financial Advisors) might need to look up what past events or meetings have occured. Keeping past events serves as a good record.Increase in storage ","lastModifiedDate":"2022-10-20"},{"lineNumber":383,"author":{"gitId":"cowlinn"},"content":"   * Cons: More storage used by app","lastModifiedDate":"2022-10-20"},{"lineNumber":384,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":385,"author":{"gitId":"cowlinn"},"content":"* **Alternative 2 :** Delete all past events, users are not permitted to add events that happened in the past","lastModifiedDate":"2022-10-20"},{"lineNumber":386,"author":{"gitId":"cowlinn"},"content":"   * Pros: Less storage used up by app","lastModifiedDate":"2022-10-20"},{"lineNumber":387,"author":{"gitId":"cowlinn"},"content":"   * Cons: Difficult to implement without bugs.","lastModifiedDate":"2022-10-20"},{"lineNumber":388,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":389,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":390,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":391,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":392,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"Ssatu"},"content":"###\\[Developed\\] Assigning clients a policy","lastModifiedDate":"2022-10-21"},{"lineNumber":395,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":396,"author":{"gitId":"Ssatu"},"content":"Users can assign existing policies to a client, whilst providing uptake details","lastModifiedDate":"2022-10-21"},{"lineNumber":397,"author":{"gitId":"Ssatu"},"content":"such as the premium amount and start/end dates. This is facilitated by the `PolicyAssignCommand` class","lastModifiedDate":"2022-10-21"},{"lineNumber":398,"author":{"gitId":"Ssatu"},"content":"and `PolicyAssignCommandParser` classes.","lastModifiedDate":"2022-10-21"},{"lineNumber":399,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":400,"author":{"gitId":"Ssatu"},"content":"The `PolicyAssignCommandParser` parses the input from the user and identifies which policy has to be assigned to","lastModifiedDate":"2022-10-21"},{"lineNumber":401,"author":{"gitId":"Ssatu"},"content":"which client. The appropriate AssignedPolicy object is created with details given in the input ","lastModifiedDate":"2022-10-21"},{"lineNumber":402,"author":{"gitId":"Ssatu"},"content":"and is then assigned to the respective client in `PolicyAssignCommand`.","lastModifiedDate":"2022-10-21"},{"lineNumber":403,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":404,"author":{"gitId":"Ssatu"},"content":"* `Person#addPolicy(assignedPolicy)` - Attempts to add an assigned policy to a set of assigned policies stored within","lastModifiedDate":"2022-10-21"},{"lineNumber":405,"author":{"gitId":"Ssatu"},"content":"the person object. It also returns a boolean describing if the assigned policy already exists in the set.","lastModifiedDate":"2022-10-21"},{"lineNumber":406,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":407,"author":{"gitId":"Ssatu"},"content":"Given below is an example usage scenario and how an `assign` command is executed.","lastModifiedDate":"2022-10-21"},{"lineNumber":408,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":409,"author":{"gitId":"Ssatu"},"content":"The interactions between the components during the usage scenario is shown in the *Sequence Diagram* below.","lastModifiedDate":"2022-10-21"},{"lineNumber":410,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":411,"author":{"gitId":"Ssatu"},"content":"\u003cp align\u003d\"center\" \u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":412,"author":{"gitId":"Ssatu"},"content":"  \u003cimg src\u003d\"images/AssignPolicySequenceDiagram.png\" width\u003d\"700\"/\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":413,"author":{"gitId":"Ssatu"},"content":"\u003c/p\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":414,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":415,"author":{"gitId":"Ssatu"},"content":"Step 1: The user enters `parse(assign 1 1 pr/200 sd/2020-10-12 ed/2022-10-12)` command to assign the first policy","lastModifiedDate":"2022-10-21"},{"lineNumber":416,"author":{"gitId":"Ssatu"},"content":"to the first person. The policy has a yearly premium of $200 and lasts for 2 years, from 2020 to 2022.","lastModifiedDate":"2022-10-21"},{"lineNumber":417,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":418,"author":{"gitId":"Ssatu"},"content":"Step 2: The `PolicyAssignCommandParser` parses the input and confirm that the indices are valid. ","lastModifiedDate":"2022-10-21"},{"lineNumber":419,"author":{"gitId":"Ssatu"},"content":"A `PolicyAssignCommand` object with all parameters is constructed. ","lastModifiedDate":"2022-10-21"},{"lineNumber":420,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":421,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** ","lastModifiedDate":"2022-10-21"},{"lineNumber":422,"author":{"gitId":"Ssatu"},"content":"Policy and Person indices that are not found in the `UniquePersonList` and `UniquePolicyList` respectively","lastModifiedDate":"2022-10-21"},{"lineNumber":423,"author":{"gitId":"Ssatu"},"content":"would be regarded as invalid indices. ","lastModifiedDate":"2022-10-21"},{"lineNumber":424,"author":{"gitId":"Ssatu"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":425,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":426,"author":{"gitId":"Ssatu"},"content":"Step 3: The `PolicyAssignCommand` is executed. The corresponding policy and person objects are retrieved and the ","lastModifiedDate":"2022-10-21"},{"lineNumber":427,"author":{"gitId":"Ssatu"},"content":"if not already assigned, the policy is assigned to the person.","lastModifiedDate":"2022-10-21"},{"lineNumber":428,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":429,"author":{"gitId":"Ssatu"},"content":"#### Design considerations","lastModifiedDate":"2022-10-21"},{"lineNumber":430,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":431,"author":{"gitId":"Ssatu"},"content":"**Aspect: Whether to allow users to assign policies to persons using names:**","lastModifiedDate":"2022-10-21"},{"lineNumber":432,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":433,"author":{"gitId":"Ssatu"},"content":"* **Alternative 1:** Allows assignment using policy/persons names.","lastModifiedDate":"2022-10-21"},{"lineNumber":434,"author":{"gitId":"Ssatu"},"content":"  * Pros: More flexible and quicker assigning if user knows exactly who and which policy they want to assign.","lastModifiedDate":"2022-10-21"},{"lineNumber":435,"author":{"gitId":"Ssatu"},"content":"  * Cons: More-bug prone, and would require the user to accurately provide the exact name of the policy/person. ","lastModifiedDate":"2022-10-21"},{"lineNumber":436,"author":{"gitId":"cowlinn"},"content":"  Hard to get used to for new users, and complicated for established users with lots of clients and policies.","lastModifiedDate":"2022-10-26"},{"lineNumber":437,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":438,"author":{"gitId":"Ssatu"},"content":"* **Alternative 2: (Current implementation)** Allow assignment using policy/person indices.","lastModifiedDate":"2022-10-21"},{"lineNumber":439,"author":{"gitId":"Ssatu"},"content":"  * Pros: Easy to implement and avoids confusion for new users.","lastModifiedDate":"2022-10-21"},{"lineNumber":440,"author":{"gitId":"Ssatu"},"content":"  * Cons: Would require the user to check out the list and find out the indices of their target person/policy.","lastModifiedDate":"2022-10-21"},{"lineNumber":441,"author":{"gitId":"Ssatu"},"content":"  This is overcome by the functionality of the `find` command, which allows users to filter the lists for specific ","lastModifiedDate":"2022-10-21"},{"lineNumber":442,"author":{"gitId":"Ssatu"},"content":"  persons/policies.","lastModifiedDate":"2022-10-21"},{"lineNumber":443,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":444,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"marcusczh"},"content":"### `Find` feature","lastModifiedDate":"2022-10-20"},{"lineNumber":449,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":450,"author":{"gitId":"marcusczh"},"content":"#### Implementation","lastModifiedDate":"2022-10-20"},{"lineNumber":451,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":452,"author":{"gitId":"cowlinn"},"content":"The find mechanism is facilitated by `FilteredList` from the JavaFx library, by using `FilteredList#setPredicate()` to update the list of clients being displayed based on the specified metrics.","lastModifiedDate":"2022-10-26"},{"lineNumber":453,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":454,"author":{"gitId":"marcusczh"},"content":"Given below is an example usage scenario and how the `find` mechanism behaves at each step.","lastModifiedDate":"2022-10-20"},{"lineNumber":455,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":456,"author":{"gitId":"cowlinn"},"content":"Step 1. The user executes a `find` command to find any clients matching the given metrics. The `find` command calls `AddressBookParser#parseCommand()`, which parses the arguments and calls `FindCommandParser#parse()` with the obtained results","lastModifiedDate":"2022-10-26"},{"lineNumber":457,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":458,"author":{"gitId":"marcusczh"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the arguments to the command is invalid, the execution will stop at this step.","lastModifiedDate":"2022-10-20"},{"lineNumber":459,"author":{"gitId":"marcusczh"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":460,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":461,"author":{"gitId":"marcusczh"},"content":"Step 2. `FindCommandParser#parse()` goes through the arguments and check which prefixes are present and creates a `FindCommand` object with the corresponding predicates.","lastModifiedDate":"2022-10-20"},{"lineNumber":462,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":463,"author":{"gitId":"cowlinn"},"content":"Step 3. `LogicManager` executes the `FindCommand` using the combined predicates, which calls `Model#updateFilteredPersonList()` and updates the list of clients displayed","lastModifiedDate":"2022-10-26"},{"lineNumber":464,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":465,"author":{"gitId":"marcusczh"},"content":"The following sequence diagram shows how the find operation works:","lastModifiedDate":"2022-10-20"},{"lineNumber":466,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":467,"author":{"gitId":"marcusczh"},"content":"![FindSequenceDiagram](images/FindSequenceDiagram.png)","lastModifiedDate":"2022-10-20"},{"lineNumber":468,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":469,"author":{"gitId":"marcusczh"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `FindXYZCommandParser` and `FindXYZCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2022-10-20"},{"lineNumber":470,"author":{"gitId":"marcusczh"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":471,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":472,"author":{"gitId":"marcusczh"},"content":"The following activity diagram summarizes what happens when a user executes a find command:","lastModifiedDate":"2022-10-20"},{"lineNumber":473,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":474,"author":{"gitId":"marcusczh"},"content":"![FindSequenceDiagram](images/FindActivityDiagram.png)","lastModifiedDate":"2022-10-20"},{"lineNumber":475,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":476,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":477,"author":{"gitId":"marcusczh"},"content":"#### Design considerations:","lastModifiedDate":"2022-10-20"},{"lineNumber":478,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":479,"author":{"gitId":"marcusczh"},"content":"**Aspect: How `find` executes:**","lastModifiedDate":"2022-10-20"},{"lineNumber":480,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":481,"author":{"gitId":"marcusczh"},"content":"* **Alternative 1 (current choice):** Utilise predicates and test for each predicate against each contact in the address book by making use of the JavaFx filteredList library.","lastModifiedDate":"2022-10-20"},{"lineNumber":482,"author":{"gitId":"marcusczh"},"content":"    * Pros: ","lastModifiedDate":"2022-10-20"},{"lineNumber":483,"author":{"gitId":"marcusczh"},"content":"      * Easy extension for additional predicates, by adding predicate classes","lastModifiedDate":"2022-10-20"},{"lineNumber":484,"author":{"gitId":"marcusczh"},"content":"      * Lesser user implementation","lastModifiedDate":"2022-10-20"},{"lineNumber":485,"author":{"gitId":"marcusczh"},"content":"    * Cons: ","lastModifiedDate":"2022-10-20"},{"lineNumber":486,"author":{"gitId":"marcusczh"},"content":"      * If there are too many predicates, there could be an excessive number of classes to manage","lastModifiedDate":"2022-10-20"},{"lineNumber":487,"author":{"gitId":"marcusczh"},"content":"      * Lesser control over lower level details of predicate testing","lastModifiedDate":"2022-10-20"},{"lineNumber":488,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":489,"author":{"gitId":"marcusczh"},"content":"* **Alternative 2:** Take in user conditions and test for each person in the address book","lastModifiedDate":"2022-10-20"},{"lineNumber":490,"author":{"gitId":"marcusczh"},"content":"    * Pros: ","lastModifiedDate":"2022-10-20"},{"lineNumber":491,"author":{"gitId":"marcusczh"},"content":"      * More control over lower level details.","lastModifiedDate":"2022-10-20"},{"lineNumber":492,"author":{"gitId":"marcusczh"},"content":"      * More efficient algorithms can be used for searching which can improve the overall runtime","lastModifiedDate":"2022-10-20"},{"lineNumber":493,"author":{"gitId":"marcusczh"},"content":"    * Cons: ","lastModifiedDate":"2022-10-20"},{"lineNumber":494,"author":{"gitId":"marcusczh"},"content":"      * Testing required to ensure that the predicate testing algorithms are implemented correctly","lastModifiedDate":"2022-10-20"},{"lineNumber":495,"author":{"gitId":"marcusczh"},"content":"      * Larger overhead in writing code","lastModifiedDate":"2022-10-20"},{"lineNumber":496,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":497,"author":{"gitId":"marcusczh"},"content":"Alternative 1 was preferred over alternative 2 due to the following reasons:","lastModifiedDate":"2022-10-20"},{"lineNumber":498,"author":{"gitId":"marcusczh"},"content":"  * We could make use of the existing JavaFx library and reduce the amount of additional code that is required.","lastModifiedDate":"2022-10-20"},{"lineNumber":499,"author":{"gitId":"marcusczh"},"content":"  * In addition, there is also a greater guarantee on the correctness of the code as compared to if we were to implement our own algorithms","lastModifiedDate":"2022-10-20"},{"lineNumber":500,"author":{"gitId":"marcusczh"},"content":"  * Lesser testing overhead, which meant that we can focus more testing on the features implementation and reduce more potential bugs","lastModifiedDate":"2022-10-20"},{"lineNumber":501,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":502,"author":{"gitId":"marcusczh"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** A similar execution path can be observed for other find related operations like findPolicy and findEvent.","lastModifiedDate":"2022-10-20"},{"lineNumber":503,"author":{"gitId":"marcusczh"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":510,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":511,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":512,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":513,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"loyhongshenggg"},"content":"* has a need to manage a significant number of clients","lastModifiedDate":"2022-09-23"},{"lineNumber":524,"author":{"gitId":"loyhongshenggg"},"content":"* Is a student financial advisor","lastModifiedDate":"2022-09-23"},{"lineNumber":525,"author":{"gitId":"loyhongshenggg"},"content":"* Has a  need to store additional client-related information","lastModifiedDate":"2022-09-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":529,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"cowlinn"},"content":"**Value proposition**: manage clients faster than a typical mouse/GUI driven app","lastModifiedDate":"2022-10-26"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                      | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"cowlinn"},"content":"|----------|--------------------------------------------|-----------------------------------|------------------------------------------------------------------------|","lastModifiedDate":"2022-09-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions            | refer to instructions when I forget how to use the App                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person                  |                                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                   | remove entries that I no longer need                                   |","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name             | locate details of persons without having to go through the entire list |","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details      | minimize chance of someone else seeing them by accident                |","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"| `*`      | user with many persons in the address book | sort persons by name              | locate a person easily                                                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"cowlinn"},"content":"| `**`     | new user                                   | see sample data                   | Have a better understanding of the app\u0027s default layout                |","lastModifiedDate":"2022-09-23"},{"lineNumber":547,"author":{"gitId":"cowlinn"},"content":"| `**`     | user                                       | filter my clients by keywords     | Locate my clients easily, based on a particular critera                |","lastModifiedDate":"2022-10-26"},{"lineNumber":548,"author":{"gitId":"cowlinn"},"content":"| `**`     | user                                       | update my client list             | Edit their contact details                                             |","lastModifiedDate":"2022-10-26"},{"lineNumber":549,"author":{"gitId":"cowlinn"},"content":"| `*`      | user                                       | have a reliable method            | store contact information without losing data                          |","lastModifiedDate":"2022-09-23"},{"lineNumber":550,"author":{"gitId":"cowlinn"},"content":"| `*`      | user                                       | view individual client\u0027s profiles | keep track of multiple, unique clients                                 |","lastModifiedDate":"2022-09-23"},{"lineNumber":551,"author":{"gitId":"cowlinn"},"content":"| `*`      | user                                       | pin important clients             | be reminded of users which are of higher priority                      |","lastModifiedDate":"2022-10-26"},{"lineNumber":552,"author":{"gitId":"-"},"content":"*{More to be added}* ","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"marcusczh"},"content":"(For all use cases below, the **System** is `LongTimeNoSee (LTNS)` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-09-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"marcusczh"},"content":"**Use case 1: Help**","lastModifiedDate":"2022-09-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"marcusczh"},"content":"1. User is not sure what commands there are","lastModifiedDate":"2022-09-23"},{"lineNumber":563,"author":{"gitId":"marcusczh"},"content":"2. User inputs the command to request help","lastModifiedDate":"2022-09-23"},{"lineNumber":564,"author":{"gitId":"marcusczh"},"content":"3. LTNS displays a help message","lastModifiedDate":"2022-09-23"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":566,"author":{"gitId":"marcusczh"},"content":"   Use case ends","lastModifiedDate":"2022-09-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"marcusczh"},"content":"**Use Case 2: Add client**","lastModifiedDate":"2022-09-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"marcusczh"},"content":"1. User loads the application","lastModifiedDate":"2022-09-23"},{"lineNumber":573,"author":{"gitId":"marcusczh"},"content":"2. User inputs the command to add a client","lastModifiedDate":"2022-09-23"},{"lineNumber":574,"author":{"gitId":"marcusczh"},"content":"3. User tags on the details he would like to specify","lastModifiedDate":"2022-09-23"},{"lineNumber":575,"author":{"gitId":"marcusczh"},"content":"4. LTNS switches to the default view automatically","lastModifiedDate":"2022-09-23"},{"lineNumber":576,"author":{"gitId":"marcusczh"},"content":"5. LTNS adds the latest client to the list view","lastModifiedDate":"2022-09-23"},{"lineNumber":577,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":578,"author":{"gitId":"marcusczh"},"content":"   Use case ends","lastModifiedDate":"2022-09-23"},{"lineNumber":579,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":580,"author":{"gitId":"marcusczh"},"content":"**Use case 3: List clients**","lastModifiedDate":"2022-09-23"},{"lineNumber":581,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":582,"author":{"gitId":"marcusczh"},"content":"**MSS**","lastModifiedDate":"2022-09-23"},{"lineNumber":583,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":584,"author":{"gitId":"cowlinn"},"content":"1. User requests to list all clients","lastModifiedDate":"2022-10-26"},{"lineNumber":585,"author":{"gitId":"cowlinn"},"content":"2. LTNS displays a list of all clients","lastModifiedDate":"2022-10-26"},{"lineNumber":586,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":587,"author":{"gitId":"marcusczh"},"content":"   Use case ends","lastModifiedDate":"2022-09-23"},{"lineNumber":588,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":589,"author":{"gitId":"marcusczh"},"content":"**Use case 4: View clients**","lastModifiedDate":"2022-09-23"},{"lineNumber":590,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":591,"author":{"gitId":"marcusczh"},"content":"**MSS**","lastModifiedDate":"2022-09-23"},{"lineNumber":592,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":593,"author":{"gitId":"marcusczh"},"content":"1. User loads the application","lastModifiedDate":"2022-09-23"},{"lineNumber":594,"author":{"gitId":"marcusczh"},"content":"2. User clicks on a specific client from the list view","lastModifiedDate":"2022-09-23"},{"lineNumber":595,"author":{"gitId":"marcusczh"},"content":"3. User can update information specific to his client (i.e: Birthday / Events/ Notes etc.)","lastModifiedDate":"2022-09-23"},{"lineNumber":596,"author":{"gitId":"marcusczh"},"content":"4. User switches to his default view","lastModifiedDate":"2022-09-23"},{"lineNumber":597,"author":{"gitId":"marcusczh"},"content":"5. LTNS shows a list of clients stored in the database","lastModifiedDate":"2022-09-23"},{"lineNumber":598,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"cowlinn"},"content":"**Use case 6: Delete a person**","lastModifiedDate":"2022-10-20"},{"lineNumber":602,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":603,"author":{"gitId":"cowlinn"},"content":"**MSS**","lastModifiedDate":"2022-10-20"},{"lineNumber":604,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":605,"author":{"gitId":"cowlinn"},"content":"1. User requests to \u003cu\u003elist clients(UC3)\u003c/u\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":606,"author":{"gitId":"cowlinn"},"content":"2. User requests to delete a specific person in the list","lastModifiedDate":"2022-10-20"},{"lineNumber":607,"author":{"gitId":"cowlinn"},"content":"3. LTNS deletes the person","lastModifiedDate":"2022-10-20"},{"lineNumber":608,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":609,"author":{"gitId":"cowlinn"},"content":"   Use case ends","lastModifiedDate":"2022-10-20"},{"lineNumber":610,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":611,"author":{"gitId":"cowlinn"},"content":"**Extensions**","lastModifiedDate":"2022-10-20"},{"lineNumber":612,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":613,"author":{"gitId":"cowlinn"},"content":"* 2a. The list is empty.","lastModifiedDate":"2022-10-20"},{"lineNumber":614,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":615,"author":{"gitId":"cowlinn"},"content":"  Use case ends.","lastModifiedDate":"2022-10-20"},{"lineNumber":616,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":617,"author":{"gitId":"cowlinn"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2022-10-20"},{"lineNumber":618,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":619,"author":{"gitId":"cowlinn"},"content":"    * 3a1. LTNS shows an error message.","lastModifiedDate":"2022-10-20"},{"lineNumber":620,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":621,"author":{"gitId":"cowlinn"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-10-20"},{"lineNumber":622,"author":{"gitId":"cowlinn"},"content":"    ","lastModifiedDate":"2022-10-20"},{"lineNumber":623,"author":{"gitId":"cowlinn"},"content":"**Use case 7: Sort a list**","lastModifiedDate":"2022-10-20"},{"lineNumber":624,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":625,"author":{"gitId":"Ssatu"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":626,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":627,"author":{"gitId":"Ssatu"},"content":"1. User requests to \u003cu\u003elist clients(UC3)\u003c/u\u003e, which will be shown based on date added (default sort)","lastModifiedDate":"2022-09-27"},{"lineNumber":628,"author":{"gitId":"Ssatu"},"content":"2. User requests to sort the list based on name (or any other metric)","lastModifiedDate":"2022-09-27"},{"lineNumber":629,"author":{"gitId":"Ssatu"},"content":"3. LTNS shows the list of clients, sorted in alphabetical order based on client\u0027s name. (or based on how the metric is compared)","lastModifiedDate":"2022-09-27"},{"lineNumber":630,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":631,"author":{"gitId":"Ssatu"},"content":"   Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":632,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":633,"author":{"gitId":"Ssatu"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":634,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":635,"author":{"gitId":"Ssatu"},"content":"* 2a. Given sorting metric does not exist.","lastModifiedDate":"2022-09-27"},{"lineNumber":636,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":637,"author":{"gitId":"Ssatu"},"content":"  Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":638,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":639,"author":{"gitId":"cowlinn"},"content":"**Use case 8: Delete a person**","lastModifiedDate":"2022-10-20"},{"lineNumber":640,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":641,"author":{"gitId":"Ssatu"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":642,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":643,"author":{"gitId":"Ssatu"},"content":"1. User requests to \u003cu\u003elist clients(UC3)\u003c/u\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":644,"author":{"gitId":"Ssatu"},"content":"2. User requests to delete a specific person in the list","lastModifiedDate":"2022-09-27"},{"lineNumber":645,"author":{"gitId":"Ssatu"},"content":"3. LTNS deletes the person","lastModifiedDate":"2022-09-27"},{"lineNumber":646,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":647,"author":{"gitId":"Ssatu"},"content":"   Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":648,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":649,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":651,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":652,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":653,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":654,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":655,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":656,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":657,"author":{"gitId":"Ssatu"},"content":"    * 3a1. LTNS shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":658,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":659,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-09-27"},{"lineNumber":660,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":661,"author":{"gitId":"cowlinn"},"content":"**Use case 8: Pin a client**","lastModifiedDate":"2022-10-20"},{"lineNumber":662,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":663,"author":{"gitId":"Ssatu"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":664,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":665,"author":{"gitId":"Ssatu"},"content":"1. User requests to pin a client by name","lastModifiedDate":"2022-09-27"},{"lineNumber":666,"author":{"gitId":"Ssatu"},"content":"2. LTNS will display the pinned clients","lastModifiedDate":"2022-09-27"},{"lineNumber":667,"author":{"gitId":"Ssatu"},"content":"3. User will be able to see all pinned clients in all pages.","lastModifiedDate":"2022-09-27"},{"lineNumber":668,"author":{"gitId":"Ssatu"},"content":"    ","lastModifiedDate":"2022-09-27"},{"lineNumber":669,"author":{"gitId":"Ssatu"},"content":"   Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":670,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":671,"author":{"gitId":"Ssatu"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":672,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":673,"author":{"gitId":"Ssatu"},"content":"* 2a. LTNS displays a highlighted box on pinned clients when using the list command.","lastModifiedDate":"2022-09-27"},{"lineNumber":674,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":675,"author":{"gitId":"Ssatu"},"content":"  Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":676,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":677,"author":{"gitId":"cowlinn"},"content":"**Use case 9: Find a contact**","lastModifiedDate":"2022-10-20"},{"lineNumber":678,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":679,"author":{"gitId":"Ssatu"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":680,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":681,"author":{"gitId":"Ssatu"},"content":"1. User requests to search by a certain metric.","lastModifiedDate":"2022-09-27"},{"lineNumber":682,"author":{"gitId":"cowlinn"},"content":"2. LTNS shows a list of clients with matching metrics.","lastModifiedDate":"2022-10-26"},{"lineNumber":683,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":684,"author":{"gitId":"Ssatu"},"content":"   Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":685,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":686,"author":{"gitId":"Ssatu"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":687,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":688,"author":{"gitId":"Ssatu"},"content":"* 2a. User requests another search.","lastModifiedDate":"2022-09-27"},{"lineNumber":689,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":690,"author":{"gitId":"cowlinn"},"content":"  * 2a1. LTNS displays a new list of clients with matching metrics.","lastModifiedDate":"2022-10-26"},{"lineNumber":691,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":692,"author":{"gitId":"Ssatu"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":693,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":694,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":695,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":696,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":697,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":698,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":699,"author":{"gitId":"ReubenChay"},"content":"2.  _mainstream OS_ includes Windows, MacOS, Linux systems with 64-bit machines","lastModifiedDate":"2022-09-24"},{"lineNumber":700,"author":{"gitId":"ReubenChay"},"content":"3.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2022-09-24"},{"lineNumber":701,"author":{"gitId":"ReubenChay"},"content":"4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2022-09-24"},{"lineNumber":702,"author":{"gitId":"ReubenChay"},"content":"5.  Size of windows should be scalable to full screen for maximum screen utilisation","lastModifiedDate":"2022-09-24"},{"lineNumber":703,"author":{"gitId":"ReubenChay"},"content":"6. Performance requirements: Should be able to serve its features right now","lastModifiedDate":"2022-09-24"},{"lineNumber":704,"author":{"gitId":"ReubenChay"},"content":"8. Extremely intuitive and minimalistic design to avoid confusion. ","lastModifiedDate":"2022-09-24"},{"lineNumber":705,"author":{"gitId":"ReubenChay"},"content":"9. The product is not required to handle the direct contacting of users.","lastModifiedDate":"2022-09-24"},{"lineNumber":706,"author":{"gitId":"Ssatu"},"content":"10. For added personality, user should be able to have some customisability.(e.g: Change UI’s theme based on system-defined presets)","lastModifiedDate":"2022-10-28"},{"lineNumber":707,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-24"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":710,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":712,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":713,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":714,"author":{"gitId":"loyhongshenggg"},"content":"* **Client**: A client is a person being served by the financial advisor.","lastModifiedDate":"2022-09-23"},{"lineNumber":715,"author":{"gitId":"loyhongshenggg"},"content":"*  **Policy**: An investment or insurance policy that is being sold by an insurance company, through the financial advisor.","lastModifiedDate":"2022-09-23"},{"lineNumber":716,"author":{"gitId":"loyhongshenggg"},"content":"*  **Financial advisor**: A professional paid to offer financial advice to clients","lastModifiedDate":"2022-09-23"},{"lineNumber":717,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":718,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":719,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":720,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":721,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":722,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":723,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":724,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":725,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":726,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":727,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":728,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":729,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":730,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":731,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":732,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":733,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":734,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":735,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":736,"author":{"gitId":"cowlinn"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample clients. The window size may not be optimum.","lastModifiedDate":"2022-10-26"},{"lineNumber":737,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":739,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":740,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":741,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":742,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":743,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":744,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":745,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":746,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":750,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":751,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":752,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":753,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":754,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":756,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":757,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":758,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":759,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":760,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":761,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":762,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":763,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":764,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":765,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":766,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":767,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":768,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":769,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":770,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ReubenChay":67,"loyhongshenggg":66,"Ssatu":108,"cowlinn":85,"-":351,"marcusczh":93}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"   1. Run the `longtimenosee.Main` and try a few commands.","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"-":54,"marcusczh":1}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"   e.g. `longtimenosee.commons.StringUtilTest`","lastModifiedDate":"2022-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"   e.g. `longtimenosee.storage.StorageManagerTest`","lastModifiedDate":"2022-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"   e.g. `longtimenosee.logic.LogicManagerTest`","lastModifiedDate":"2022-10-05"}],"authorContributionMap":{"-":33,"marcusczh":3}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2022-09-23"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"    \u003cimg src\u003d\"images/LTNS_logo.png\" width\u003d\"200\" height\u003d\"200\"\u003e","lastModifiedDate":"2022-09-23"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"\u003c/p\u003e","lastModifiedDate":"2022-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"Long Time No See (LTNS) is a  **comprehensive desktop app built for financial advisors to manage their clients\u0027 financial policies and events**. It is optimized for use via a **[Command Line Interface](#command-line-interface-cli) (CLI)** while still having the benefits of an intuitive and minimalistic **[Graphical User Interface](#graphic-user-interface-gui) (GUI)**. With all the essential tools packed into one app, LTNS will enable you to streamline your financial advising journey immediately!","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"This document is the official user guide of the Long Time No See (LTNS) app. This guide serves as an introduction to LTNS and a help menu should you have any doubts while using the app.","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"# Table of Contents","lastModifiedDate":"2022-09-23"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"1. [Quickstart](#quick-start)","lastModifiedDate":"2022-09-23"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"2. [Features](#features)\u003cbr\u003e","lastModifiedDate":"2022-10-30"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"   1. [Common Features](#common-features)\u003cbr\u003e","lastModifiedDate":"2022-10-31"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"      1. [Viewing Help](#viewing-help--help)","lastModifiedDate":"2022-10-31"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"      2. [Clearing Entries](#clearing-all-entries--clear)","lastModifiedDate":"2022-10-31"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"      3. [Exiting the Program](#exiting-the-program--exit)","lastModifiedDate":"2022-10-31"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"      4. [Saving Data](#saving-the-data)","lastModifiedDate":"2022-10-31"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"      5. [Manually Editing Data File](#editing-the-data-file)","lastModifiedDate":"2022-10-31"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"   2. [Client Features](#client-features)\u003cbr\u003e","lastModifiedDate":"2022-10-31"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"      1. [Adding a Client](#adding-a-client-addclient)","lastModifiedDate":"2022-10-31"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"      2. [Listing all Clients](#listing-all-clients--allclients)","lastModifiedDate":"2022-10-31"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"      3. [Editing a Client](#editing-a-client--editclient)","lastModifiedDate":"2022-10-31"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"      4. [Searching for a Client](#searching-for-clients-findclient)","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"      5. [Deleting a Client](#deleting-a-client--deleteclient)","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"      6. [Sorting all Clients](#sorting-all-clients--sort)","lastModifiedDate":"2022-10-31"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"      7. [Pin a Client](#pin-a-client-pin)","lastModifiedDate":"2022-10-31"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"   3. [Policy Features](#policy-features)\u003cbr\u003e","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"      1. [Adding a Policy](#adding-a-policy-addpolicy)","lastModifiedDate":"2022-10-31"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"      2. [Switching to Policy View](#switching-to-the-view-of-currently-listed-policies-policies)","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"      3. [Listing all Policies](#viewing-all-policies-in-the-address-book-allpolicies)","lastModifiedDate":"2022-10-31"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"      4. [Deleting a Policy](#deleting-a-policy)","lastModifiedDate":"2022-10-31"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"      5. [Searching for a Policy](#searching-for-a-policy-findpolicy)","lastModifiedDate":"2022-10-31"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"      6. [Assigning a Policy to a Client](#assigning-a-policy-to-a-client-assign)","lastModifiedDate":"2022-10-31"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"      7. [Listing all Assigned Policies](#listing-out-policies-assigned-to-a-clientlistassigned)","lastModifiedDate":"2022-10-31"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"      8. [Deleting Assigned Policies from a Client](#deleting-assigned-policies-from-a-client-deleteassigned)","lastModifiedDate":"2022-10-31"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"      9. [Tracking your Income](#tracking-your-income---viewincome)","lastModifiedDate":"2022-10-31"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"   4. [Event Features](#event-features)","lastModifiedDate":"2022-10-31"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"      1. [Adding an Event](#adding-an-event--addevent)","lastModifiedDate":"2022-10-31"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"      2. [Listing all Events](#viewing-all-events--allevents)","lastModifiedDate":"2022-10-31"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"      3. [Searching for an Event](#searching-for-an-event--findevent)","lastModifiedDate":"2022-10-31"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"      4. [Viewing all Events in the next 7 days](#viewing-all-events-in-the-next-7-days--calendar)","lastModifiedDate":"2022-10-31"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"3. [Frequently Asked Questions](#faq)","lastModifiedDate":"2022-10-23"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"4. [Command Summary](#command-summary)","lastModifiedDate":"2022-10-23"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"5. [Glossary](#glossary)","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-09-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2022-09-23"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"1. Ensure you have Java `11` or above installed on your Computer. (Installation Guides: [Mac User](https://www.geeksforgeeks.org/how-to-install-java-on-macos/), [Windows User](https://phoenixnap.com/kb/install-java-windows))","lastModifiedDate":"2022-10-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"loyhongshenggg"},"content":"2. Download the latest `longtimenosee.jar` from [here](https://github.com/AY2223S1-CS2103T-W13-2/tp/releases).","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"loyhongshenggg"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your Long Time No See application.","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"loyhongshenggg"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"loyhongshenggg"},"content":"![GUI.png](./images/GUI.png)","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"loyhongshenggg"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"   * **`allClients`** : Lists all clients in the Address Book.","lastModifiedDate":"2022-10-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"   * **`addClient`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-301 b/2000-01-01 i/90000.0 ra/M` : Adds a client named `John Doe` to the Address Book.","lastModifiedDate":"2022-10-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"loyhongshenggg"},"content":"   * **`deleteClient`**`3` : Deletes the 3rd client shown in the current list.","lastModifiedDate":"2022-10-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"   * **`clear`** : Deletes all clients.","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"loyhongshenggg"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2022-10-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"# Features","lastModifiedDate":"2022-10-23"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":85,"author":{"gitId":"loyhongshenggg"},"content":"**Long Time No See (LTNS)** allows you to track your clients, policies and events.","lastModifiedDate":"2022-10-26"},{"lineNumber":86,"author":{"gitId":"loyhongshenggg"},"content":"As such, the features available to you are split into **4** main features:","lastModifiedDate":"2022-10-26"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"1. [Common Features](#common-features): Here you can find basic Application features","lastModifiedDate":"2022-10-23"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"2. [Client Features](#client-features): Here you can find all features related to keeping track of all your clients ","lastModifiedDate":"2022-10-23"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"3. [Policy Features](#policy-features): Here you can find all features related to keeping track of all your policies ","lastModifiedDate":"2022-10-23"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"4. [Event Features](#event-features): Here you can find all features related to keeping track of all your important appointments","lastModifiedDate":"2022-10-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"* Items with `n…` after them can be used multiple times and at least n times.\u003cbr\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":103,"author":{"gitId":"loyhongshenggg"},"content":"  e.g. `[t/TAG]0…​` can be used as `0…​` (i.e. 0 times).","lastModifiedDate":"2022-11-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":111,"author":{"gitId":"loyhongshenggg"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`. ","lastModifiedDate":"2021-02-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":114,"author":{"gitId":"marcusczh"},"content":"* Click [here](#command-format-table) for a list of all possible parameters and their constraints","lastModifiedDate":"2022-11-01"},{"lineNumber":115,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":116,"author":{"gitId":"loyhongshenggg"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-11-01"},{"lineNumber":117,"author":{"gitId":"loyhongshenggg"},"content":"Parameters refer to the information you type into the app to be stored. For example, `n/John` where John is the parameter","lastModifiedDate":"2022-11-01"},{"lineNumber":118,"author":{"gitId":"loyhongshenggg"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"ReubenChay"},"content":"## Common Features","lastModifiedDate":"2022-10-23"},{"lineNumber":123,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2022-11-01"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"ReubenChay"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2022-10-23"},{"lineNumber":133,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":134,"author":{"gitId":"ReubenChay"},"content":"Clears all data from your application. ","lastModifiedDate":"2022-10-30"},{"lineNumber":135,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":136,"author":{"gitId":"ReubenChay"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:warning: **Warning:**","lastModifiedDate":"2022-10-31"},{"lineNumber":137,"author":{"gitId":"ReubenChay"},"content":"This action is irreversible! ","lastModifiedDate":"2022-10-31"},{"lineNumber":138,"author":{"gitId":"ReubenChay"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-31"},{"lineNumber":139,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":140,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":141,"author":{"gitId":"ReubenChay"},"content":"Format: `clear`","lastModifiedDate":"2022-10-23"},{"lineNumber":142,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":143,"author":{"gitId":"ReubenChay"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2022-10-23"},{"lineNumber":144,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":145,"author":{"gitId":"ReubenChay"},"content":"Exits the program.","lastModifiedDate":"2022-10-23"},{"lineNumber":146,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":147,"author":{"gitId":"ReubenChay"},"content":"Format: `exit`","lastModifiedDate":"2022-10-23"},{"lineNumber":148,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":149,"author":{"gitId":"ReubenChay"},"content":"### Saving the data","lastModifiedDate":"2022-10-23"},{"lineNumber":150,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":151,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":152,"author":{"gitId":"ReubenChay"},"content":"LTNS application data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-10-31"},{"lineNumber":153,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":154,"author":{"gitId":"ReubenChay"},"content":"### Editing the data file","lastModifiedDate":"2022-10-23"},{"lineNumber":155,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":156,"author":{"gitId":"ReubenChay"},"content":"LTNS application data is saved as a [JSON](#json-file) file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-10-31"},{"lineNumber":157,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":158,"author":{"gitId":"ReubenChay"},"content":"Below is an example of what your JSON File should look like: ","lastModifiedDate":"2022-10-30"},{"lineNumber":159,"author":{"gitId":"loyhongshenggg"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":160,"author":{"gitId":"loyhongshenggg"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":161,"author":{"gitId":"loyhongshenggg"},"content":"\u003cimg src\u003d\"./images/JsonExample.png\" width\u003d\"230\" height\u003d\"450\"\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":162,"author":{"gitId":"loyhongshenggg"},"content":"\u003c/p\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":163,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":164,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":165,"author":{"gitId":"ReubenChay"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2022-10-23"},{"lineNumber":166,"author":{"gitId":"ReubenChay"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-10-23"},{"lineNumber":167,"author":{"gitId":"ReubenChay"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":171,"author":{"gitId":"ReubenChay"},"content":"## Client Features","lastModifiedDate":"2022-10-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"cowlinn"},"content":"### Adding a client: `addClient`","lastModifiedDate":"2022-10-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"cowlinn"},"content":"Adds a client to the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"loyhongshenggg"},"content":"Format: `addClient n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​ b/BIRTHDAY i/INCOME ra/RISK_APPETITE`","lastModifiedDate":"2022-10-28"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"cowlinn"},"content":"A client can have any number of tags (including 0)","lastModifiedDate":"2022-10-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-23"},{"lineNumber":184,"author":{"gitId":"cowlinn"},"content":"The format for entering a birthday is \"YYYY-MM-DD\". The dates entered must be valid.","lastModifiedDate":"2022-10-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":187,"author":{"gitId":"cowlinn"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-23"},{"lineNumber":188,"author":{"gitId":"cowlinn"},"content":"The `Risk Appetite` can be classified as High, Medium or Low. They are represented by characters \"H\", \"M\" and","lastModifiedDate":"2022-10-23"},{"lineNumber":189,"author":{"gitId":"cowlinn"},"content":"\"L\" respectively. e.g: \"ra/H\". All other values will be ignored.","lastModifiedDate":"2022-10-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"cowlinn"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-29"},{"lineNumber":193,"author":{"gitId":"cowlinn"},"content":"The income added is based on an individual\u0027s Yearly income.","lastModifiedDate":"2022-10-29"},{"lineNumber":194,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":195,"author":{"gitId":"cowlinn"},"content":"An income added is based on the **tax income brackets** set up by [IRAS for Financial Year 2022-2023.](https://www.iras.gov.sg/taxes/individual-income-tax/basics-of-individual-income-tax/tax-residency-and-tax-rates/individual-income-tax-rates)","lastModifiedDate":"2022-10-30"},{"lineNumber":196,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":197,"author":{"gitId":"cowlinn"},"content":"This information will be displayed in the app","lastModifiedDate":"2022-10-30"},{"lineNumber":198,"author":{"gitId":"cowlinn"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-29"},{"lineNumber":199,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":200,"author":{"gitId":"cowlinn"},"content":"| Income Bracket | Yearly Income range                                 |","lastModifiedDate":"2022-10-29"},{"lineNumber":201,"author":{"gitId":"cowlinn"},"content":"|----------------|-----------------------------------------------------|","lastModifiedDate":"2022-10-29"},{"lineNumber":202,"author":{"gitId":"cowlinn"},"content":"| First          | Less than or equal to S$30,000                      |","lastModifiedDate":"2022-10-29"},{"lineNumber":203,"author":{"gitId":"cowlinn"},"content":"| Second         | More than S$30,000, less than or equal to $40,000   |","lastModifiedDate":"2022-10-29"},{"lineNumber":204,"author":{"gitId":"cowlinn"},"content":"| Third          | More than S$40,000, less than or equal to $80,000   |","lastModifiedDate":"2022-10-29"},{"lineNumber":205,"author":{"gitId":"cowlinn"},"content":"| Fourth         | More than S$80,000, less than or equal to $120,000  |","lastModifiedDate":"2022-10-29"},{"lineNumber":206,"author":{"gitId":"cowlinn"},"content":"| Fifth          | More than S$120,000, less than or equal to $160,000 |","lastModifiedDate":"2022-10-29"},{"lineNumber":207,"author":{"gitId":"cowlinn"},"content":"| Sixth          | More than S$160,000, less than or equal to $200,000 |","lastModifiedDate":"2022-10-29"},{"lineNumber":208,"author":{"gitId":"cowlinn"},"content":"| Seventh        | More than S$200,000, less than or equal to $240,000 |","lastModifiedDate":"2022-10-29"},{"lineNumber":209,"author":{"gitId":"cowlinn"},"content":"| Eight          | More than S$240,000, less than or equal to $280,000 |","lastModifiedDate":"2022-10-29"},{"lineNumber":210,"author":{"gitId":"cowlinn"},"content":"| Ninth          | More than S$280,000, less than or equal to $320,000 |","lastModifiedDate":"2022-10-29"},{"lineNumber":211,"author":{"gitId":"cowlinn"},"content":"| Tenth          | More than $320,0000                                 |","lastModifiedDate":"2022-10-29"},{"lineNumber":212,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"cowlinn"},"content":"* `addClient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01, b/2000-05-05 i/5000.0 ra/L`","lastModifiedDate":"2022-10-30"},{"lineNumber":215,"author":{"gitId":"loyhongshenggg"},"content":"* `addClient n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal b/1920-05-06 i/1000000 ra/H`","lastModifiedDate":"2022-10-28"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"cowlinn"},"content":"### Listing all clients : `allClients`","lastModifiedDate":"2022-10-26"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"cowlinn"},"content":"Shows a list of all clients in the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"cowlinn"},"content":"Format: `allClients`","lastModifiedDate":"2022-10-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"cowlinn"},"content":"### Editing a client : `editClient`","lastModifiedDate":"2022-10-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"cowlinn"},"content":"Edits an existing client in the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"cowlinn"},"content":"Format: `editClient INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… [b/BIRTHDAY] [i/INCOME] [ra/RISK_APPETITE] ​`","lastModifiedDate":"2022-10-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"cowlinn"},"content":"* Edits the client at the specified `INDEX`. The index refers to the index number shown in the displayed client list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"cowlinn"},"content":"* When editing tags, the existing tags of the client will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2022-10-26"},{"lineNumber":233,"author":{"gitId":"cowlinn"},"content":"* You can remove all the client’s tags by typing `t/` without","lastModifiedDate":"2022-10-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    specifying any tags after it. ","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"loyhongshenggg"},"content":"*  `editClient 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st client to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2022-10-28"},{"lineNumber":238,"author":{"gitId":"loyhongshenggg"},"content":"*  `editClient 2 n/Betsy Crower t/` Edits the name of the 2nd client to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2022-10-28"},{"lineNumber":239,"author":{"gitId":"loyhongshenggg"},"content":"*  `editClient 3 b/2000-01-01` Edits the birthday of the 3rd client to be the 1st January 2000.","lastModifiedDate":"2022-10-28"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"ReubenChay"},"content":"### Searching for Clients: `findClient`","lastModifiedDate":"2022-10-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"ReubenChay"},"content":"Search for clients based on certain [metrics](#metric)","lastModifiedDate":"2022-10-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"marcusczh"},"content":"Format: `findClient [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​ [b/BIRTHDAY] [i/INCOME] [ra/RISK_APPETITE] [ti/TITLE] [cov/COVERAGE]…​ [cmp/COMPANY]`","lastModifiedDate":"2022-11-01"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"marcusczh"},"content":"The following table illustrates the details of each metric and their search range:","lastModifiedDate":"2022-10-24"},{"lineNumber":248,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":249,"author":{"gitId":"marcusczh"},"content":"| Metric        | Prefix | Search range                                                                                                                                                                                                                                                                                                                                              |","lastModifiedDate":"2022-11-01"},{"lineNumber":250,"author":{"gitId":"marcusczh"},"content":"|---------------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-01"},{"lineNumber":251,"author":{"gitId":"marcusczh"},"content":"| Name          | n/     | - The search is case-insensitive. e.g `hans` will match `Hans`\u003cbr/\u003e - The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`\u003cbr/\u003e - Only full words will be matched e.g. `Han` will not match `Hans`\u003cbr/\u003e - clients matching at least one keyword will be listed. \u003cbr/\u003e e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`       |","lastModifiedDate":"2022-11-01"},{"lineNumber":252,"author":{"gitId":"marcusczh"},"content":"| Phone         | p/     | - All clients whose phone number contains the exact specified numbers will be listed                                                                                                                                                                                                                                                                      |","lastModifiedDate":"2022-11-01"},{"lineNumber":253,"author":{"gitId":"marcusczh"},"content":"| Email         | e/     | - The search is case-insensitive. e.g `alice@example.com` will match `Alice@example.com`                                                                                                                                                                                                                                                                  |","lastModifiedDate":"2022-11-01"},{"lineNumber":254,"author":{"gitId":"marcusczh"},"content":"| Address       | a/     | - The search is case-insensitive. e.g `Bedok` will match `bedok`\u003cbr/\u003e                                                                                                                                                                                                                                                                                     |","lastModifiedDate":"2022-11-01"},{"lineNumber":255,"author":{"gitId":"marcusczh"},"content":"| Tag           | t/     | - The search is case-insensitive. e.g `friends` will match `Friends`\u003cbr/\u003e - Only full words will be matched e.g. `colleagues` will not match `colleague`\u003cbr/\u003e - More than one tag can be specified to list all clients that have all the specified tags. \u003cbr/\u003e e.g. `friends` and `family` will list all clients with both the `friends` and `family` tag |","lastModifiedDate":"2022-11-01"},{"lineNumber":256,"author":{"gitId":"marcusczh"},"content":"| Birthday      | b/     | - Only clients whose birthday falls on the specified date will be listed                                                                                                                                                                                                                                                                                  |","lastModifiedDate":"2022-11-01"},{"lineNumber":257,"author":{"gitId":"marcusczh"},"content":"| Income        | i/     | - Any valid income value can be entered and it will be matched with the corresponding income bracket\u003cbr/\u003e - All clients whose income falls under the same income bracket as the specified income will be listed \u003cbr/\u003e e.g `15000` will be matched with `12000`                                                                                            |","lastModifiedDate":"2022-11-01"},{"lineNumber":258,"author":{"gitId":"marcusczh"},"content":"| Risk Appetite | ra/    | - All clients whose risk appetite matches the specified risk level will be listed                                                                                                                                                                                                                                                                         |","lastModifiedDate":"2022-11-01"},{"lineNumber":259,"author":{"gitId":"marcusczh"},"content":"| Title         | ti/    | - The search is case insensitive. e.g `Health Plan` will match `health plan`\u003cbr/\u003e - Clients who are covered by a policy of which title contains at least one keyword will be listed                                                                                                                                                                       |","lastModifiedDate":"2022-11-01"},{"lineNumber":260,"author":{"gitId":"marcusczh"},"content":"| Coverage      | cov/   | - More than one coverage can be specified to list all clients with all of the specified coverage types. \u003cbr/\u003e e.g. `HEALTH` and `LIFE` will list all clients with both the `HEALTH` and `LIFE` coverage type \u003cbr/\u003e - Clients who are covered by policies which covers all the specified coverage types will be listed                                     |","lastModifiedDate":"2022-11-01"},{"lineNumber":261,"author":{"gitId":"marcusczh"},"content":"| Company       | cmp/   | - Clients who are covered by a policy belonging to the specified company will be listed                                                                                                                                                                                                                                                                   |","lastModifiedDate":"2022-11-01"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":263,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":265,"author":{"gitId":"cowlinn"},"content":"* `findClient n/John` returns `john` and `John Doe`","lastModifiedDate":"2022-10-26"},{"lineNumber":266,"author":{"gitId":"cowlinn"},"content":"* `findClient n/alex david` returns `Alex Yeoh`, `David Li`","lastModifiedDate":"2022-10-26"},{"lineNumber":267,"author":{"gitId":"cowlinn"},"content":"* `findClient p/8743` returns clients with that contain `8743` in their phone number","lastModifiedDate":"2022-10-26"},{"lineNumber":268,"author":{"gitId":"cowlinn"},"content":"* `findClient t/colleagues t/friends` returns clients with both the `colleagues` and `friends` tag","lastModifiedDate":"2022-10-26"},{"lineNumber":269,"author":{"gitId":"cowlinn"},"content":"* `findClient n/alex t/friends` returns clients with the name `alex` and tagged with a `friends` tag","lastModifiedDate":"2022-10-26"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"marcusczh"},"content":"Below is an example of what you will expect to see when you call `findClient n/alex`:","lastModifiedDate":"2022-11-01"},{"lineNumber":272,"author":{"gitId":"marcusczh"},"content":"![findClientExample](./images/findClientExample.png)","lastModifiedDate":"2022-11-01"},{"lineNumber":273,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":274,"author":{"gitId":"cowlinn"},"content":"### Deleting a client : `deleteClient`","lastModifiedDate":"2022-10-26"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"cowlinn"},"content":"Deletes the specified client from the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"loyhongshenggg"},"content":"Format: `deleteClient INDEX`","lastModifiedDate":"2022-10-28"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"cowlinn"},"content":"* Deletes the client at the specified `INDEX`.","lastModifiedDate":"2022-10-26"},{"lineNumber":281,"author":{"gitId":"cowlinn"},"content":"* The index refers to the index number shown in the displayed client list.","lastModifiedDate":"2022-10-26"},{"lineNumber":282,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"cowlinn"},"content":"* `allClients` followed by `deleteClient 2` deletes the 2nd client in the address book.","lastModifiedDate":"2022-10-30"},{"lineNumber":286,"author":{"gitId":"cowlinn"},"content":"* `findClient n/Betsy` followed by `deleteClient 1` deletes the 1st Client in the results of the `findClient` command.","lastModifiedDate":"2022-11-01"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"loyhongshenggg"},"content":"### Sorting all Clients : `sort`","lastModifiedDate":"2022-09-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":290,"author":{"gitId":"ReubenChay"},"content":"This allows you to sort your clients in the address book based on a specified metric.","lastModifiedDate":"2022-10-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":292,"author":{"gitId":"ReubenChay"},"content":"Format: `sort KEYWORD`","lastModifiedDate":"2022-10-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":294,"author":{"gitId":"loyhongshenggg"},"content":"* Sorts the list of clients based on specified keyword","lastModifiedDate":"2022-09-23"},{"lineNumber":295,"author":{"gitId":"loyhongshenggg"},"content":"* Keyword must be from client details","lastModifiedDate":"2022-09-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":299,"author":{"gitId":"ReubenChay"},"content":"Sorting **KEYWORDS** are shown in the table below: ","lastModifiedDate":"2022-10-30"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":301,"author":{"gitId":"ReubenChay"},"content":"| KEYWORD          | Function                                                                                                             |","lastModifiedDate":"2022-10-30"},{"lineNumber":302,"author":{"gitId":"ReubenChay"},"content":"|:-----------------|:---------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-10-30"},{"lineNumber":303,"author":{"gitId":"ReubenChay"},"content":"| `default`        | Based on when a client was added, from oldest to newest                                                              |","lastModifiedDate":"2022-10-30"},{"lineNumber":304,"author":{"gitId":"ReubenChay"},"content":"| `name`           | By alphabetical order ie. \"a\" to \"z\"                                                                                 |","lastModifiedDate":"2022-10-30"},{"lineNumber":305,"author":{"gitId":"ReubenChay"},"content":"| `email`          | Clients using the same email platform are grouped together, thereafter, alphabetical order is used within each group |","lastModifiedDate":"2022-10-30"},{"lineNumber":306,"author":{"gitId":"ReubenChay"},"content":"| `phone`          | By numerical order of the phone number                                                                               |","lastModifiedDate":"2022-10-30"},{"lineNumber":307,"author":{"gitId":"ReubenChay"},"content":"| `birthday`       | From oldest to youngest   |                                                                                            ","lastModifiedDate":"2022-10-30"},{"lineNumber":308,"author":{"gitId":"ReubenChay"},"content":"| `income`         | From highest to lowest income |","lastModifiedDate":"2022-10-30"},{"lineNumber":309,"author":{"gitId":"ReubenChay"},"content":"| `risk appetite`  | From highest to lowest ie. \"H\" to \"M\" to \"L\" |","lastModifiedDate":"2022-10-30"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":312,"author":{"gitId":"loyhongshenggg"},"content":"Examples:","lastModifiedDate":"2022-09-23"},{"lineNumber":313,"author":{"gitId":"loyhongshenggg"},"content":"* `sort name` will display your address book in alphabetical order based on their name","lastModifiedDate":"2022-09-23"},{"lineNumber":314,"author":{"gitId":"loyhongshenggg"},"content":"* `sort phone` will display your addresss book in numerical order based on their phone numbers","lastModifiedDate":"2022-09-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":316,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":317,"author":{"gitId":"ReubenChay"},"content":"Below is an example of what you will expect to see when you call `sort email`:","lastModifiedDate":"2022-10-30"},{"lineNumber":318,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":319,"author":{"gitId":"ReubenChay"},"content":"![SortEmailExample](./images/SortEmailExample.png)","lastModifiedDate":"2022-10-31"},{"lineNumber":320,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":321,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":322,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":323,"author":{"gitId":"ReubenChay"},"content":"### Pin a Client: `pin`","lastModifiedDate":"2022-10-31"},{"lineNumber":324,"author":{"gitId":"loyhongshenggg"},"content":"* Format: `pin [CLIENT_INDEX]`","lastModifiedDate":"2022-10-26"},{"lineNumber":325,"author":{"gitId":"loyhongshenggg"},"content":"* Description: Allows pinning of important clients to be viewed separately with command `viewPin`","lastModifiedDate":"2022-10-26"},{"lineNumber":326,"author":{"gitId":"loyhongshenggg"},"content":"* Example Usage: `pin 1` pins the first client on list","lastModifiedDate":"2022-10-26"},{"lineNumber":327,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":328,"author":{"gitId":"ReubenChay"},"content":"### Assigning a Client to an Event/Policy ","lastModifiedDate":"2022-10-23"},{"lineNumber":329,"author":{"gitId":"ReubenChay"},"content":"An existing client in your Client Book can be assigned to an Event or Policy.\u003cbr\u003e","lastModifiedDate":"2022-10-23"},{"lineNumber":330,"author":{"gitId":"ReubenChay"},"content":"To find out how to do so, you can refer to the [Adding an Event](#adding-an-event--addevent) guide to assign a Client to an Event or refer to the [Assigning a Policy to a Client](#assigning-a-policy-to-a-client-assign) guide to find out how you can assign a Client to a Policy.","lastModifiedDate":"2022-10-31"},{"lineNumber":331,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":332,"author":{"gitId":"ReubenChay"},"content":"## Policy Features","lastModifiedDate":"2022-10-23"},{"lineNumber":333,"author":{"gitId":"Ssatu"},"content":"Store policies from a large assortment of companies, with different coverages and customised customisable commissions! Assign them to a client when you secure a deal with ease.","lastModifiedDate":"2022-10-26"},{"lineNumber":334,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":335,"author":{"gitId":"Ssatu"},"content":"### Adding a policy: `addPolicy`","lastModifiedDate":"2022-10-26"},{"lineNumber":336,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":337,"author":{"gitId":"Ssatu"},"content":"Adds a policy to the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":338,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":339,"author":{"gitId":"Ssatu"},"content":"Format: `addPolicy ti/TITLE cmp/COMPANY_CODE cms/Y1COMMISION% Y2COMISSION% Y3ONWARDS% [cov/COVERAGE]1...`","lastModifiedDate":"2022-10-26"},{"lineNumber":340,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":341,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":342,"author":{"gitId":"Ssatu"},"content":"A policy can one or more coverages (including 0).","lastModifiedDate":"2022-10-26"},{"lineNumber":343,"author":{"gitId":"Ssatu"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":344,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":345,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":346,"author":{"gitId":"Ssatu"},"content":"These are the valid coverages and their corresponding codes.","lastModifiedDate":"2022-10-26"},{"lineNumber":347,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":349,"author":{"gitId":"Ssatu"},"content":"| Coverage Code | Coverage Name        |","lastModifiedDate":"2022-10-26"},{"lineNumber":350,"author":{"gitId":"Ssatu"},"content":"|---------------|----------------------|","lastModifiedDate":"2022-10-26"},{"lineNumber":351,"author":{"gitId":"Ssatu"},"content":"| LIFE          | Life Insurance       |","lastModifiedDate":"2022-10-26"},{"lineNumber":352,"author":{"gitId":"Ssatu"},"content":"| MOTOR         | Motor Insurance      |","lastModifiedDate":"2022-10-26"},{"lineNumber":353,"author":{"gitId":"Ssatu"},"content":"| HEALTH        | Health Insurance     |","lastModifiedDate":"2022-10-26"},{"lineNumber":354,"author":{"gitId":"Ssatu"},"content":"| TRAVEL        | Travel Insurance     |","lastModifiedDate":"2022-10-26"},{"lineNumber":355,"author":{"gitId":"Ssatu"},"content":"| PROPERTY      | Property Insurance   |","lastModifiedDate":"2022-10-26"},{"lineNumber":356,"author":{"gitId":"Ssatu"},"content":"| MOBILE        | Mobile Insurance     |","lastModifiedDate":"2022-10-26"},{"lineNumber":357,"author":{"gitId":"Ssatu"},"content":"| BITE          | Bite-sized Insurance |","lastModifiedDate":"2022-10-26"},{"lineNumber":358,"author":{"gitId":"Ssatu"},"content":"| INVESTMENT    | Investment based     |","lastModifiedDate":"2022-10-26"},{"lineNumber":359,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":360,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":361,"author":{"gitId":"Ssatu"},"content":"These are the valid companies and their corresponding codes.","lastModifiedDate":"2022-10-26"},{"lineNumber":362,"author":{"gitId":"Ssatu"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":364,"author":{"gitId":"Ssatu"},"content":"| Company Code | Company Name                       |","lastModifiedDate":"2022-10-26"},{"lineNumber":365,"author":{"gitId":"Ssatu"},"content":"|--------------|------------------------------------|","lastModifiedDate":"2022-10-26"},{"lineNumber":366,"author":{"gitId":"Ssatu"},"content":"| MNF          | Manulife Financial Private Limited |","lastModifiedDate":"2022-10-26"},{"lineNumber":367,"author":{"gitId":"Ssatu"},"content":"| PRU          | Prudential Assurance Company       |","lastModifiedDate":"2022-10-26"},{"lineNumber":368,"author":{"gitId":"Ssatu"},"content":"| AXA          | AXA Insurance Private Limited      |","lastModifiedDate":"2022-10-26"},{"lineNumber":369,"author":{"gitId":"Ssatu"},"content":"| GEL          | Great Eastern Life                 |","lastModifiedDate":"2022-10-26"},{"lineNumber":370,"author":{"gitId":"Ssatu"},"content":"| NTU          | NTUC Income Insurance              |","lastModifiedDate":"2022-10-26"},{"lineNumber":371,"author":{"gitId":"Ssatu"},"content":"| ETQ          | Etiqa Insurance                    |","lastModifiedDate":"2022-10-26"},{"lineNumber":372,"author":{"gitId":"Ssatu"},"content":"| TML          | Tokio Marine Life Insurance        |","lastModifiedDate":"2022-10-26"},{"lineNumber":373,"author":{"gitId":"Ssatu"},"content":"| AIA          | AIA Singapore Private Limited      |","lastModifiedDate":"2022-10-26"},{"lineNumber":374,"author":{"gitId":"Ssatu"},"content":"| AVI          | Aviva Limited                      |","lastModifiedDate":"2022-10-26"},{"lineNumber":375,"author":{"gitId":"Ssatu"},"content":"| FWD          | Singapore Private Limited          |","lastModifiedDate":"2022-10-26"},{"lineNumber":376,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":377,"author":{"gitId":"Ssatu"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":378,"author":{"gitId":"Ssatu"},"content":"* `addPolicy ti/PruShield cmp/AIA cms/10% 5% 1% cov/LIFE`","lastModifiedDate":"2022-10-26"},{"lineNumber":379,"author":{"gitId":"Ssatu"},"content":"* `addPolicy ti/ManuInvest Duo cmp/MNF cms/6% 3% 1.5% cov/INVESTMENT cov/LIFE`","lastModifiedDate":"2022-10-26"},{"lineNumber":380,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":381,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":382,"author":{"gitId":"Ssatu"},"content":"### Switching to the view of currently listed policies: `policies`","lastModifiedDate":"2022-10-26"},{"lineNumber":383,"author":{"gitId":"Ssatu"},"content":"Switches the display to show the current list of policies.","lastModifiedDate":"2022-10-26"},{"lineNumber":384,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":385,"author":{"gitId":"Ssatu"},"content":"If you previously filtered the policy list and switched to view events/contacts/income, this command will allow you to return to the filtered list of policies. ","lastModifiedDate":"2022-10-26"},{"lineNumber":386,"author":{"gitId":"Ssatu"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":387,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":388,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":389,"author":{"gitId":"Ssatu"},"content":"If you wish to view the **full** list of policies, you may do so with the command `allPolicies` . ","lastModifiedDate":"2022-10-26"},{"lineNumber":390,"author":{"gitId":"Ssatu"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":391,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":392,"author":{"gitId":"Ssatu"},"content":"Format: `policies`","lastModifiedDate":"2022-10-26"},{"lineNumber":393,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":394,"author":{"gitId":"Ssatu"},"content":"Example Usage: `policies`","lastModifiedDate":"2022-10-26"},{"lineNumber":395,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":396,"author":{"gitId":"Ssatu"},"content":"Example Result: Shows the currently listed policies on the screen.","lastModifiedDate":"2022-10-26"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":398,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":399,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":400,"author":{"gitId":"Ssatu"},"content":"### Viewing all policies in the address book: `allPolicies`","lastModifiedDate":"2022-10-26"},{"lineNumber":401,"author":{"gitId":"Ssatu"},"content":"Switches the display to show **all** the policies stored in the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":402,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":403,"author":{"gitId":"Ssatu"},"content":"Format: `allPolicies`","lastModifiedDate":"2022-10-26"},{"lineNumber":404,"author":{"gitId":"Ssatu"},"content":"Example Usage: `allPolicies`","lastModifiedDate":"2022-10-26"},{"lineNumber":405,"author":{"gitId":"Ssatu"},"content":"Example Result: Shows all policies stored in the address book, on the screen.","lastModifiedDate":"2022-10-26"},{"lineNumber":406,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":407,"author":{"gitId":"ReubenChay"},"content":"### Deleting a policy","lastModifiedDate":"2022-10-23"},{"lineNumber":408,"author":{"gitId":"Ssatu"},"content":"* Format: `deletePolicy INDEX`","lastModifiedDate":"2022-10-26"},{"lineNumber":409,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":410,"author":{"gitId":"Ssatu"},"content":"* Deletes the policy at the specified `INDEX`.","lastModifiedDate":"2022-10-26"},{"lineNumber":411,"author":{"gitId":"Ssatu"},"content":"* The index refers to the index number shown in the displayed list of policies.","lastModifiedDate":"2022-10-26"},{"lineNumber":412,"author":{"gitId":"Ssatu"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-26"},{"lineNumber":413,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":414,"author":{"gitId":"Ssatu"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":415,"author":{"gitId":"Ssatu"},"content":"* `allPolicies` followed by `deletePolicy 2` deletes the 2nd policy in the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":416,"author":{"gitId":"Ssatu"},"content":"* `findPolicy PruShield` followed by `delete 1` deletes the 1st policy in the results of the `findPolicy` command.","lastModifiedDate":"2022-10-26"},{"lineNumber":417,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":418,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":419,"author":{"gitId":"ReubenChay"},"content":"### Searching for a Policy: `findPolicy`","lastModifiedDate":"2022-10-31"},{"lineNumber":420,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":421,"author":{"gitId":"marcusczh"},"content":"Search for policies based on certain metrics","lastModifiedDate":"2022-10-24"},{"lineNumber":422,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":423,"author":{"gitId":"marcusczh"},"content":"Format: `findPolicy [ti/TITLE] [cov/COVERAGE]…​ [cmp/COMPANY]`","lastModifiedDate":"2022-11-01"},{"lineNumber":424,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":425,"author":{"gitId":"marcusczh"},"content":"The following table illustrates the details of each metric and their search range:","lastModifiedDate":"2022-10-24"},{"lineNumber":426,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":427,"author":{"gitId":"marcusczh"},"content":"| Metric   | Prefix | Search range                                                                                                                                                                                                                                                                                |","lastModifiedDate":"2022-11-01"},{"lineNumber":428,"author":{"gitId":"marcusczh"},"content":"|----------|--------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-01"},{"lineNumber":429,"author":{"gitId":"marcusczh"},"content":"| Title    | ti/    | - The search is case insensitive. e.g `Health Plan` will match `health plan`\u003cbr/\u003e - Policies which titles contains at least one keyword will be listed                                                                                                                                      |","lastModifiedDate":"2022-11-01"},{"lineNumber":430,"author":{"gitId":"marcusczh"},"content":"| Coverage | cov/   | - More than one coverage can be specified to list all policies with all of the specified coverage types. \u003cbr/\u003e e.g. `HEALTH` and `LIFE` will list all policies with both the `HEALTH` and `LIFE` coverage type \u003cbr/\u003e - Policies which cover all the specified coverage types will be listed |","lastModifiedDate":"2022-11-01"},{"lineNumber":431,"author":{"gitId":"marcusczh"},"content":"| Company  | cmp/   | - Policies which belong to the specified company will be listed                                                                                                                                                                                                                             |","lastModifiedDate":"2022-11-01"},{"lineNumber":432,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":433,"author":{"gitId":"marcusczh"},"content":"Examples:","lastModifiedDate":"2022-10-24"},{"lineNumber":434,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":435,"author":{"gitId":"marcusczh"},"content":"* `findPolicy ti/Health plan` returns `health plan` and `life plan`","lastModifiedDate":"2022-10-24"},{"lineNumber":436,"author":{"gitId":"marcusczh"},"content":"* `findPolicy cov/LIFE cov/HEALTH` returns policies that cover both LIFE and HEALTH","lastModifiedDate":"2022-10-24"},{"lineNumber":437,"author":{"gitId":"marcusczh"},"content":"* `findPolicy cmp/PRU` returns policies that belong to Prudential Assurance Company","lastModifiedDate":"2022-10-24"},{"lineNumber":438,"author":{"gitId":"marcusczh"},"content":"* `findPolicy ti/Shield cov/LIFE` returns polices with Shield in its title and covers the LIFE coverage type","lastModifiedDate":"2022-10-24"},{"lineNumber":439,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":440,"author":{"gitId":"Ssatu"},"content":"### Assigning a Policy to a Client: `assign` ","lastModifiedDate":"2022-10-26"},{"lineNumber":441,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":442,"author":{"gitId":"ReubenChay"},"content":"If you have successfully sealed a deal with a client, you can keep track of this by assigning the policy to your client! ","lastModifiedDate":"2022-10-23"},{"lineNumber":443,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":444,"author":{"gitId":"cowlinn"},"content":"If you have yet to add either your Client or Policy to the Application, you can refer to the [Adding a Client](#adding-a-client-add) or [Adding a Policy](#adding-a-policy) guides.","lastModifiedDate":"2022-10-26"},{"lineNumber":445,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":446,"author":{"gitId":"loyhongshenggg"},"content":"Format: `assign INDEXOFCLIENT INDEXOFPOLICY pr/PREMIUM sd/STARTDATE ed/ENDDATE`","lastModifiedDate":"2022-10-28"},{"lineNumber":447,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":448,"author":{"gitId":"Ssatu"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":449,"author":{"gitId":"Ssatu"},"content":"The start and end dates should be of the format \"YYYY-MM-DD\", and within the years 1900 - 2100.","lastModifiedDate":"2022-10-26"},{"lineNumber":450,"author":{"gitId":"loyhongshenggg"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-28"},{"lineNumber":451,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":452,"author":{"gitId":"Ssatu"},"content":"Example Usage:","lastModifiedDate":"2022-10-26"},{"lineNumber":453,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":454,"author":{"gitId":"Ssatu"},"content":"* Step 1: `findPolicy cmp/PRU` to filter the list of policies that belong to Prudential Assurance Company.","lastModifiedDate":"2022-10-26"},{"lineNumber":455,"author":{"gitId":"Ssatu"},"content":"* Step 2: `findClient n/John Doe` to filter the list of clients to find \u0027John Doe\u0027.","lastModifiedDate":"2022-10-26"},{"lineNumber":456,"author":{"gitId":"Ssatu"},"content":"* Step 3: `assign 1 1 pr/2000 sd/2010-10-10 ed/2021-10-12` to assign the first policy in the list from Step 1, to the ","lastModifiedDate":"2022-10-26"},{"lineNumber":457,"author":{"gitId":"Ssatu"},"content":"first client in the list from Step 2, with the following details:","lastModifiedDate":"2022-10-26"},{"lineNumber":458,"author":{"gitId":"Ssatu"},"content":"  1. Yearly premium of $2000","lastModifiedDate":"2022-10-26"},{"lineNumber":459,"author":{"gitId":"Ssatu"},"content":"  2. Start date of 10th October 2010","lastModifiedDate":"2022-10-26"},{"lineNumber":460,"author":{"gitId":"Ssatu"},"content":"  3. End date of 12th October 2021","lastModifiedDate":"2022-10-26"},{"lineNumber":461,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":462,"author":{"gitId":"Ssatu"},"content":"### Listing out policies assigned to a client:`listAssigned`","lastModifiedDate":"2022-10-26"},{"lineNumber":463,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":464,"author":{"gitId":"Ssatu"},"content":"If you\u0027d like to recall which policies a client has taken up this command lists out, in the command box, the policies ","lastModifiedDate":"2022-10-26"},{"lineNumber":465,"author":{"gitId":"Ssatu"},"content":"that have been assigned to a specific client.","lastModifiedDate":"2022-10-26"},{"lineNumber":466,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":467,"author":{"gitId":"Ssatu"},"content":"Format: `listAssigned INDEXOFCLIENT`","lastModifiedDate":"2022-10-26"},{"lineNumber":468,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":469,"author":{"gitId":"Ssatu"},"content":"Example Usage:","lastModifiedDate":"2022-10-26"},{"lineNumber":470,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":471,"author":{"gitId":"Ssatu"},"content":"1. `findClient n/John Doe` to filter the list of clients to find `John Doe`.","lastModifiedDate":"2022-10-26"},{"lineNumber":472,"author":{"gitId":"Ssatu"},"content":"2. `listAssigned INDEXOFCLIENT` to list out the policies assigned to the first client in the list from Step 1.","lastModifiedDate":"2022-10-26"},{"lineNumber":473,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":474,"author":{"gitId":"Ssatu"},"content":"### Deleting assigned policies from a client: `deleteAssigned`","lastModifiedDate":"2022-10-26"},{"lineNumber":475,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":476,"author":{"gitId":"Ssatu"},"content":"Unfortunate, but it happens. If a client cancels their policy prematurely, reflect the deletion of their assigned policy","lastModifiedDate":"2022-10-26"},{"lineNumber":477,"author":{"gitId":"Ssatu"},"content":"in the address book using this command.","lastModifiedDate":"2022-10-26"},{"lineNumber":478,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":479,"author":{"gitId":"Ssatu"},"content":"Format: `deleteAssigned INDEXOFCLIENT INDEXOFASSIGNEDPOLICY`","lastModifiedDate":"2022-10-26"},{"lineNumber":480,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":481,"author":{"gitId":"Ssatu"},"content":"Example Usage:","lastModifiedDate":"2022-10-26"},{"lineNumber":482,"author":{"gitId":"Ssatu"},"content":"1. Similar to [listAssigned](#listing-out-policies-assigned-to-a-clientlistassigned), filter the list for the desired client and find out which policies they have been assigned to.","lastModifiedDate":"2022-10-26"},{"lineNumber":483,"author":{"gitId":"Ssatu"},"content":"2. `deleteAssigned 1 1` to delete the first assigned policy in the assigned policy list from Step 1, of the first client obtained from filtering the client list.","lastModifiedDate":"2022-10-26"},{"lineNumber":484,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":485,"author":{"gitId":"loyhongshenggg"},"content":"This allows you to sort your clients in the address book based on a specified metric.","lastModifiedDate":"2022-10-26"},{"lineNumber":486,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":487,"author":{"gitId":"loyhongshenggg"},"content":"### Tracking your Income  : `viewIncome`","lastModifiedDate":"2022-10-26"},{"lineNumber":488,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":489,"author":{"gitId":"loyhongshenggg"},"content":"Format: `viewIncome \u003cyear\u003e`","lastModifiedDate":"2022-10-26"},{"lineNumber":490,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":491,"author":{"gitId":"loyhongshenggg"},"content":"* Automatically calculates your 3 year expected income (with selected year as starting year)","lastModifiedDate":"2022-10-26"},{"lineNumber":492,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":493,"author":{"gitId":"loyhongshenggg"},"content":"Rules:","lastModifiedDate":"2022-10-26"},{"lineNumber":494,"author":{"gitId":"loyhongshenggg"},"content":"* Year must be between 1900 and 2200","lastModifiedDate":"2022-10-26"},{"lineNumber":495,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":496,"author":{"gitId":"loyhongshenggg"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":497,"author":{"gitId":"loyhongshenggg"},"content":"* `viewIncome 2000` will display the expected income for years 2000, 2001 and 2002","lastModifiedDate":"2022-10-26"},{"lineNumber":498,"author":{"gitId":"loyhongshenggg"},"content":"* `viewIncome 1899` will not be allowed since 1899 is not between 1900 and 2200","lastModifiedDate":"2022-10-26"},{"lineNumber":499,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":500,"author":{"gitId":"loyhongshenggg"},"content":"![result for \u0027viewIncome 2000\u0027](images/viewIncome.png)","lastModifiedDate":"2022-10-28"},{"lineNumber":501,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":502,"author":{"gitId":"loyhongshenggg"},"content":"(Result after typing the command `viewIncome 2000`, which displays three year expected income starting from year 2000)","lastModifiedDate":"2022-10-26"},{"lineNumber":503,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":504,"author":{"gitId":"ReubenChay"},"content":"## Event Features","lastModifiedDate":"2022-10-23"},{"lineNumber":505,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":506,"author":{"gitId":"loyhongshenggg"},"content":"### Adding an Event : `addEvent`","lastModifiedDate":"2022-10-28"},{"lineNumber":507,"author":{"gitId":"cowlinn"},"content":"* Format: `addEvent desc/EVENT_DESCRIPTION n/CLIENT_NAME date/EVENT_DATE st/START_TIME et/END_TIME`","lastModifiedDate":"2022-10-29"},{"lineNumber":508,"author":{"gitId":"loyhongshenggg"},"content":"* Description: Adds an event into the address book. Note the following restrictions","lastModifiedDate":"2022-10-28"},{"lineNumber":509,"author":{"gitId":"loyhongshenggg"},"content":"    * `START_TIME` must before `END_TIME`. All times are in the format: `HH:MM`.","lastModifiedDate":"2022-10-28"},{"lineNumber":510,"author":{"gitId":"loyhongshenggg"},"content":"    * `EVENT_DATE` follows a standard date format for our app (i.e: `YYYY-MM-DD`).","lastModifiedDate":"2022-10-28"},{"lineNumber":511,"author":{"gitId":"loyhongshenggg"},"content":"    * `CLIENT_NAME` indicates the name of a valid client within the address book. All Events must be tagged to a single client.","lastModifiedDate":"2022-10-28"},{"lineNumber":512,"author":{"gitId":"loyhongshenggg"},"content":"        * If you have not added this Client to your Client Book, you can refer to the [Adding a Client](#adding-a-client-add) guide to add your Client first.","lastModifiedDate":"2022-10-28"},{"lineNumber":513,"author":{"gitId":"loyhongshenggg"},"content":"* Example Usage: `addEvent desc/CS101 Consultation n/Ben Leong date/2023-01-01 st/12:00 et/13:00`","lastModifiedDate":"2022-10-28"},{"lineNumber":514,"author":{"gitId":"cowlinn"},"content":"* Example Result: add an event with `Ben Leong` from `12:00` to `13:00` for the `1st January 2023` for a CS101 consultation.","lastModifiedDate":"2022-10-29"},{"lineNumber":515,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":516,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":517,"author":{"gitId":"cowlinn"},"content":"Format: `deleteEvent INDEX`","lastModifiedDate":"2022-10-23"},{"lineNumber":518,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":519,"author":{"gitId":"cowlinn"},"content":"* Deletes the event at the specified `INDEX`.","lastModifiedDate":"2022-10-23"},{"lineNumber":520,"author":{"gitId":"cowlinn"},"content":"* The index refers to the index number shown in the displayed event list.","lastModifiedDate":"2022-10-23"},{"lineNumber":521,"author":{"gitId":"cowlinn"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-23"},{"lineNumber":522,"author":{"gitId":"cowlinn"},"content":"* Example Usage: `deleteEvent 2`","lastModifiedDate":"2022-10-23"},{"lineNumber":523,"author":{"gitId":"cowlinn"},"content":"* Example Result: deletes the 2nd event from the list.","lastModifiedDate":"2022-10-23"},{"lineNumber":524,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":525,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":526,"author":{"gitId":"cowlinn"},"content":"### Viewing all Events : `allEvents`","lastModifiedDate":"2022-10-26"},{"lineNumber":527,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":528,"author":{"gitId":"ReubenChay"},"content":"This allows you to view all Events that have been previously added.","lastModifiedDate":"2022-10-23"},{"lineNumber":529,"author":{"gitId":"cowlinn"},"content":"* Note that events are automatically sorted in chronological order.","lastModifiedDate":"2022-10-23"},{"lineNumber":530,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":531,"author":{"gitId":"cowlinn"},"content":"Format: `allEvents`","lastModifiedDate":"2022-10-26"},{"lineNumber":532,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":533,"author":{"gitId":"cowlinn"},"content":"![result for \u0027allEventsSample\u0027](images/allEventsSample.png)","lastModifiedDate":"2022-11-01"},{"lineNumber":534,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":535,"author":{"gitId":"marcusczh"},"content":"### Searching for an Event : `findEvent`","lastModifiedDate":"2022-10-27"},{"lineNumber":536,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":537,"author":{"gitId":"marcusczh"},"content":"Search for events based on certain metrics","lastModifiedDate":"2022-10-24"},{"lineNumber":538,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":539,"author":{"gitId":"marcusczh"},"content":"Format: `findEvent [desc/DESCRIPTION] [n/NAME] [date/DATE]`","lastModifiedDate":"2022-11-01"},{"lineNumber":540,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":541,"author":{"gitId":"marcusczh"},"content":"The following table illustrates the details of each metric and their search range:","lastModifiedDate":"2022-10-24"},{"lineNumber":542,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":543,"author":{"gitId":"marcusczh"},"content":"| Metric                                                                     | Prefix | Search range                                                                                                                                                                                                                                                                                                                                                                                        |","lastModifiedDate":"2022-11-01"},{"lineNumber":544,"author":{"gitId":"marcusczh"},"content":"|----------------------------------------------------------------------------|--------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-01"},{"lineNumber":545,"author":{"gitId":"marcusczh"},"content":"| Description                                                                | desc/  | - The search is case-insensitive. e.g `Meeting to discuss plans` will match `meeting to discuss plans`\u003cbr/\u003e - Only full phrases will be matched e.g. `Meeting to discuss plans` will not match `Plans`\u003cbr/\u003e - Only events for which description contains the complete specified phrase will be listed. \u003cbr/\u003e e.g. `discuss plans` will return `Meeting to discuss plans` and `Discuss plans`        |","lastModifiedDate":"2022-11-01"},{"lineNumber":546,"author":{"gitId":"marcusczh"},"content":"| Name\u003cbr/\u003e\u003cbr/\u003e Note: Name here refers to the name of the event participant | n/     | - The search is case-insensitive. e.g `John` will match `john`\u003cbr/\u003e - The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`\u003cbr/\u003e - Only full words will be matched e.g. `Han` will not match `Hans`\u003cbr/\u003e - Events with the participant name contains at least one keyword will be listed. \u003cbr/\u003e e.g. `Hans Bo` will return events which involve `Hans Gruber` or `Bo Yang` |","lastModifiedDate":"2022-11-01"},{"lineNumber":547,"author":{"gitId":"marcusczh"},"content":"| Date                                                                       | date/  | - Only events which occur on the specified date will be listed                                                                                                                                                                                                                                                                                                                                      |","lastModifiedDate":"2022-11-01"},{"lineNumber":548,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":549,"author":{"gitId":"marcusczh"},"content":"Examples:","lastModifiedDate":"2022-10-24"},{"lineNumber":550,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":551,"author":{"gitId":"marcusczh"},"content":"* `findEvent desc/coffee break meeting` returns events `morning coffee break meeting` and `afternoon coffee break meeting`","lastModifiedDate":"2022-10-24"},{"lineNumber":552,"author":{"gitId":"marcusczh"},"content":"* `findEvent n/Bernice` returns all events for which participant name contains `Bernice`","lastModifiedDate":"2022-10-24"},{"lineNumber":553,"author":{"gitId":"marcusczh"},"content":"* `findEvent date/2022-12-30` returns all events which occurs on `30th December 2022`","lastModifiedDate":"2022-10-24"},{"lineNumber":554,"author":{"gitId":"marcusczh"},"content":"* `findEvent n/Alice date/2022-11-15` returns all events for which participant name contains `Alice` and occurs on `15th November 2022`","lastModifiedDate":"2022-10-24"},{"lineNumber":555,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":556,"author":{"gitId":"ReubenChay"},"content":"### Viewing all Events in the next 7 days : `calendar`","lastModifiedDate":"2022-10-23"},{"lineNumber":557,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":558,"author":{"gitId":"ReubenChay"},"content":"This allows you to view all Events that you have in the next 7 days, allowing you to keep track of any upcoming important appointments you have scheduled. ","lastModifiedDate":"2022-10-23"},{"lineNumber":559,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":560,"author":{"gitId":"ReubenChay"},"content":"Format: `calendar`","lastModifiedDate":"2022-10-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"loyhongshenggg"},"content":"Q: How do I transfer my data to another Computer? \u003cbr\u003e","lastModifiedDate":"2022-10-30"},{"lineNumber":565,"author":{"gitId":"loyhongshenggg"},"content":"A : Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous LTNS home folder.","lastModifiedDate":"2022-10-30"},{"lineNumber":566,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":567,"author":{"gitId":"loyhongshenggg"},"content":"Q: Why am I seeing `(insert error)` when trying to add an event?\u003cbr\u003e","lastModifiedDate":"2022-10-30"},{"lineNumber":568,"author":{"gitId":"loyhongshenggg"},"content":"A : When adding an Event involving a client, this client must exist in your client book first.","lastModifiedDate":"2022-10-30"},{"lineNumber":569,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":570,"author":{"gitId":"loyhongshenggg"},"content":"Q: Why am I seeing a `Sorting metric does not exist` error when trying to sort my client list? \u003cbr\u003e","lastModifiedDate":"2022-10-30"},{"lineNumber":571,"author":{"gitId":"loyhongshenggg"},"content":"A : You may be typing a wrong \u003cb\u003ekeyword\u003c/b\u003e or calling a sorting metric which is not supported. You may refer to [this list](#sorting-all-clients--sort) for a list of supported **keywords**. If you would like to suggest more sorting **keywords**, do feel free to contact us! ","lastModifiedDate":"2022-10-30"},{"lineNumber":572,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":573,"author":{"gitId":"loyhongshenggg"},"content":"Q: Why is a blank screen shown when I use the `calendar` feature? \u003cbr\u003e","lastModifiedDate":"2022-10-30"},{"lineNumber":574,"author":{"gitId":"ReubenChay"},"content":"A: You may not have added any upcoming events in the next 7 days! You may want to [Add an Event](#adding-an-event--addevent) first. Alternatively, you can choose to [view all Events](#viewing-all-events--allevents) instead.","lastModifiedDate":"2022-10-31"},{"lineNumber":575,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":576,"author":{"gitId":"loyhongshenggg"},"content":"Q: What do I do if the user guide does not address my concern? \u003cbr\u003e","lastModifiedDate":"2022-10-30"},{"lineNumber":577,"author":{"gitId":"loyhongshenggg"},"content":"A: Fret not! Simply drop us an email at e0725346@u.nus.edu, and we will reply within three working days!","lastModifiedDate":"2022-10-30"},{"lineNumber":578,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":580,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"marcusczh"},"content":"### Command format table","lastModifiedDate":"2022-11-01"},{"lineNumber":585,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":586,"author":{"gitId":"marcusczh"},"content":"| Parameter Name                                               | Prefix | Constraints                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |","lastModifiedDate":"2022-11-01"},{"lineNumber":587,"author":{"gitId":"marcusczh"},"content":"|--------------------------------------------------------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-01"},{"lineNumber":588,"author":{"gitId":"marcusczh"},"content":"| Name                                                         | n/     | - Only alphanumeric characters and spaces can be specified, and it should not be blank\u003cbr/\u003e - Only a maximum of 100 characters is allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":589,"author":{"gitId":"marcusczh"},"content":"| Phone                                                        | p/     | - Only numbers are allowed\u003cbr/\u003ee.g `3.3` is not valid\u003cbr/\u003e - At least 3 numbers have to be specified\u003cbr/\u003e - Only a maximum of 25 digits is allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":590,"author":{"gitId":"marcusczh"},"content":"| Email                                                        | e/     | \u003c!--- Emails should be of the format `local-part@domain`\u003cbr/\u003e - The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses, (+_.-)\u003cbr/\u003e - The local-part cannot start or end with any special characters\u003cbr/\u003e - The domain name is made up of domain labels separated by periods\u003cbr/\u003e - The domain name must end with a domain label at least 2 characters long, have each domain label start and end with alphanumeric characters and have each domain label consist of alphanumeric characters, separated only by hyphens, if any --\u003e - Only valid emails are allowed\u003cbr/\u003e e.g `Alice` is not valid while `Alice@email.com` is valid |","lastModifiedDate":"2022-11-01"},{"lineNumber":591,"author":{"gitId":"marcusczh"},"content":"| Address                                                      | a/     | - Any length of textual input except for an empty space is valid|","lastModifiedDate":"2022-11-01"},{"lineNumber":592,"author":{"gitId":"marcusczh"},"content":"| Tag                                                          | t/     | - Only single word, alphanumeric inputs are allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":593,"author":{"gitId":"marcusczh"},"content":"| Birthday                                                     | b/     | - Only valid date inputs of the YYYY-MM-DD format are allowed. e.g `1990-12-30`\u003cbr/\u003e - Birthdays cannot be set in the future or before the 20th century (i.e|","lastModifiedDate":"2022-11-01"},{"lineNumber":594,"author":{"gitId":"marcusczh"},"content":"| Income                                                       | i/     | - Only positive decimal numbers are allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":595,"author":{"gitId":"marcusczh"},"content":"| Risk Appetite                                                | ra/    | - Only one of the 3 levels, {H, M, L}, is allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":596,"author":{"gitId":"marcusczh"},"content":"| Title                                                        | ti/    | - Only alphanumeric characters and spaces can be specified, and it should not be blank\u003cbr/\u003e - Only a maximum of 40 characters is allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":597,"author":{"gitId":"marcusczh"},"content":"| Coverage                                                     | cov/   | - Only inputs of the valid coverage type options are allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":598,"author":{"gitId":"marcusczh"},"content":"| Company                                                      | cmp/   | - Only one of the valid company abbreviations is allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":599,"author":{"gitId":"marcusczh"},"content":"| Commission                                                   | cms/   | - Has to be in the format of (1st year percentage)% (2nd year percentage)% (3rd year and beyond percentage)%, where the percentages are decimal values between 0 and 100 inclusive                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |","lastModifiedDate":"2022-11-01"},{"lineNumber":600,"author":{"gitId":"marcusczh"},"content":"| Premium                                                      | pr/    | - Only positive decimal numbers are allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":601,"author":{"gitId":"marcusczh"},"content":"| Start date                                                   | sd/    | - Only valid date inputs of the YYYY-MM-DD format are allowed. e.g `2020-12-30`\u003cbr/\u003e - Only dates that fall between the 20th and 21th century are allowed (i.e between the years 1900 and 2100)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |","lastModifiedDate":"2022-11-01"},{"lineNumber":602,"author":{"gitId":"marcusczh"},"content":"| End date\u003cbr/\u003e\u003cbr/\u003e Note: End date has to be after Start date | ed/    | - Only valid date inputs of the YYYY-MM-DD format are allowed. e.g `2020-12-30`\u003cbr/\u003e - Only dates that fall between the 20th and 21th century are allowed (i.e between the years 1900 and 2100)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |","lastModifiedDate":"2022-11-01"},{"lineNumber":603,"author":{"gitId":"marcusczh"},"content":"| Event Description                                            | desc/  | - Only alphanumeric characters and spaces can be specified, and it should not be blank\u003cbr/\u003e - Only a maximum of 175 characters is allowed|","lastModifiedDate":"2022-11-01"},{"lineNumber":604,"author":{"gitId":"marcusczh"},"content":"| Event Date                                                   | date/  | - Only valid date inputs of the YYYY-MM-DD format are allowed. e.g `2020-12-30`\u003cbr/\u003e - Only dates that fall between the 20th and 21th century are allowed (i.e between the years 1900 and 2100)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |","lastModifiedDate":"2022-11-01"},{"lineNumber":605,"author":{"gitId":"marcusczh"},"content":"| Start time                                                   | st/    | - Only valid time inputs of the HH:mm format are allowed. e.g `23:59`|","lastModifiedDate":"2022-11-01"},{"lineNumber":606,"author":{"gitId":"marcusczh"},"content":"| End time\u003cbr/\u003e\u003cbr/\u003e Note: End time has to be after Start time | et/    | - Only valid time inputs of the HH:mm format are allowed. e.g `23:59`|","lastModifiedDate":"2022-11-01"},{"lineNumber":607,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":608,"author":{"gitId":"loyhongshenggg"},"content":"### General Commands","lastModifiedDate":"2022-10-30"},{"lineNumber":609,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":610,"author":{"gitId":"ReubenChay"},"content":"| Action                      | Format, Examples                                                                                                                                                                                              |","lastModifiedDate":"2022-10-23"},{"lineNumber":611,"author":{"gitId":"loyhongshenggg"},"content":"|-----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-10-28"},{"lineNumber":612,"author":{"gitId":"loyhongshenggg"},"content":"| **Clear Pre-existing Data** | `clear`                                                                                                                                                                                                       |                                                                                                                                                                                                      ","lastModifiedDate":"2022-11-01"},{"lineNumber":613,"author":{"gitId":"ReubenChay"},"content":"| **Help**                    | `help`                                                                                                                                                                                                        |","lastModifiedDate":"2022-10-23"},{"lineNumber":614,"author":{"gitId":"loyhongshenggg"},"content":"| **Exit Application**        | `exit`                                                                                                                                                                                                        |","lastModifiedDate":"2022-11-01"},{"lineNumber":615,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":616,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":617,"author":{"gitId":"loyhongshenggg"},"content":"### Commands For Clients","lastModifiedDate":"2022-10-30"},{"lineNumber":618,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":619,"author":{"gitId":"loyhongshenggg"},"content":"| Action                    | Format, Examples                                                                                                                                                                                           |","lastModifiedDate":"2022-10-28"},{"lineNumber":620,"author":{"gitId":"loyhongshenggg"},"content":"|---------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-01"},{"lineNumber":621,"author":{"gitId":"loyhongshenggg"},"content":"| **Find Client**           | `findClient [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]… [b/BIRTHDAY] [i/INCOME] [ra/RISK_APPETITE] [ti/POLICY_TITLE] [cov/POLICY_COVERAGE]…​ [cmp/POLICY_COMPANY]` \u003cbr\u003e e.g: `find n/Jim p/98765432` |","lastModifiedDate":"2022-10-30"},{"lineNumber":622,"author":{"gitId":"loyhongshenggg"},"content":"| **Add Client**            | `addClient [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`  \u003cbr\u003e e.g: `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`                        |","lastModifiedDate":"2022-10-30"},{"lineNumber":623,"author":{"gitId":"loyhongshenggg"},"content":"| **Delete Client**         | `deleteClient [INDEX]` \u003cbr\u003e e.g: `delete 3`                                                                                                                                                                |","lastModifiedDate":"2022-10-30"},{"lineNumber":624,"author":{"gitId":"loyhongshenggg"},"content":"| **Edit Client**           | `editClient [INDEX] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` \u003cbr\u003e e.g: `edit 2 n/James Lee e/jameslee@example.com`                                                                       |","lastModifiedDate":"2022-10-30"},{"lineNumber":625,"author":{"gitId":"loyhongshenggg"},"content":"| **View All Clients**      | `allClients`                                                                                                                                                                                               |","lastModifiedDate":"2022-11-01"},{"lineNumber":626,"author":{"gitId":"loyhongshenggg"},"content":"| **View Filtered Clients** | `clients`                                                                                                                                                                                                  |                                                              ","lastModifiedDate":"2022-10-30"},{"lineNumber":627,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":628,"author":{"gitId":"loyhongshenggg"},"content":"Note: `allClients` shows all existing clients inside LTNS, while `clients` show all clients based on filter matrices placed previously.","lastModifiedDate":"2022-10-28"},{"lineNumber":629,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":630,"author":{"gitId":"loyhongshenggg"},"content":"### Commands For Policy","lastModifiedDate":"2022-10-30"},{"lineNumber":631,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":632,"author":{"gitId":"loyhongshenggg"},"content":"| Action                     | Format, Examples                                                                                                                                                |","lastModifiedDate":"2022-10-28"},{"lineNumber":633,"author":{"gitId":"loyhongshenggg"},"content":"|----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-10-28"},{"lineNumber":634,"author":{"gitId":"loyhongshenggg"},"content":"| **Find Policy**            | `findPolicy [ti/POLICY_TITLE] [cov/POLICY_COVERAGE] [cmp/POLICY_COMPANY]` \u003cbr/\u003e e.g: `findPolicy cov/LIFE`                                                      |        ","lastModifiedDate":"2022-10-30"},{"lineNumber":635,"author":{"gitId":"loyhongshenggg"},"content":"| **Add Policy**             | `addPolicy [ti/POLICY_TITLE] [cmp/POLICY_COMPANY] [cms/POLICY_COMMISSION] [cov/POLICY_COVERAGE]` \u003cbr\u003e e.g: `addPolicy ti/Health cmp/MNF cms/4% 3% 2% cov/LIFE`  |                                                                                                                         ","lastModifiedDate":"2022-10-30"},{"lineNumber":636,"author":{"gitId":"loyhongshenggg"},"content":"| **Delete Policy**          | `deletePolicy [INDEX of POLICY]` \u003cbr\u003e e.g: `deletePolicy 1`                                                                                                     |                                                                                                                                                                                             ","lastModifiedDate":"2022-10-30"},{"lineNumber":637,"author":{"gitId":"loyhongshenggg"},"content":"| **View All Policies**      | `allPolicies`                                                                                                                                                   |","lastModifiedDate":"2022-11-01"},{"lineNumber":638,"author":{"gitId":"loyhongshenggg"},"content":"| **View Filtered Policies** | `policies`                                                                                                                                                      |","lastModifiedDate":"2022-11-01"},{"lineNumber":639,"author":{"gitId":"loyhongshenggg"},"content":"| **View Assigned Policies** | `assign [INDEX of CONTACT] [INDEX of POLICY] [pr/PREMIUM_PAID] [sd/START_DATE] [ed/END_DATE]` \u003cbr\u003e e.g: `assignPolicy 1 1 pr/10000 sd/2000-01-02 ed/2000-02-01` |","lastModifiedDate":"2022-11-01"},{"lineNumber":640,"author":{"gitId":"loyhongshenggg"},"content":"| **Delete Assigned**        | `deleteAssigned [INDEX of CONTACT] [INDEX of POLICY]` \u003cbr\u003e e.g: `deleteAssigned 1 1`                                                                            |                                                                                                                                                                                                               ","lastModifiedDate":"2022-10-30"},{"lineNumber":641,"author":{"gitId":"loyhongshenggg"},"content":"| **List Assigned**          | `listAssigned`                                                                                                                                                  |","lastModifiedDate":"2022-10-26"},{"lineNumber":642,"author":{"gitId":"loyhongshenggg"},"content":"| **View Income**            | `viewIncome [YEAR]`                                                                                                                                             |                                                                                                                                                                                                                                                                                                                                                                           ","lastModifiedDate":"2022-10-30"},{"lineNumber":643,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":644,"author":{"gitId":"loyhongshenggg"},"content":"Note: `allPolicies` shows all existing policies inside LTNS, while `policies` show all policies based on filter matrices placed previously.","lastModifiedDate":"2022-11-01"},{"lineNumber":645,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":646,"author":{"gitId":"loyhongshenggg"},"content":"### Commands For Events","lastModifiedDate":"2022-10-30"},{"lineNumber":647,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":648,"author":{"gitId":"loyhongshenggg"},"content":"| Action                   | Format, Examples                                                                                                                                                                |","lastModifiedDate":"2022-10-28"},{"lineNumber":649,"author":{"gitId":"loyhongshenggg"},"content":"|--------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-01"},{"lineNumber":650,"author":{"gitId":"marcusczh"},"content":"| **Find Event**           | `findEvent [desc/DESCRIPTION] [n/PERSON_NAME] [date/DATE]` \u003cbr/\u003e e.g: `findEvent date/2022-05-05`                                                                               |","lastModifiedDate":"2022-10-24"},{"lineNumber":651,"author":{"gitId":"loyhongshenggg"},"content":"| **Add Event**            | `addEvent [desc/DESCRIPTION] [n/NAME] [date/DATE] [st/START_TIME] [et/END_TIME]` \u003cbr\u003e e.g: `addEvent desc/Meet Clement at Noon n/Clement Tan date/2022-10-10 st/12:00 et/13:00` |","lastModifiedDate":"2022-10-30"},{"lineNumber":652,"author":{"gitId":"loyhongshenggg"},"content":"| **Delete Event**         | `deleteEvent [INDEX]` \u003cbr\u003e e.g: `deleteEvent 1`                                                                                                                                 |","lastModifiedDate":"2022-10-30"},{"lineNumber":653,"author":{"gitId":"loyhongshenggg"},"content":"| **View All Events**      | `allEvents`                                                                                                                                                                     |","lastModifiedDate":"2022-11-01"},{"lineNumber":654,"author":{"gitId":"loyhongshenggg"},"content":"| **View Filtered Events** | `events`                                                                                                                                                                        |","lastModifiedDate":"2022-11-01"},{"lineNumber":655,"author":{"gitId":"loyhongshenggg"},"content":"| **View Calendar**        | `calendar`                                                                                                                                                                      |                                                                                                                                                                                                     ","lastModifiedDate":"2022-11-01"},{"lineNumber":656,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":657,"author":{"gitId":"loyhongshenggg"},"content":"Note: `allEvents` shows all existing events inside LTNS, while `events` show all events based on filter matrices placed previously.","lastModifiedDate":"2022-11-01"},{"lineNumber":658,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":659,"author":{"gitId":"loyhongshenggg"},"content":"### Miscellaneous Commands","lastModifiedDate":"2022-10-30"},{"lineNumber":660,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":661,"author":{"gitId":"loyhongshenggg"},"content":"| Action          | Format, Examples                                     |","lastModifiedDate":"2022-10-26"},{"lineNumber":662,"author":{"gitId":"loyhongshenggg"},"content":"|-----------------|------------------------------------------------------|","lastModifiedDate":"2022-10-30"},{"lineNumber":663,"author":{"gitId":"loyhongshenggg"},"content":"| **Sort**        | `sort [COMPARABLE_METRIC]` \u003cbr\u003e e.g: `sort AGE`      |","lastModifiedDate":"2022-10-30"},{"lineNumber":664,"author":{"gitId":"loyhongshenggg"},"content":"| **Pin**         | `pin [n/NAME]` \u003cbr\u003e e.g: `pin n/Jim`                 |","lastModifiedDate":"2022-10-26"},{"lineNumber":665,"author":{"gitId":"loyhongshenggg"},"content":"| **View Pinned** | `viewPin` \u003cbr\u003e e.g: `viewPin`                        |","lastModifiedDate":"2022-10-26"},{"lineNumber":666,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":667,"author":{"gitId":"loyhongshenggg"},"content":"## Glossary ","lastModifiedDate":"2022-11-01"},{"lineNumber":668,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":669,"author":{"gitId":"loyhongshenggg"},"content":"### Parameter","lastModifiedDate":"2022-11-01"},{"lineNumber":670,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":671,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":672,"author":{"gitId":"ReubenChay"},"content":"#### Policy","lastModifiedDate":"2022-10-31"},{"lineNumber":673,"author":{"gitId":"ReubenChay"},"content":"An insurance or investment package entailing the details of the insurance and/or investment","lastModifiedDate":"2022-10-31"},{"lineNumber":674,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":675,"author":{"gitId":"ReubenChay"},"content":"#### Coverage ","lastModifiedDate":"2022-10-31"},{"lineNumber":676,"author":{"gitId":"ReubenChay"},"content":"Specific to an insurance policy, coverage describes the amount of risk or liability which is covered by the insurance policy","lastModifiedDate":"2022-10-31"},{"lineNumber":677,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":678,"author":{"gitId":"ReubenChay"},"content":"#### Graphic User Interface (GUI)","lastModifiedDate":"2022-10-31"},{"lineNumber":679,"author":{"gitId":"ReubenChay"},"content":"A User Interface that allows users to interact with the application through visual components","lastModifiedDate":"2022-10-31"},{"lineNumber":680,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":681,"author":{"gitId":"ReubenChay"},"content":"#### Command-Line Interface (CLI)","lastModifiedDate":"2022-10-31"},{"lineNumber":682,"author":{"gitId":"ReubenChay"},"content":"A Text-Based User Interface which allows you to use the application in the form of typing out \"commands\"","lastModifiedDate":"2022-10-31"},{"lineNumber":683,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":684,"author":{"gitId":"ReubenChay"},"content":"#### JSON File ","lastModifiedDate":"2022-10-31"},{"lineNumber":685,"author":{"gitId":"ReubenChay"},"content":"A file which is used to store data in text form. ","lastModifiedDate":"2022-10-31"},{"lineNumber":686,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":687,"author":{"gitId":"ReubenChay"},"content":"#### Metric ","lastModifiedDate":"2022-10-31"},{"lineNumber":688,"author":{"gitId":"ReubenChay"},"content":"A standard of measurement. In the case of LTNS, a metric in sorting or searching tells the application how to compare the clients","lastModifiedDate":"2022-10-31"},{"lineNumber":689,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":690,"author":{"gitId":"ReubenChay"},"content":"#### Income Bracket","lastModifiedDate":"2022-10-31"},{"lineNumber":691,"author":{"gitId":"ReubenChay"},"content":"Various income level ranges categorised by levels. LTNS uses the Inland Revenue Authority of Singapore\u0027s (IRAS) measurement of an income bracket.","lastModifiedDate":"2022-10-31"},{"lineNumber":692,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":693,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":694,"author":{"gitId":"loyhongshenggg"},"content":"\u003cbr\u003e    ","lastModifiedDate":"2022-10-26"},{"lineNumber":695,"author":{"gitId":"loyhongshenggg"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":696,"author":{"gitId":"loyhongshenggg"},"content":"\u003cbr\u003e","lastModifiedDate":"2022-10-26"}],"authorContributionMap":{"ReubenChay":166,"loyhongshenggg":146,"Ssatu":108,"cowlinn":70,"-":122,"marcusczh":84}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"loyhongshenggg"},"content":"    content: \"LTNS\";","lastModifiedDate":"2022-09-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"loyhongshenggg":1,"-":294}},{"path":"docs/diagrams/AddEventActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"start","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":":User executes AddEventCommand;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"if () then","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"    :Throw InvalidCommandException;","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"else ([ValidSyntax])","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"if () then","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"    : Throw InvalidPersonException;","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"else ([Person Name exists in AB])","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"    if () then","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"    : Throw OverlapEventException;","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"    else ([Event doesn\u0027t overlap])","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"    : ModeManager adds event to AB;","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    : UniqueEventList is updated;","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"    endif","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"    endif","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"endif","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"stop","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"cowlinn":23}},{"path":"docs/diagrams/AssignPolicySequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"@startuml","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"!include style.puml","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"participant \"PolicyAssignCommandParser\" as PolicyAssignCommandParser LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"participant \"pac:PolicyAssignCommand\" as PolicyAssignCommand LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"participant \"CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"end box","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"participant \"personToAdd:Person\" as Person MODEL_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"end box","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"[-\u003e LogicManager : execute(assign 1 1 \\npr/200 sd/2020-10-12 \\ned/2022-10-12)","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"activate LogicManager","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(assign 1 1 \\npr/200 sd/2020-10-12 \\ned/2022-10-12)","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"create PolicyAssignCommandParser","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"AddressBookParser -\u003e PolicyAssignCommandParser :","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"activate PolicyAssignCommandParser","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommandParser --\u003e AddressBookParser","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"deactivate PolicyAssignCommandParser","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"AddressBookParser --\u003e PolicyAssignCommandParser: parse(assign 1 1 \\npr/200 sd/2020-10-12 \\ned/2022-10-12)","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"activate PolicyAssignCommandParser","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"create PolicyAssignCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommandParser -\u003e PolicyAssignCommand :","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"activate PolicyAssignCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand --\u003e PolicyAssignCommandParser : pac","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"deactivate PolicyAssignCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommandParser --\u003e AddressBookParser :pac","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"destroy PolicyAssignCommandParser","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"AddressBookParser --\u003e LogicManager : pac","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"LogicManager -\u003e PolicyAssignCommand : execute(model)","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"activate PolicyAssignCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"activate Model","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"Model --\u003e PolicyAssignCommand : lastShownPersonList","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand -\u003e Model : get(0)","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"Model --\u003e PolicyAssignCommand: personToAdd","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"deactivate Model","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand -\u003e Model : getFilteredPolicyList()","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"activate Model","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"Model --\u003e PolicyAssignCommand : lastShownPolicyList","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand -\u003e Model : get(0)","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"Model --\u003e PolicyAssignCommand: policyToAdd","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"deactivate Model","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand -\u003e Person:addPolicy(new AssignedPolicy \\npolicyToAdd, 200, 2020-10-12 \\n2022-10-12 )","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"activate Person","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"Person --\u003e PolicyAssignCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"deactivate Person","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"create CommandResult","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand -\u003e CommandResult","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"activate CommandResult","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"CommandResult --\u003e PolicyAssignCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"deactivate CommandResult","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"deactivate PolicyAssignCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"PolicyAssignCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-21"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"@enduml","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"Ssatu":86}},{"path":"docs/diagrams/FindActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"start","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":":User executes command;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":":AddressBookParser parses command;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"if () then ([command is valid])","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"    :FindXYZCommandParser parses command;","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"    if () then ([command is valid])","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"        :FindXYZCommand executes command;","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"        :Model updates the list of clients;","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    else ([else])","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"    endif","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"else ([else])","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"endif","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"stop","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"cowlinn":1,"marcusczh":17}},{"path":"docs/diagrams/FindSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"!include style.puml","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"participant \":FindXYZCommandParser\" as FindXYZCommandParser LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"participant \"find:FindXYZCommand\" as FindXYZCommand LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"end box","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"participant \"model:Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"end box","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"[-\u003e LogicManager : execute(find metrics)","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"activate LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(find metrics)","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"create FindXYZCommandParser","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"AddressBookParser -\u003e FindXYZCommandParser","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"activate FindXYZCommandParser","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"FindXYZCommandParser --\u003e AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"deactivate FindXYZCommandParser","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"AddressBookParser -\u003e FindXYZCommandParser : parse(metrics)","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"activate FindXYZCommandParser","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"create FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"FindXYZCommandParser -\u003e FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"activate FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"FindXYZCommand --\u003e FindXYZCommandParser : find","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"deactivate FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"FindXYZCommandParser --\u003e AddressBookParser : find","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"deactivate FindXYZCommandParser","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"FindXYZCommandParser -[hidden]-\u003e AddressBookParser : result","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"destroy FindXYZCommandParser","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"AddressBookParser --\u003e LogicManager : find","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"LogicManager -\u003e FindXYZCommand : execute(model)","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"activate FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"FindXYZCommand -\u003e Model : updateFilteredPersonList(finalPredicates)","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"activate Model","lastModifiedDate":"2022-10-20"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"note right","lastModifiedDate":"2022-10-20"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"finalPredicate refers to the combined","lastModifiedDate":"2022-10-20"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"predicates of those created by","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"end note","lastModifiedDate":"2022-10-20"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"Model --\u003e FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"deactivate Model","lastModifiedDate":"2022-10-20"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"FindXYZCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-20"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"deactivate FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"FindXYZCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2022-10-20"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"destroy FindXYZCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"marcusczh":69}},{"path":"docs/diagrams/ModelEventClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"!include style.puml","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"ModelManager --\u003e \"1\" AddressBook","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"AddressBook *-right-\u003e \"1\" UniqueEventList","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"ModelManager -down-\u003e\"~* filtered\" Event","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"UniqueEventList -right-\u003e Event","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"Event *--\u003e Description","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"Event *--\u003e PersonName","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"Event *--\u003e Duration","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"Event *--\u003e Date","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"cowlinn":18}},{"path":"docs/diagrams/ModelPolicyClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"!include style.puml","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"Class UniquePolicyList","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"Class Policy","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"Class Commission","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"Class Company","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"Class Coverage","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"Class Title","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"Class AddressBook","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"Class ModelManager","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"ModelManager --\u003e \"1\" AddressBook","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"AddressBook *-right-\u003e \"1\" UniquePolicyList","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"ModelManager -down-\u003e \"~* filtered\" Policy","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"UniquePolicyList -right-\u003e \"~* all\" Policy","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"Policy *--\u003e \"1..*\" Coverage","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"Policy *--\u003e Company","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"Policy *--\u003e Commission","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"Policy *--\u003e Title","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"Commission -[hidden]right-\u003e Company","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"Commission -[hidden]right-\u003e Coverage","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"marcusczh":30}},{"path":"docs/diagrams/PinActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"start","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":":User executes command;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":":Pinned attribute of selected Client gets set to true/false;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"stop","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":10}},{"path":"docs/diagrams/PinSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"!include style.puml","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"participant \"p:PinCommand\" as PinCommand LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"end box","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"participant \"personToPin:Person\" as Person MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"end box","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"[-\u003e LogicManager : execute(pin)","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"activate LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(pin)","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"create PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"AddressBookParser -\u003e PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"activate PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"PinCommand --\u003e AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"deactivate PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"AddressBookParser --\u003e LogicManager : p","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"LogicManager -\u003e PinCommand : execute()","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"activate PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"PinCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"activate Model","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"Model --\u003e PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"loyhongshenggg"},"content":"deactivate Model","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"PinCommand -\u003e Person:setPin(!personToPin.getPin())","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"activate Person","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"Person --\u003e PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"deactivate Person","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"PinCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"deactivate PinCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"PinCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"loyhongshenggg"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"loyhongshenggg"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"loyhongshenggg"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":51}},{"path":"docs/diagrams/SortActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"start","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":":User executes sort command;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"if () then ([sorting metric valid])","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"    :Corresponding comparator passed to AddressBook;","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"    :AddressBook sorted based on comparator;","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"    :Sorted client list displayed to user;","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"else ([else])","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"endif","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"stop","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"ReubenChay":15}},{"path":"docs/diagrams/SortSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"!include style.puml","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"participant \"s:SortCommand\" as SortCommand LOGIC_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"end box","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"participant \":AddressBook\" as AddressBook MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"participant \":UniquePersonList\" as UniquePersonList MODEL_COLOR","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"end box","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"[-\u003e LogicManager : execute(sort name)","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"activate LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(sort name)","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"create SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"AddressBookParser -\u003e SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"activate SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"SortCommand -\u003e AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"deactivate SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"AddressBookParser --\u003e LogicManager : s","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"LogicManager -\u003e SortCommand : execute()","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"activate SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"SortCommand -\u003e Model : sort(comparator)","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"activate Model","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"Model -\u003e AddressBook : sort(comparator)","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"activate AddressBook","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"AddressBook -\u003e UniquePersonList : sort(comparator)","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"activate UniquePersonList","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"UniquePersonList -\u003e UniquePersonList : sort(comparator)","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"UniquePersonList --\u003e AddressBook","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"deactivate UniquePersonList","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"AddressBook --\u003e Model","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"deactivate AddressBook","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"Model --\u003e SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"deactivate Model","lastModifiedDate":"2022-10-20"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"SortCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-20"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"deactivate SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"SortCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2022-10-20"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"destroy SortCommand","lastModifiedDate":"2022-10-20"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-20"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"ReubenChay":63}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"AddressBook Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nAddressBookStorage\" as AddressBookStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"Class JsonAdaptedCoverage","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"Class JsonAdaptedPolicy","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"Class JsonAdaptedAssignedPolicy","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"Class JsonAdaptedEvent","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Storage -right-|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedEvent","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPolicy","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"JsonAdaptedPolicy --\u003e \"1...*\" JsonAdaptedCoverage","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedAssignedPolicy","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Ssatu":8,"-":43}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUi\" as Ui","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"Class PolicyListPanel","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"Class PolicyCard","lastModifiedDate":"2022-10-19"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"Class EventListPanel","lastModifiedDate":"2022-10-19"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"Class EventCard","lastModifiedDate":"2022-10-19"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"Class IncomeChart","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"MainWindow *-down-\u003e \"1\" PolicyListPanel","lastModifiedDate":"2022-10-19"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"MainWindow *-down-\u003e \"1\" EventListPanel","lastModifiedDate":"2022-10-19"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"MainWindow *-down-\u003e \"1\" IncomeChart","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"PolicyListPanel -down-\u003e \"*\" PolicyCard","lastModifiedDate":"2022-10-19"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"EventListPanel -down-\u003e \"*\" EventCard","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"PolicyListPanel --|\u003e UiPart","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"EventListPanel --|\u003e UiPart","lastModifiedDate":"2022-10-20"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"IncomeChart --|\u003e UiPart","lastModifiedDate":"2022-10-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"EventCard ..\u003e Model","lastModifiedDate":"2022-10-19"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"PolicyCard ..\u003e Model","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"IncomeChart ..\u003e Model","lastModifiedDate":"2022-10-20"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"PersonCard ...\u003e Model","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"ReubenChay":19,"-":60}},{"path":"docs/diagrams/ViewPinActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"@startuml","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"start","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":":User executes command;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":":Sort through full list of clients for clients with pinned attribute as true;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":":Display only clients with pinned attribute as true;","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"stop","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"@enduml","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":12}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Long Time No See","lastModifiedDate":"2022-09-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"[![CI Status](https://github.com/AY2223S1-CS2103T-W13-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-W13-2/tp/actions)","lastModifiedDate":"2022-09-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2223S1-CS2103T-W13-2/tp/branch/master/graph/badge.svg?token\u003dCXJL1N6BQP)](https://codecov.io/gh/AY2223S1-CS2103T-W13-2/tp)","lastModifiedDate":"2022-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"**Long Time No See (LTNS)** is a desktop task tracking app made for financial advisors to manage their contact base and stay connected with their clients. Made simpler with an intuitive and minimalistic graphical user interface (GUI) and customised functionalities to pinpoint your needs, LTNS will enable you to stay close to your dearest clients!\u003cbr\u003e","lastModifiedDate":"2022-10-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"* If you are interested in using LongTimeNoSee, head over to the [**User Guide**](UserGuide.html).","lastModifiedDate":"2022-09-23"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"* If you are interested about developing LongTimeNoSee, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2022-09-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"loyhongshenggg":4,"-":15}},{"path":"docs/team/cowlinn.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"---","lastModifiedDate":"2022-09-22"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"layout: page","lastModifiedDate":"2022-09-22"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"title: Colin\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-22"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"---","lastModifiedDate":"2022-09-22"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"### Project: LongTimeNoSee(LTNS)","lastModifiedDate":"2022-09-22"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"Long Time No See (LTNS) is a desktop task tracking app made for student financial advisors to manage their contact base and stay connected with their clients. Made simpler with an intuitive and minimalistic graphical user interface (GUI) and customised functionalities to pinpoint your needs, LTNS will enable you to stay close to your dearest clients!","lastModifiedDate":"2022-09-22"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-22"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"* **New Feature**: Added the main representation of our user\u0027s patrons, i.e: The `client` class.","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"  * Justification: This feature is required to use our application.","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"  * Highlights:  It encapsulates extensions from the original AB3\u0027s person model. You can store birthdays, add notes, tag people etc.","lastModifiedDate":"2022-09-22"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"  * Credits: `LocalDate` Library of Java: https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"* **New Feature**: Added a new `Event` model to encapsulate meetings a  Financial Advisor wll have with clients.","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"  * Justification: This feature is one of the new models of the application","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"  * Highlights: Meetings with a client are recording as an `Event`. Includes a `Description` and a day with start and end time.","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    * Used by Reuben to make the `calendar` feature of the app.","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"  * Credits: `LocalTime` library of Java: https://docs.oracle.com/javase/8/docs/api/java/time/LocalTime.html","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"* **Code contributed**: [https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dcowlinn\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other]()","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"* **Project management**:","lastModifiedDate":"2022-09-22"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"  * Helped to maintain issue tracker","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"  * Helped to organize group meetings, with agenda (together with Marcus)","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-22"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"  * `Add/Delete/Edit` a person","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"  * Saving both `Person` and `Event` into the addressBook","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-22"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"  * User Guide:","lastModifiedDate":"2022-09-22"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    * Ported over original UG from Google Docs to Markdown, including cosmetic tweaks","lastModifiedDate":"2022-09-22"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"    * Updated segments on adding a person into an AddressBook ","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"    * Updated documentation clarifying","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"    * Edited command summary","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"  * Developer Guide:","lastModifiedDate":"2022-09-22"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"    * Added Activity diagrams for an execution of adding an event ","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    * Added Extensions for existing class diagram of a person.","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"* **Community**:","lastModifiedDate":"2022-09-22"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"  * PRs reviewed (with non-trivial review comments): 5","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"  * Reported bugs and suggestions for other teams in the class: Mainly for UserGuide","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"  * Gave more than average comments for all peer-review related activites: E.g: PE-D, iP feedback etc.","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"* **Tools**:","lastModifiedDate":"2022-09-22"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"  * Git / Github","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"  * Intelli-J","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-22"}],"authorContributionMap":{"Ssatu":2,"cowlinn":51}},{"path":"docs/team/loyhongshenggg.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"---","lastModifiedDate":"2022-09-23"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"layout: page","lastModifiedDate":"2022-09-23"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"title: Hong Sheng\u0027s Project Portfolio Page 😁","lastModifiedDate":"2022-09-23"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"---","lastModifiedDate":"2022-09-23"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"### Project: LongTimeNoSee(LTNS)","lastModifiedDate":"2022-09-23"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"Long Time No See (LTNS) is a desktop task tracking app made for student financial advisors to manage their contact base and stay connected with their clients. Made simpler with an intuitive and minimalistic graphical user interface (GUI) and customised functionalities to pinpoint your needs, LTNS will enable you to stay close to your dearest clients!","lastModifiedDate":"2022-09-23"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-23"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"* **New Feature**: Figma mockup for the project. 🖼️","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"    * Justification: This feature is to revamp the current AB3 to give our project GUI uniqueness","lastModifiedDate":"2022-09-23"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"    * Highlights:  It provides a general flow for various functionalities and how they piece together into one application","lastModifiedDate":"2022-09-23"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"    * Weblink: https://www.figma.com/file/KloccQRiEV5ow9oQta9jhy/LTNS?node-id\u003d0%3A1","lastModifiedDate":"2022-09-23"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"    * Credits: *NIL*","lastModifiedDate":"2022-09-23"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"* **New Feature**: Major Ui changes","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"  * Justification: This feature is to revamp the current AB3 to give our project GUI uniqueness","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"  * Highlights: It gives the GUI a whole new look","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"  * Sample GUI:","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"  * \u003cimg src\u003d\"..\\images\\sampleGUI.png\"\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"  * Credits: *NIL*","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"* **New Feature**: Added pin feature 📌","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"  * Justification: This feature for financial advisors to mark and view important clients","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"  * Highlights: `pin \u003cIndex\u003e` allows users to pin and `viewPin` allows viewing of these clients at an instant!","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"  * Screenshot:","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"  * \u003cimg src\u003d\"..\\images\\viewPin.png\"\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"  * Credits: *NIL*","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"* **New Feature**: Added viewIncome feature 📈","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"    * Justification: This feature for financial advisors to mark and view important clients","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"    * Highlights 1: Calculates income based on these changing factors:","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"      * Assigned policies","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"      * Start and end date for clients\u0027 assigned policies","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"loyhongshenggg"},"content":"      * Yearly commissions","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"loyhongshenggg"},"content":"    * Highlights 2: Plots a graph based off the user specified year to calculate current income and predict future income","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"      * Screenshot:","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"      * \u003cimg src\u003d\"..\\images\\viewIncome.png\"\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"    * Credits: *NIL*","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":43,"author":{"gitId":"loyhongshenggg"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-09-23"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"* **Project management**:","lastModifiedDate":"2022-09-23"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"    * TODO","lastModifiedDate":"2022-09-23"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-23"},{"lineNumber":49,"author":{"gitId":"loyhongshenggg"},"content":"    * TODO","lastModifiedDate":"2022-09-23"},{"lineNumber":50,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":51,"author":{"gitId":"loyhongshenggg"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-23"},{"lineNumber":52,"author":{"gitId":"loyhongshenggg"},"content":"    * User Guide:","lastModifiedDate":"2022-09-23"},{"lineNumber":53,"author":{"gitId":"loyhongshenggg"},"content":"        * Inserted the Ui components and figma link to the docs","lastModifiedDate":"2022-09-23"},{"lineNumber":54,"author":{"gitId":"loyhongshenggg"},"content":"        * Designed and inserted project logo","lastModifiedDate":"2022-09-23"},{"lineNumber":55,"author":{"gitId":"loyhongshenggg"},"content":"        * Inserted documentation for pin feature","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"loyhongshenggg"},"content":"        * Inserted documentation for viewPin feature","lastModifiedDate":"2022-10-20"},{"lineNumber":57,"author":{"gitId":"loyhongshenggg"},"content":"        * Inserted documentation for viewIncome feature","lastModifiedDate":"2022-10-20"},{"lineNumber":58,"author":{"gitId":"loyhongshenggg"},"content":"    * Developer Guide:","lastModifiedDate":"2022-09-23"},{"lineNumber":59,"author":{"gitId":"loyhongshenggg"},"content":"        * Focused on writing the MSS for pin feature","lastModifiedDate":"2022-09-23"},{"lineNumber":60,"author":{"gitId":"loyhongshenggg"},"content":"        * Inserted documentation for pin feature","lastModifiedDate":"2022-10-20"},{"lineNumber":61,"author":{"gitId":"loyhongshenggg"},"content":"        * Inserted documentation for viewPin feature","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"loyhongshenggg"},"content":"        * Inserted documentation for viewIncome feature","lastModifiedDate":"2022-10-20"},{"lineNumber":63,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":64,"author":{"gitId":"loyhongshenggg"},"content":"* **Community**:","lastModifiedDate":"2022-09-23"},{"lineNumber":65,"author":{"gitId":"loyhongshenggg"},"content":"    * PRs reviewed (with non-trivial review comments): Mainly Damien\u0027s PR (following the Circle review principle)","lastModifiedDate":"2022-09-23"},{"lineNumber":66,"author":{"gitId":"loyhongshenggg"},"content":"    * Contributed to forum discussions:  TODO","lastModifiedDate":"2022-09-23"},{"lineNumber":67,"author":{"gitId":"loyhongshenggg"},"content":"    * Reported bugs and suggestions for other teams in the class: TODO","lastModifiedDate":"2022-09-23"},{"lineNumber":68,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"},{"lineNumber":69,"author":{"gitId":"loyhongshenggg"},"content":"* **Tools**:","lastModifiedDate":"2022-09-23"},{"lineNumber":70,"author":{"gitId":"loyhongshenggg"},"content":"    * Figma (for mockup creation)","lastModifiedDate":"2022-09-23"},{"lineNumber":71,"author":{"gitId":"loyhongshenggg"},"content":"    * Javafx (for altering Ui changes)","lastModifiedDate":"2022-09-23"},{"lineNumber":72,"author":{"gitId":"loyhongshenggg"},"content":"    * Canva (for icon and logo design)","lastModifiedDate":"2022-09-23"},{"lineNumber":73,"author":{"gitId":"loyhongshenggg"},"content":"    * CSS for altering GUI looks","lastModifiedDate":"2022-10-20"},{"lineNumber":74,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-23"}],"authorContributionMap":{"loyhongshenggg":74}},{"path":"docs/team/marcusczh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"---","lastModifiedDate":"2022-09-22"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"layout: page","lastModifiedDate":"2022-09-22"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"title: Marcus\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-22"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"---","lastModifiedDate":"2022-09-22"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"# Project: Long Time No See (LTNS)","lastModifiedDate":"2022-09-22"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"Long Time No See (LTNS) is a desktop task tracking app made for financial advisors to manage their clients, policies and events. Made simpler with an intuitive and minimalistic graphical user interface (GUI) and customised functionalities to pinpoint your needs, LTNS will enable you to stay close to your dearest clients!","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"## Summary of Contributions:","lastModifiedDate":"2022-09-22"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"### Code contributed:","lastModifiedDate":"2022-09-22"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"[tP Code Dashboard](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dmarcusczh\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"### Features implemented:","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"Implemented all search related functionalities:","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"- Searching for a client: `findClient` ","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"  - What it does:","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    - Allow users to search for Clients in the application, based off the different metrics that can be specified","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"- Searching for a policy: `findPolicy`","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"  - What it does:","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"      - Allow users to search for Policies in the application, based off the different metrics that can be specified","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"- Searching for an event: `findEvent`","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"  - What it does:","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"      - Allow users to search for Events in the application, based off the different metrics that can be specified","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"- Justification:","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    - They are all important functionalities for the target user as being able to search for entries in the application based off their information is what sets the application apart from more traditional means like pen and paper. These all provide the target user with an easier way to retrieve information from the application whenever needed","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"- Highlights:","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    - The search features are implemented in such a way that extension can be easily achieved without modification, whereby more metrics can be easily added for the user to search, without any modification of other classes","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    - As the enhancement required the use of all the individual Person/Policy/Event attributes, it required a significant understanding of how each attribute was implemented and their constraints","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"    - As an added touch, it is also possible to specify more than one metric in each search, to provide the user with the possibility to narrow down the search range","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"### Contributions to the UG:","lastModifiedDate":"2022-09-22"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"- Added documentation for the following features","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"  - Searching for a client: `findClient`","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"  - Searching for a policy: `findPolicy`","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"  - Searching for an event: `findEvent`","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"- Created a summary table to orientate readers on all the possible prefixes, along with their input constraints.","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"### Contributions to the DG:","lastModifiedDate":"2022-09-22"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"- Added Implementation details for all `find` related commands ","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"- Added use cases","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"### Contributions to team-based tasks:","lastModifiedDate":"2022-09-22"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"- Set up the GitHub team organisation and repo","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"- Maintained GitHub tools","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"  - Created issue labels","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"  - Created and maintained milestones","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"- Managed all releases on GitHub","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"### Review/mentoring contributions:","lastModifiedDate":"2022-09-22"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"- Main reviewer for Reuben","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-09-22"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"### Contributions beyond the project team:","lastModifiedDate":"2022-09-22"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"- Reported an above average number of bugs in the [Practical Exam Dry Run](https://github.com/marcusczh/ped/issues)","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"marcusczh":59}},{"path":"docs/team/reubenchay.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"## Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"Long Time No See (LTNS) is a desktop task tracking app made for financial advisors to manage their contact base, policies and events, and stay connected with their clients. Made simpler with an intuitive and minimalistic graphical user interface (GUI) and customised functionalities to pinpoint your needs, LTNS will enable you to stay close to your dearest clients!","lastModifiedDate":"2022-10-31"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"## Code contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"Code Contributions can be found at [this link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dreubenchay\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2022-10-31"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"## Enhancements implemented","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"- Added Sorting Feature which allows users to sort their clients by specific metrics ","lastModifiedDate":"2022-10-31"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"- Collaborated with Colin to build the Event class, along with its extended features of a calendar view ","lastModifiedDate":"2022-10-31"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"## Contributions to UG","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"- Table of Contents and overall formatting of Feature Sections ","lastModifiedDate":"2022-10-31"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"- Glossary ","lastModifiedDate":"2022-10-31"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"- In charge of creating hyperlinks ","lastModifiedDate":"2022-10-31"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"- Feature Descriptions including: sort, calendar and listing of events ","lastModifiedDate":"2022-10-31"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"- FAQ","lastModifiedDate":"2022-10-31"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"## Contributions to DG","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"- Edited UI Component along with the UI Component\u0027s UML Diagram ","lastModifiedDate":"2022-10-31"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"- Implementation of Sort Feature, including sequence diagram and activity diagram ","lastModifiedDate":"2022-10-31"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"## Contributions to team-based tasks","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"## Review/Mentoring Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"## Other contributions beyond the team","lastModifiedDate":"2022-09-20"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"- Useful bugs reported during PE Dry Run ","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"- Helped classmate in debugging his Mac Java version error ","lastModifiedDate":"2022-10-31"}],"authorContributionMap":{"ReubenChay":32}},{"path":"docs/team/ssatu.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"layout: page","lastModifiedDate":"2022-09-27"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"title: Damien\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"### Project: LongTimeNoSee(LTNS)","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"Long Time No See (LTNS) is a desktop task tracking app made for student financial advisors to manage their contact base and stay connected with their clients. Made simpler with an intuitive and minimalistic graphical user interface (GUI) and customised functionalities to pinpoint your needs, LTNS will enable you to stay close to your dearest clients!","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"* **New Feature**: Added the main representation of our users\u0027 available policies, i.e: The `policy` class.","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"  * Justification: This feature allows us to store policies sold by the user.","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"  * Highlights:  It stores information about a given policy, like policy duration, premium and coverage type.","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"* **New Feature**:","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"  * *TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"* **Code contributed**: [https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dssatu\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other]()","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"* **Project management**:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"  * TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"  * TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-27"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"  * User Guide:","lastModifiedDate":"2022-09-27"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    * TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"  * Developer Guide:","lastModifiedDate":"2022-09-27"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"    * TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"* **Community**:","lastModifiedDate":"2022-09-27"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"  * PRs reviewed (with non-trivial review comments): TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"  * Contributed to forum discussions:  TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"  * Reported bugs and suggestions for other teams in the class: TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"* **Tools**:","lastModifiedDate":"2022-09-27"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"  * TODO","lastModifiedDate":"2022-09-27"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"Ssatu":42}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/longtimenosee/logic/command` directory.","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"marcusczh"},"content":"Create a `RemarkCommandParser` class in the `longtimenosee.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2022-10-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"marcusczh"},"content":"Create a new `Remark` in `longtimenosee.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2022-10-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"marcusczh"},"content":"Simply add the following to [`longtimenosee.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2022-10-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"-":394,"marcusczh":7}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"The `address` field in `Person` is actually an instance of the `longtimenosee.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2022-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":111,"marcusczh":1}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `longtimenosee.logic.Logic`.","lastModifiedDate":"2022-10-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"A quick look at the `longtimenosee.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2022-10-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":299,"marcusczh":2}},{"path":"src/main/java/longtimenosee/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.FileUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"-":61,"marcusczh":3}},{"path":"src/main/java/longtimenosee/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"-":24,"marcusczh":1}},{"path":"src/main/java/longtimenosee/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Config;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Version;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.ConfigUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.Logic;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.LogicManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.util.SampleDataUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.AddressBookStorage;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.JsonAddressBookStorage;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.JsonUserPrefsStorage;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.Storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.StorageManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.UserPrefsStorage;","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.ui.Ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.ui.UiManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);","lastModifiedDate":"2022-10-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":158,"marcusczh":25}},{"path":"src/main/java/longtimenosee/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":62,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"    private static final double DEFAULT_HEIGHT \u003d 700;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"    private static final double DEFAULT_WIDTH \u003d 1040;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"loyhongshenggg":2,"-":76,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":111,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_INVALID_POLICY_DISPLAYED_INDEX \u003d \"The policy index provided is invalid\";","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"    public static final String MESSAGE_POLICIES_LISTED_OVERVIEW \u003d \"%1$d policies listed!\";","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_INVALID_YEAR_FORMAT \u003d \"Please pick a year between 1900 and 2100!\";","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":1,"loyhongshenggg":1,"Ssatu":1,"-":11,"marcusczh":3}},{"path":"src/main/java/longtimenosee/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":115,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core.index;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"    private Index(int zeroBasedIndex, boolean isYear) {","lastModifiedDate":"2022-10-25"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"        if ((zeroBasedIndex \u003c 1900 || zeroBasedIndex \u003e 2100) \u0026\u0026 isYear) {","lastModifiedDate":"2022-10-25"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2022-10-25"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2022-10-25"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"loyhongshenggg":8,"-":53,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":10,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":20,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.MainApp;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":40,"marcusczh":2}},{"path":"src/main/java/longtimenosee/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":34,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Config;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":20,"marcusczh":3}},{"path":"src/main/java/longtimenosee/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":82,"marcusczh":1}},{"path":"src/main/java/longtimenosee/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":140,"marcusczh":3}},{"path":"src/main/java/longtimenosee/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":66,"marcusczh":2}},{"path":"src/main/java/longtimenosee/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.CommandResult;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"     * @see longtimenosee.model.Model#getAddressBook()","lastModifiedDate":"2022-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"    /** Returns an unmodifiable view of the filtered list of policies */","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    ObservableList\u003cPolicy\u003e getFilteredPolicyList();","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"    FinancialAdvisorIncome getIncome();","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"loyhongshenggg":2,"Ssatu":2,"cowlinn":5,"-":42,"marcusczh":9}},{"path":"src/main/java/longtimenosee/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.Command;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.CommandResult;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.AddressBookParser;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.Storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"    private FinancialAdvisorIncome income;","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"        income \u003d model.getIncome();","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":73,"author":{"gitId":"loyhongshenggg"},"content":"    public FinancialAdvisorIncome getIncome() {","lastModifiedDate":"2022-10-20"},{"lineNumber":74,"author":{"gitId":"loyhongshenggg"},"content":"        return income;","lastModifiedDate":"2022-10-20"},{"lineNumber":75,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"    public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"        return model.getFilteredPolicyList();","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"        return model.getFilteredEventList();","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"loyhongshenggg":7,"Ssatu":5,"cowlinn":7,"-":69,"marcusczh":13}},{"path":"src/main/java/longtimenosee/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_INCOME;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_RISK_APPETITE;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"addClient\";","lastModifiedDate":"2022-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Client to the LTNS. \"","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_NAME + \"Clement Tan \"","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_EMAIL + \"clementTan@example.com \"","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_TAG + \"owesMoney \"","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_BIRTHDAY + \"2019-05-05 \"","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_INCOME + \"10000.00 \"","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_RISK_APPETITE + \"M\";","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This client already exists in the address book\";","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"loyhongshenggg":2,"cowlinn":12,"-":50,"marcusczh":9}},{"path":"src/main/java/longtimenosee/logic/commands/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"import java.util.List;","lastModifiedDate":"2022-10-19"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-19"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.exceptions.OverlapEventException;","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":" * Adds an Event to the address book.","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";","lastModifiedDate":"2022-10-19"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the LTNS\";","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_OVERLAP_EVENT \u003d \"The event you would like to add overlaps with another event \\n\"","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"            + \"Perhaps choose a different timing? \";","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The person you\u0027ve selected currently does not \"","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"            + \"exist in our addressBook. \\n Please choose another name!\";","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Event added: %1$s\";","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an Event to the LTNS. \"","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_DESCRIPTION + \"Description \"","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_NAME + \"Person Name \"","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_DATE + \"Date \"","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_START_TIME + \"Start time \"","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_END_TIME + \"End time \"","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_DESCRIPTION + \"Meet Clement at Noon \"","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_NAME + \"Clement Tan \"","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_DATE + \"2022-10-10 \"","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_START_TIME + \"12:00 \"","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"            + PREFIX_END_TIME + \"13:00 \";","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"    private final Event toAdd;","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"     * Creates an AddEventCommand to add the specified {@code Event}","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"     * @param event","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"    public AddEventCommand(Event event) {","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(event);","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        toAdd \u003d event;","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-16"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"        if (model.hasEvent(toAdd)) { //TODO: duplicate events?","lastModifiedDate":"2022-10-16"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2022-10-16"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"        if (model.hasEventOverlap(toAdd)) { //TODO: overlapping events?","lastModifiedDate":"2022-10-16"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"            List\u003cEvent\u003e clashingEvents \u003d model.listEventsOverlap(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"            List\u003cEvent\u003e eventsOnTheSameDay \u003d model.listEventsSameDay(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"            throw new CommandException(MESSAGE_OVERLAP_EVENT","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"                    + \"\\n List of events overlapping: \"","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"                    + Event.viewEvents(clashingEvents)","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"                    + \"List of events on the same day : \"","lastModifiedDate":"2022-10-16"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"                    + Event.viewEvents(eventsOnTheSameDay));","lastModifiedDate":"2022-10-16"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-10-16"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"            model.addEvent(toAdd, toAdd.getPersonName().fullName);","lastModifiedDate":"2022-10-22"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"        } catch (PersonNotFoundException e) {","lastModifiedDate":"2022-10-16"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2022-10-16"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        } catch (OverlapEventException e) {","lastModifiedDate":"2022-10-16"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"            throw new CommandException(MESSAGE_OVERLAP_EVENT);","lastModifiedDate":"2022-10-16"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"        //TODO: Incorporate into GUI by adding a new field: showEvents?","lastModifiedDate":"2022-10-16"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"        //TODO: showEvents could immediately show the next 7 days, up to implementation","lastModifiedDate":"2022-10-16"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, true);","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-16"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls","lastModifiedDate":"2022-10-16"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));","lastModifiedDate":"2022-10-16"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"ReubenChay":3,"loyhongshenggg":2,"cowlinn":86}},{"path":"src/main/java/longtimenosee/logic/commands/CalendarCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.predicate.WithinNextSevenDays;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":" * Displays the user\u0027s upcoming events in the next 7 days","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"public class CalendarCommand extends Command {","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Here are your events in the next 7 days\";","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"     * Creates a CalendarCommand object, no attributes required","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"    public CalendarCommand() {}","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"        model.calendarView(); //TODO: This doesn\u0027t actually change the list I think?","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"        model.updateFilteredEventList(new WithinNextSevenDays()); //Change: Added new predicate","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"            return true;","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        if (!(other instanceof CalendarCommand)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"            return false;","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"        return false;","lastModifiedDate":"2022-10-17"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"        // no other object should be same, should always create new calendar command object","lastModifiedDate":"2022-10-17"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"ReubenChay":41,"cowlinn":3}},{"path":"src/main/java/longtimenosee/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"loyhongshenggg":1,"-":19,"marcusczh":3}},{"path":"src/main/java/longtimenosee/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":17,"marcusczh":3}},{"path":"src/main/java/longtimenosee/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"    /** The application should display policies. */","lastModifiedDate":"2022-10-11"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    private final boolean showPolicy;","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    /** The application should display clients. */","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    private final boolean showPerson;","lastModifiedDate":"2022-10-22"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    /** The application should display events. */","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"    private final boolean showEvent;","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"    private final boolean showIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,","lastModifiedDate":"2022-10-11"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"                         boolean showPolicy, boolean showPerson, boolean showEvent, boolean showIncome) {","lastModifiedDate":"2022-10-22"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"        this.showPolicy \u003d showPolicy;","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        this.showPerson \u003d showPerson;","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"        this.showEvent \u003d showEvent;","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"        this.showIncome \u003d showIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"    public CommandResult(String feedbackToUser, boolean showPolicy, boolean showClients, boolean showEvent) {","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"        this(feedbackToUser, false, false, showPolicy, showClients, showEvent, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"    public boolean isShowPolicy() {","lastModifiedDate":"2022-10-11"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"        return showPolicy;","lastModifiedDate":"2022-10-11"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"    public boolean isShowPerson() {","lastModifiedDate":"2022-10-22"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        return showPerson;","lastModifiedDate":"2022-10-22"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":79,"author":{"gitId":"loyhongshenggg"},"content":"    public boolean isShowIncome() {","lastModifiedDate":"2022-10-20"},{"lineNumber":80,"author":{"gitId":"loyhongshenggg"},"content":"        return showIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":81,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"    public boolean isShowEvent() {","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"        return showEvent;","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"        //Todo: Implement testing for showClients and showPolicy","lastModifiedDate":"2022-10-11"},{"lineNumber":103,"author":{"gitId":"Ssatu"},"content":"//                \u0026\u0026 showClients \u003d\u003d otherCommandResult.showClients","lastModifiedDate":"2022-10-11"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"//                \u0026\u0026 showPolicy \u003d\u003d otherCommandResult.showPolicy;","lastModifiedDate":"2022-10-11"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit, showPolicy, showPerson, showEvent, showIncome);","lastModifiedDate":"2022-10-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":16,"loyhongshenggg":6,"Ssatu":22,"cowlinn":1,"-":66,"marcusczh":1}},{"path":"src/main/java/longtimenosee/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"deleteClient\";","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"            + \": Deletes the client identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2022-10-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Client: %1$s\";","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"        //Additional function to purge eventList","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"        model.removeEventsUnderPerson(personToDelete);","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete),","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"                false, true, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":1,"cowlinn":7,"-":43,"marcusczh":6}},{"path":"src/main/java/longtimenosee/logic/commands/DeleteEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.List;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":" * Deletes an event identified using its displayed index from the event list","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"public class DeleteEventCommand extends Command {","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"deleteEvent\";","lastModifiedDate":"2022-10-19"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"            + \": Deletes the event identified by the index number used in the fully displayed event list.\\n\"","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";","lastModifiedDate":"2022-10-17"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"     * Creates a DeleteEventCommand object","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"    public DeleteEventCommand(Index targetIndex) {","lastModifiedDate":"2022-10-17"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-17"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-17"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();","lastModifiedDate":"2022-10-17"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-17"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-17"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-17"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"        model.deleteEvent(eventToDelete);","lastModifiedDate":"2022-10-17"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete), false, false, true);","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"        // need to change UI to be able to display for event","lastModifiedDate":"2022-10-17"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-17"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-17"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls","lastModifiedDate":"2022-10-17"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check","lastModifiedDate":"2022-10-17"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"ReubenChay":60,"cowlinn":3}},{"path":"src/main/java/longtimenosee/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.CollectionUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"editClient\";","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \"","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"            + \"by the index number used in the displayed client list. \"","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Client: %1$s\";","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This client already exists in the LTNS.\";","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"        if (!personToEdit.isSamePerson(editedPerson)) { //If the name of the new person is changed","lastModifiedDate":"2022-10-20"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"            model.removeEventsUnderPerson(personToEdit); //Remove Events under old person","lastModifiedDate":"2022-10-20"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), false, true, false);","lastModifiedDate":"2022-10-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());","lastModifiedDate":"2022-10-12"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"        Income updatedIncome \u003d editPersonDescriptor.getIncome().orElse(personToEdit.getIncome());","lastModifiedDate":"2022-10-12"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"        RiskAppetite updatedRA \u003d editPersonDescriptor.getRA().orElse(personToEdit.getRiskAppetite());","lastModifiedDate":"2022-10-12"},{"lineNumber":111,"author":{"gitId":"Ssatu"},"content":"        Set\u003cAssignedPolicy\u003e updatedAssignedPolicy \u003d personToEdit.getAssignedPolicies();","lastModifiedDate":"2022-10-18"},{"lineNumber":112,"author":{"gitId":"Ssatu"},"content":"        boolean updatedPin \u003d personToEdit.getPin();","lastModifiedDate":"2022-10-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,","lastModifiedDate":"2022-10-12"},{"lineNumber":115,"author":{"gitId":"Ssatu"},"content":"                updatedBirthday, updatedIncome, updatedRA, updatedAssignedPolicy, updatedPin);","lastModifiedDate":"2022-10-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":146,"author":{"gitId":"cowlinn"},"content":"        private Birthday birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":147,"author":{"gitId":"cowlinn"},"content":"        private Income income;","lastModifiedDate":"2022-10-12"},{"lineNumber":148,"author":{"gitId":"cowlinn"},"content":"        private RiskAppetite riskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":149,"author":{"gitId":"Ssatu"},"content":"        private Set\u003cAssignedPolicy\u003e policies;","lastModifiedDate":"2022-10-18"},{"lineNumber":150,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":164,"author":{"gitId":"cowlinn"},"content":"            setBirthday(toCopy.birthday);","lastModifiedDate":"2022-10-12"},{"lineNumber":165,"author":{"gitId":"cowlinn"},"content":"            setIncome(toCopy.income);","lastModifiedDate":"2022-10-12"},{"lineNumber":166,"author":{"gitId":"cowlinn"},"content":"            setRiskAppetite(toCopy.riskAppetite);","lastModifiedDate":"2022-10-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"cowlinn"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, birthday, income, riskAppetite);","lastModifiedDate":"2022-10-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":211,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":218,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":220,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":221,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"Ssatu"},"content":"        /**","lastModifiedDate":"2022-10-18"},{"lineNumber":227,"author":{"gitId":"Ssatu"},"content":"         * Sets {@code assignedPolicies} to this object\u0027s {@code policies}.","lastModifiedDate":"2022-10-18"},{"lineNumber":228,"author":{"gitId":"Ssatu"},"content":"         * A defensive copy of {@code policies} is used internally.","lastModifiedDate":"2022-10-18"},{"lineNumber":229,"author":{"gitId":"Ssatu"},"content":"         */","lastModifiedDate":"2022-10-18"},{"lineNumber":230,"author":{"gitId":"Ssatu"},"content":"        public void setAssignedPolicies(Set\u003cAssignedPolicy\u003e assignedPolicies) {","lastModifiedDate":"2022-10-18"},{"lineNumber":231,"author":{"gitId":"Ssatu"},"content":"            this.policies \u003d (assignedPolicies !\u003d null) ? new HashSet\u003c\u003e(assignedPolicies) : null;","lastModifiedDate":"2022-10-18"},{"lineNumber":232,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":233,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":234,"author":{"gitId":"Ssatu"},"content":"        /**","lastModifiedDate":"2022-10-18"},{"lineNumber":235,"author":{"gitId":"Ssatu"},"content":"         * Returns an unmodifiable policy set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-10-18"},{"lineNumber":236,"author":{"gitId":"Ssatu"},"content":"         * if modification is attempted.","lastModifiedDate":"2022-10-18"},{"lineNumber":237,"author":{"gitId":"Ssatu"},"content":"         * Returns {@code Optional#empty()} if {@code policies} is null.","lastModifiedDate":"2022-10-18"},{"lineNumber":238,"author":{"gitId":"Ssatu"},"content":"         */","lastModifiedDate":"2022-10-18"},{"lineNumber":239,"author":{"gitId":"Ssatu"},"content":"        public Optional\u003cSet\u003cAssignedPolicy\u003e\u003e getAssignedPolicies() {","lastModifiedDate":"2022-10-18"},{"lineNumber":240,"author":{"gitId":"Ssatu"},"content":"            return (policies !\u003d null) ? Optional.of(Collections.unmodifiableSet(policies)) : Optional.empty();","lastModifiedDate":"2022-10-18"},{"lineNumber":241,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":242,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":243,"author":{"gitId":"cowlinn"},"content":"        public void setRiskAppetite(RiskAppetite ra) {","lastModifiedDate":"2022-10-13"},{"lineNumber":244,"author":{"gitId":"cowlinn"},"content":"            this.riskAppetite \u003d ra;","lastModifiedDate":"2022-10-12"},{"lineNumber":245,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":246,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":247,"author":{"gitId":"cowlinn"},"content":"        public void setIncome(Income income) {","lastModifiedDate":"2022-10-13"},{"lineNumber":248,"author":{"gitId":"cowlinn"},"content":"            this.income \u003d income;","lastModifiedDate":"2022-10-12"},{"lineNumber":249,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":250,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":251,"author":{"gitId":"cowlinn"},"content":"        public void setBirthday(Birthday birthday) {","lastModifiedDate":"2022-10-13"},{"lineNumber":252,"author":{"gitId":"cowlinn"},"content":"            this.birthday \u003d birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":253,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":254,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":273,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":274,"author":{"gitId":"cowlinn"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())","lastModifiedDate":"2022-10-12"},{"lineNumber":275,"author":{"gitId":"cowlinn"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())","lastModifiedDate":"2022-10-12"},{"lineNumber":276,"author":{"gitId":"cowlinn"},"content":"                    \u0026\u0026 getIncome().equals(e.getIncome())","lastModifiedDate":"2022-10-12"},{"lineNumber":277,"author":{"gitId":"cowlinn"},"content":"                    \u0026\u0026 getRA().equals(e.getRA());","lastModifiedDate":"2022-10-12"},{"lineNumber":278,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":279,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":280,"author":{"gitId":"cowlinn"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {","lastModifiedDate":"2022-10-13"},{"lineNumber":281,"author":{"gitId":"cowlinn"},"content":"            return Optional.ofNullable(birthday);","lastModifiedDate":"2022-10-12"},{"lineNumber":282,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":283,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":284,"author":{"gitId":"cowlinn"},"content":"        public Optional\u003cIncome\u003e getIncome() {","lastModifiedDate":"2022-10-13"},{"lineNumber":285,"author":{"gitId":"cowlinn"},"content":"            return Optional.ofNullable(income);","lastModifiedDate":"2022-10-12"},{"lineNumber":286,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":287,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":288,"author":{"gitId":"cowlinn"},"content":"        public Optional\u003cRiskAppetite\u003e getRA() {","lastModifiedDate":"2022-10-13"},{"lineNumber":289,"author":{"gitId":"cowlinn"},"content":"            return Optional.ofNullable(riskAppetite);","lastModifiedDate":"2022-10-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"ReubenChay":1,"loyhongshenggg":1,"Ssatu":22,"cowlinn":51,"-":199,"marcusczh":18}},{"path":"src/main/java/longtimenosee/logic/commands/EventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-26"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-26"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-26"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"events\";","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all currently filtered events\";","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-26"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-26"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-26"}],"authorContributionMap":{"cowlinn":22}},{"path":"src/main/java/longtimenosee/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting LTNS as requested ...\";","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, true, false, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"loyhongshenggg":1,"cowlinn":1,"-":15,"marcusczh":2}},{"path":"src/main/java/longtimenosee/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMPANY;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COVERAGES;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_INCOME;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_RISK_APPETITE;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":" * Finds and lists all persons in address book who matches the given metrics.","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"findClient\";","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients that match the given metrics and \"","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"            + \"and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2022-10-05"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]… \"","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_INCOME + \"INCOME] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_RISK_APPETITE + \"RISK_APPETITE] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_TITLE + \"POLICY_TITLE] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_COVERAGES + \"POLICY_COVERAGE]… \"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_COMPANY + \"POLICY_COMPANY]\\n\"","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-24"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"            + PREFIX_NAME + \"alice \"","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"            + PREFIX_PHONE + \"12341234\";","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cPredicate\u003cPerson\u003e\u003e predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-05"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"     * Creates a FindCommand object.","lastModifiedDate":"2022-10-05"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-05"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"     * @param predicates check if the specified metrics match any contact.","lastModifiedDate":"2022-10-14"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-05"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"    public FindCommand(List\u003cPredicate\u003cPerson\u003e\u003e predicates) {","lastModifiedDate":"2022-10-14"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"        assert predicates.size() \u003e 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"        this.predicates \u003d predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"        Predicate\u003cPerson\u003e finalPredicate \u003d predicates.get(0);","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"        for (Predicate\u003cPerson\u003e predicate : predicates) {","lastModifiedDate":"2022-10-14"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"            if (!predicate.equals(predicates.get(0))) {","lastModifiedDate":"2022-10-14"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"                finalPredicate \u003d finalPredicate.and(predicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"        model.updateFilteredPersonList(finalPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),","lastModifiedDate":"2022-10-11"},{"lineNumber":72,"author":{"gitId":"loyhongshenggg"},"content":"                false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"marcusczh"},"content":"                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)); // state check","lastModifiedDate":"2022-10-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"loyhongshenggg":1,"Ssatu":1,"cowlinn":2,"-":25,"marcusczh":52}},{"path":"src/main/java/longtimenosee/logic/commands/FindEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":" * Finds and lists all Events in address book which match the given metrics.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"public class FindEventCommand extends Command {","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    public static final String COMMAND_WORD \u003d \"findEvent\";","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events that match the given metrics and \"","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"            + \"and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"            + \"[\" + PREFIX_NAME + \"CLIENT_NAME] \"","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_DATE + \"DATE]\\n\"","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"            + PREFIX_DESCRIPTION + \"meeting \"","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"            + PREFIX_NAME + \"Alice\";","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cPredicate\u003cEvent\u003e\u003e predicates;","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"     * Creates a FindEventCommand object.","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"     * @param predicates checks if the specified metrics match any event.","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"    public FindEventCommand(List\u003cPredicate\u003cEvent\u003e\u003e predicates) {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        this.predicates \u003d predicates;","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        Predicate\u003cEvent\u003e finalPredicate \u003d predicates.get(0);","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"        for (Predicate\u003cEvent\u003e predicate : predicates) {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"            if (!predicate.equals(predicates.get(0))) {","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"                finalPredicate \u003d finalPredicate.and(predicate);","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        model.updateFilteredEventList(finalPredicate);","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size()),","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"                false, false, true);","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof FindEventCommand) {","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"                return predicates.equals(((FindEventCommand) other).predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"cowlinn":1,"marcusczh":69}},{"path":"src/main/java/longtimenosee/logic/commands/FindPolicyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMPANY;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COVERAGES;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":" * Finds and lists all policies in address book which match the given metrics.","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"public class FindPolicyCommand extends Command {","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    public static final String COMMAND_WORD \u003d \"findPolicy\";","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all policies that match the given metrics and \"","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"            + \"and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_COMPANY + \"COMPANY] \"","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"            + \"[\" + PREFIX_COVERAGES + \"COVERAGE]…\\n\"","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"            + PREFIX_COVERAGES + \"TRAVEL \"","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"            + PREFIX_COMPANY + \"AIA\";","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cPredicate\u003cPolicy\u003e\u003e predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"     * Creates a FindPolicyCommand object.","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"     * @param predicates checks if the specified metrics match any policy.","lastModifiedDate":"2022-10-14"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"    public FindPolicyCommand(List\u003cPredicate\u003cPolicy\u003e\u003e predicates) {","lastModifiedDate":"2022-10-14"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        this.predicates \u003d predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        Predicate\u003cPolicy\u003e finalPredicate \u003d predicates.get(0);","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"        for (Predicate\u003cPolicy\u003e predicate : predicates) {","lastModifiedDate":"2022-10-14"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"            if (!predicate.equals(predicates.get(0))) {","lastModifiedDate":"2022-10-14"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"                finalPredicate \u003d finalPredicate.and(predicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-14"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        model.updateFilteredPolicyList(finalPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-14"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"                String.format(Messages.MESSAGE_POLICIES_LISTED_OVERVIEW, model.getFilteredPolicyList().size()),","lastModifiedDate":"2022-10-14"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"                true, false, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-14"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof FindPolicyCommand) {","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"                return predicates.equals(((FindPolicyCommand) other).predicates);","lastModifiedDate":"2022-10-14"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-14"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"marcusczh":70}},{"path":"src/main/java/longtimenosee/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":1,"-":18,"marcusczh":2}},{"path":"src/main/java/longtimenosee/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"allClients\";","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients in the LTNS\";","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"loyhongshenggg":2,"cowlinn":1,"-":17,"marcusczh":4}},{"path":"src/main/java/longtimenosee/logic/commands/ListEventsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.model.Model.PREDICATE_SHOW_ALL_EVENTS;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"public class ListEventsCommand extends Command {","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"allEvents\";","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all events in LTNS\";","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"}],"authorContributionMap":{"ReubenChay":1,"loyhongshenggg":1,"cowlinn":23}},{"path":"src/main/java/longtimenosee/logic/commands/PersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-11"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"public class PersonCommand extends Command {","lastModifiedDate":"2022-10-11"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"clients\";","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2022-10-11"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2022-10-11"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all currently filtered clients\";","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-11"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false, false, true, false, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-11"}],"authorContributionMap":{"ReubenChay":3,"Ssatu":17,"cowlinn":2,"marcusczh":2}},{"path":"src/main/java/longtimenosee/logic/commands/PinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"import java.util.List;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":" * Pin command, used to pin.","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"public class PinCommand extends Command {","lastModifiedDate":"2022-10-09"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String COMMAND_WORD \u003d \"pin\";","lastModifiedDate":"2022-10-09"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_USAGE \u003d \"To use \" + COMMAND_WORD","lastModifiedDate":"2022-10-30"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"            + \":\\nindex should be indices shown on currently viewed list\";","lastModifiedDate":"2022-10-30"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_PIN_PERSON_SUCCESS \u003d \"Pinned Client: %1$s\";","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_UNPIN_PERSON_SUCCESS \u003d \"Unpinned Client: %1$s\";","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-09"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"    public PinCommand(Index targetIndex) {","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-09"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-09"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-09"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"loyhongshenggg"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-09"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"        Person personToPin \u003d lastShownList.get(targetIndex.getZeroBased()); //gets the person to be pinned","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"loyhongshenggg"},"content":"        personToPin.setPin(!personToPin.getPin()); //set to pin or not","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"        //model.deletePerson(personToPin); optional because we don\u0027t alter the list","lastModifiedDate":"2022-10-09"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(String.format(personToPin.getPin()","lastModifiedDate":"2022-10-10"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"                ? MESSAGE_PIN_PERSON_SUCCESS : MESSAGE_UNPIN_PERSON_SUCCESS , personToPin), false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-09"}],"authorContributionMap":{"loyhongshenggg":43,"marcusczh":6}},{"path":"src/main/java/longtimenosee/logic/commands/PolicyAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMMISSION;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMPANY;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COVERAGES;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":" * Adds a policy to the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"public class PolicyAddCommand extends Command {","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    public static final String COMMAND_WORD \u003d \"addPolicy\";","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a policy to the LTNS. \"","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_TITLE + \"TITLE \"","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"            //Todo: Replace message with a command that lists out different companies","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_COMPANY + \"\u0027One of: {MNF, PRU, AXA, GEL, NTU, ETQ, TML, AIA, AVI, FWD}\u0027\"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_COMMISSION + \"Year1% Year2% Remaining%\"","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"            + \"[\" + PREFIX_COVERAGES + \"COVERAGE]...\\n\"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_TITLE + \"PruShield \"","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_COMPANY + \"PRU \"","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_COMMISSION + \"15% 7.5% 1% \"","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"            //Todo: Replace message with a command that lists out different coverages","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_COVERAGES + \"HEALTH \"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_COVERAGES + \"LIFE\";","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New policy added: %1$s\";","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_DUPLICATE_POLICY \u003d \"This policy already exists in the address book\";","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"    final Policy toAdd;","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"     * Creates an PolicyAddCommand to add the specified {@code Policy}","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"     * @param policy","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"    public PolicyAddCommand(Policy policy) {","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"        toAdd \u003d policy;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"        if (model.hasPolicy(toAdd)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_POLICY);","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        model.addPolicy(toAdd);","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), true, false, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"                || (other instanceof PolicyAddCommand // instanceof handles nulls","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 toAdd.equals(((PolicyAddCommand) other).toAdd));","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"loyhongshenggg":2,"Ssatu":56,"cowlinn":1,"marcusczh":8}},{"path":"src/main/java/longtimenosee/logic/commands/PolicyAssignCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_END;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PREMIUM;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import java.util.List;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.PolicyDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.Premium;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":" * Policy assign command, used to assign a policy to a client.","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"public class PolicyAssignCommand extends Command {","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"    public static final String COMMAND_WORD \u003d \"assign\";","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": assigns a policy to a client. \"","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"            + \"(Index of client) \"","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"            + \"(Index of policy) \"","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_PREMIUM + \"200.00 \"","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_START + \"2020-12-10 \"","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"            + PREFIX_END + \"2021-12-15\";","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_ASSIGN_POLICY_SUCCESS \u003d \"Assigned policy %1$s to Client: %2$s\";","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_ASSIGN_PERSON_DUPLICATE \u003d \"Policy has already been assigned to Client: %2$s\";","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"    private final Index targetPersonIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    private final Index targetPolicyIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"    private final Premium premium;","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    private final PolicyDate startDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"    private final PolicyDate endDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"     * Constructor for PolicyAssignCommand.","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"     * @param targetPersonIndex","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"     * @param targetPolicyIndex","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"     * @param premium","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"     * @param startDate","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"     * @param endDate","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"    public PolicyAssignCommand(Index targetPersonIndex, Index targetPolicyIndex, Premium premium,","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"                               PolicyDate startDate, PolicyDate endDate) {","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"        this.targetPersonIndex \u003d targetPersonIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        this.targetPolicyIndex \u003d targetPolicyIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"        this.premium \u003d premium;","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"        List\u003cPolicy\u003e lastShownPolicyList \u003d model.getFilteredPolicyList();","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"        if (targetPersonIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"        if (targetPolicyIndex.getZeroBased() \u003e\u003d lastShownPolicyList.size()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        Person personToAddTo \u003d lastShownPersonList.get(targetPersonIndex.getZeroBased()); //gets the person to be added","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"        Policy policyToAdd \u003d lastShownPolicyList.get(targetPolicyIndex.getZeroBased()); //gets the policy to be added","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"        boolean success \u003d personToAddTo.addPolicy(new AssignedPolicy(","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"                policyToAdd, premium, startDate, endDate)); //add the policy","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"        //model.deletePerson(personToPin); optional because we don\u0027t alter the list","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"        return new CommandResult(String.format(success","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"                ? MESSAGE_ASSIGN_POLICY_SUCCESS : MESSAGE_ASSIGN_PERSON_DUPLICATE, policyToAdd, personToAddTo),","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"                false, false, false, true, false, false);","lastModifiedDate":"2022-10-22"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"Ssatu":87}},{"path":"src/main/java/longtimenosee/logic/commands/PolicyAssignedListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-22"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import java.util.List;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-22"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-22"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-22"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-22"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-22"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-22"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-22"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2022-10-22"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-22"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"public class PolicyAssignedListCommand extends Command {","lastModifiedDate":"2022-10-22"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"    public static final String COMMAND_WORD \u003d \"listAssigned\";","lastModifiedDate":"2022-10-22"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all assigned policies for %1$s\";","lastModifiedDate":"2022-10-22"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of assigned policies for a given person \"","lastModifiedDate":"2022-10-22"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"            + \"Parameters: INDEX of person (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-22"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-22"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    private final Index personIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    public PolicyAssignedListCommand(Index personIndex) {","lastModifiedDate":"2022-10-22"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        this.personIndex \u003d personIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-22"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"        String display \u003d \"\";","lastModifiedDate":"2022-10-22"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-22"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-22"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"        if (personIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-22"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        Person personToList \u003d filteredPersonList.get(personIndex.getZeroBased());","lastModifiedDate":"2022-10-22"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"        Set\u003cAssignedPolicy\u003e assignedPolicySet \u003d personToList.getAssignedPolicies();","lastModifiedDate":"2022-10-22"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        for (AssignedPolicy assignedPolicy: assignedPolicySet) {","lastModifiedDate":"2022-10-22"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"            display +\u003d assignedPolicy + \"\\n\";","lastModifiedDate":"2022-10-22"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personToList.getName()) + \"\\n\" + display,","lastModifiedDate":"2022-10-22"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"                false, true, false);","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-22"}],"authorContributionMap":{"Ssatu":54}},{"path":"src/main/java/longtimenosee/logic/commands/PolicyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"public class PolicyCommand extends Command {","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"    public static final String COMMAND_WORD \u003d \"policies\";","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all currently filtered policies\";","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(MESSAGE_SUCCESS, true, false, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"loyhongshenggg":1,"Ssatu":18,"cowlinn":1,"marcusczh":2}},{"path":"src/main/java/longtimenosee/logic/commands/PolicyDeleteAssignedCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-22"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import java.util.List;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-22"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-22"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-22"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-22"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-22"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-22"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-22"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":" * Policy assign command, used to assign a policy to a client.","lastModifiedDate":"2022-10-22"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-22"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"public class PolicyDeleteAssignedCommand extends Command {","lastModifiedDate":"2022-10-22"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    public static final String COMMAND_WORD \u003d \"deleteAssigned\";","lastModifiedDate":"2022-10-22"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": deletes assigned policy from a person. \"","lastModifiedDate":"2022-10-22"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-22"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"            + \"(Index of client) \"","lastModifiedDate":"2022-10-22"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"            + \"(Index of assigned policy) \"","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"            + \"\\nExample: \" + COMMAND_WORD + \" 1 1\";","lastModifiedDate":"2022-10-22"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_ASSIGN_POLICY_SUCCESS \u003d \"Deleted assigned policy %1$s from Client: %2$s\";","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_ASSIGN_POLICY_FAIL \u003d \"Unable to delete assigned policy %1$s from Client: %2$s\";","lastModifiedDate":"2022-10-22"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"    private final Index targetPersonIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"    private final Index targetPolicyIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"     * Constructor for PolicyAssignCommand.","lastModifiedDate":"2022-10-22"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"     * @param targetPersonIndex","lastModifiedDate":"2022-10-22"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"     * @param targetPolicyIndex","lastModifiedDate":"2022-10-22"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"    public PolicyDeleteAssignedCommand(Index targetPersonIndex, Index targetPolicyIndex) {","lastModifiedDate":"2022-10-22"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        this.targetPersonIndex \u003d targetPersonIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"        this.targetPolicyIndex \u003d targetPolicyIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-22"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-22"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-22"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"        if (targetPersonIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-22"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"        Person personToDeleteFrom \u003d lastShownPersonList.get(targetPersonIndex.getZeroBased());","lastModifiedDate":"2022-10-22"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"        Set\u003cAssignedPolicy\u003e assignedPolicySet \u003d personToDeleteFrom.getAssignedPolicies();","lastModifiedDate":"2022-10-22"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        if (targetPolicyIndex.getZeroBased() \u003e\u003d assignedPolicySet.size()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-22"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"        AssignedPolicy[] assignedPolicyArray \u003d new AssignedPolicy[assignedPolicySet.size()];","lastModifiedDate":"2022-10-22"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"        assignedPolicySet.toArray(assignedPolicyArray);","lastModifiedDate":"2022-10-22"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"        AssignedPolicy assignedPolicy \u003d assignedPolicyArray[targetPolicyIndex.getZeroBased()];","lastModifiedDate":"2022-10-22"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"        boolean success \u003d personToDeleteFrom.removePolicy(assignedPolicy);","lastModifiedDate":"2022-10-22"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"        return new CommandResult(String.format(success","lastModifiedDate":"2022-10-22"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"                ? MESSAGE_ASSIGN_POLICY_SUCCESS : MESSAGE_ASSIGN_POLICY_FAIL, assignedPolicy, personToDeleteFrom),","lastModifiedDate":"2022-10-22"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"                false, false, false, true, false, false);","lastModifiedDate":"2022-10-22"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-22"}],"authorContributionMap":{"loyhongshenggg":1,"Ssatu":69}},{"path":"src/main/java/longtimenosee/logic/commands/PolicyDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import java.util.List;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-22"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-22"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"public class PolicyDeleteCommand extends Command {","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    public static final String COMMAND_WORD \u003d \"deletePolicy\";","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"            + \": Deletes the policy identified by the index number used in the displayed policy list.\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_DELETE_POLICY_SUCCESS \u003d \"Deleted policy: %1$s\";","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"    public PolicyDeleteCommand(Index targetIndex) {","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"        List\u003cPolicy\u003e lastShownList \u003d model.getFilteredPolicyList();","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        List\u003cPerson\u003e personList \u003d model.getAddressBook().getPersonList();","lastModifiedDate":"2022-10-22"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        Policy policyToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        model.deletePolicy(policyToDelete);","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"        for (Person person:personList) {","lastModifiedDate":"2022-10-22"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"            Set\u003cAssignedPolicy\u003e assignedPolicies \u003d person.getAssignedPolicies();","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"            for (AssignedPolicy assignedPolicy:assignedPolicies) {","lastModifiedDate":"2022-10-22"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"                if (assignedPolicy.isSamePolicy(policyToDelete)) {","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"                    person.removePolicy(assignedPolicy);","lastModifiedDate":"2022-10-22"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"                }","lastModifiedDate":"2022-10-22"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"            }","lastModifiedDate":"2022-10-22"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_POLICY_SUCCESS, policyToDelete),","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"loyhongshenggg"},"content":"                true, false, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"                || (other instanceof PolicyDeleteCommand // instanceof handles nulls","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 targetIndex.equals(((PolicyDeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"loyhongshenggg":1,"Ssatu":66}},{"path":"src/main/java/longtimenosee/logic/commands/PolicyListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.model.Model.PREDICATE_SHOW_ALL_POLICIES;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"public class PolicyListCommand extends Command {","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"    public static final String COMMAND_WORD \u003d \"allPolicies\";","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all policies in LTNS.\";","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"        model.updateFilteredPolicyList(PREDICATE_SHOW_ALL_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(MESSAGE_SUCCESS, true, false, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"loyhongshenggg":2,"Ssatu":21,"cowlinn":1}},{"path":"src/main/java/longtimenosee/logic/commands/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-09-30"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Birthday.BIRTHDAY_COMPARATOR;","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Birthday.SORT_BIRTHDAY;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Email.EMAIL_COMPARATOR;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Email.SORT_EMAIL;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Income.INCOME_COMPARATOR;","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Income.SORT_INCOME;","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Name.NAME_COMPARATOR;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Name.SORT_NAME;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Person.DEFAULT_COMPARATOR;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Person.SORT_DEFAULT;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Phone.PHONE_COMPARATOR;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.person.Phone.SORT_PHONE;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.RiskAppetite.RISK_APPETITE_COMPARATOR;","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.RiskAppetite.SORT_RISK_APPETITE;","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-09-30"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":" * Sorts the address book","lastModifiedDate":"2022-09-30"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-09-30"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2022-09-30"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2022-09-30"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"    private static final String DEFAULT_SUCCESS_MESSAGE \u003d \"Clients sorted in default order (based on time added)\";","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    private static final String INVALID_MESSAGE \u003d \"There is either no such client details \"","lastModifiedDate":"2022-09-30"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"                                                    + \"or the sorting metric is invalid.\";","lastModifiedDate":"2022-09-30"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"    private static final String MESSAGE_SUCCESS \u003d \"Clients sorted by \";","lastModifiedDate":"2022-09-30"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"    private String toSort;","lastModifiedDate":"2022-09-30"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-09-30"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"     * Creates a sort command to sort the address book according to","lastModifiedDate":"2022-09-30"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"     * user specified metric","lastModifiedDate":"2022-09-30"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"     * @param toSort user specified metric","lastModifiedDate":"2022-09-30"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-09-30"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"    public SortCommand(String toSort) {","lastModifiedDate":"2022-09-30"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"        requireNonNull(toSort);","lastModifiedDate":"2022-09-30"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        this.toSort \u003d toSort;","lastModifiedDate":"2022-09-30"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-09-30"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-09-30"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-09-30"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-09-30"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"        Comparator\u003cPerson\u003e comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"        switch (toSort) {","lastModifiedDate":"2022-09-30"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"        case SORT_EMAIL:","lastModifiedDate":"2022-09-30"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"            comparator \u003d EMAIL_COMPARATOR;","lastModifiedDate":"2022-09-30"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"            break;","lastModifiedDate":"2022-09-30"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"        case SORT_NAME:","lastModifiedDate":"2022-09-30"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"            comparator \u003d NAME_COMPARATOR;","lastModifiedDate":"2022-09-30"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"            break;","lastModifiedDate":"2022-09-30"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"        case SORT_PHONE:","lastModifiedDate":"2022-09-30"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"            comparator \u003d PHONE_COMPARATOR;","lastModifiedDate":"2022-09-30"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"            break;","lastModifiedDate":"2022-09-30"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"        case SORT_DEFAULT:","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"            comparator \u003d DEFAULT_COMPARATOR;","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"            break;","lastModifiedDate":"2022-10-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"        case SORT_BIRTHDAY:","lastModifiedDate":"2022-10-17"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"            comparator \u003d BIRTHDAY_COMPARATOR;","lastModifiedDate":"2022-10-17"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"            break;","lastModifiedDate":"2022-10-17"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"        case SORT_INCOME:","lastModifiedDate":"2022-10-17"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"            comparator \u003d INCOME_COMPARATOR;","lastModifiedDate":"2022-10-17"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"            break;","lastModifiedDate":"2022-10-17"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"        case SORT_RISK_APPETITE:","lastModifiedDate":"2022-10-17"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"            comparator \u003d RISK_APPETITE_COMPARATOR;","lastModifiedDate":"2022-10-17"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"            break;","lastModifiedDate":"2022-10-17"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"        default:","lastModifiedDate":"2022-09-30"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"            throw new CommandException(INVALID_MESSAGE);","lastModifiedDate":"2022-09-30"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-09-30"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2022-09-30"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"        model.sort(comparator);","lastModifiedDate":"2022-09-30"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"        if (this.toSort.equals(SORT_DEFAULT)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":89,"author":{"gitId":"loyhongshenggg"},"content":"            return new CommandResult(DEFAULT_SUCCESS_MESSAGE, false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"        } else {","lastModifiedDate":"2022-10-17"},{"lineNumber":91,"author":{"gitId":"loyhongshenggg"},"content":"            return new CommandResult(MESSAGE_SUCCESS + this.toSort, false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":92,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-09-30"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":94,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":95,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":96,"author":{"gitId":"ReubenChay"},"content":"     * Returns the invalid message when providing an invalid sorting metric","lastModifiedDate":"2022-10-20"},{"lineNumber":97,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":98,"author":{"gitId":"ReubenChay"},"content":"    public static String getInvalidMessage() {","lastModifiedDate":"2022-10-20"},{"lineNumber":99,"author":{"gitId":"ReubenChay"},"content":"        return INVALID_MESSAGE;","lastModifiedDate":"2022-10-20"},{"lineNumber":100,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":101,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":102,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-09-30"},{"lineNumber":103,"author":{"gitId":"ReubenChay"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-09-30"},{"lineNumber":104,"author":{"gitId":"ReubenChay"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-09-30"},{"lineNumber":105,"author":{"gitId":"ReubenChay"},"content":"            return true;","lastModifiedDate":"2022-09-30"},{"lineNumber":106,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-09-30"},{"lineNumber":107,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":108,"author":{"gitId":"ReubenChay"},"content":"        if (!(other instanceof SortCommand)) {","lastModifiedDate":"2022-09-30"},{"lineNumber":109,"author":{"gitId":"ReubenChay"},"content":"            return false;","lastModifiedDate":"2022-09-30"},{"lineNumber":110,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-09-30"},{"lineNumber":111,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":112,"author":{"gitId":"ReubenChay"},"content":"        SortCommand e \u003d (SortCommand) other;","lastModifiedDate":"2022-09-30"},{"lineNumber":113,"author":{"gitId":"ReubenChay"},"content":"        return this.toSort \u003d\u003d ((SortCommand) other).toSort;","lastModifiedDate":"2022-09-30"},{"lineNumber":114,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-09-30"},{"lineNumber":115,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":116,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":117,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-09-30"}],"authorContributionMap":{"ReubenChay":103,"loyhongshenggg":2,"marcusczh":12}},{"path":"src/main/java/longtimenosee/logic/commands/ViewIncomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":" * Allows user to view projected 3 year income upon command.","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"public class ViewIncomeCommand extends Command {","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String COMMAND_WORD \u003d \"viewIncome\";","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \u003cyear\u003e\"","lastModifiedDate":"2022-10-30"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"            + \": chooses the year for viewing income\"","lastModifiedDate":"2022-10-30"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"            + \"\\nNote: Year should in format YYYY e.g. 2000\";","lastModifiedDate":"2022-10-30"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"    private final int targetYear;","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"    public ViewIncomeCommand(int targetYear) {","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"        this.targetYear \u003d targetYear;","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"    @Override","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"        LocalDate date \u003d LocalDate.of(targetYear, 1, 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"        FinancialAdvisorIncome income \u003d model.getIncome();","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"        income.threeYearIncome(date, model);","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"        float result \u003d income.calculateIncome(date, model);","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"        String message \u003d \"Income for year \" + targetYear + \" is \" + result;","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"        return new CommandResult(message, false, false, false,","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"                false, false, true);","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":33,"cowlinn":2}},{"path":"src/main/java/longtimenosee/logic/commands/ViewPinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-09"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PinnedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-09"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":" * Lists all persons pinned to the user.","lastModifiedDate":"2022-10-09"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-09"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"public class ViewPinCommand extends Command {","lastModifiedDate":"2022-10-09"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String COMMAND_WORD \u003d \"viewPin\";","lastModifiedDate":"2022-10-09"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": pins the person to start of list\\n\"","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"            + \"Parameters: INDEX...\\n\"","lastModifiedDate":"2022-10-09"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"            + \"Example: \" + COMMAND_WORD + \"Alice\";","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"    private final PinnedPersonPredicate predicate;","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"    public ViewPinCommand(PinnedPersonPredicate p) {","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"        this.predicate \u003d p;","lastModifiedDate":"2022-10-09"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-09"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-10-09"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-09"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"                false, true, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-09"}],"authorContributionMap":{"loyhongshenggg":30,"Ssatu":1,"marcusczh":5}},{"path":"src/main/java/longtimenosee/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"-":16,"marcusczh":1}},{"path":"src/main/java/longtimenosee/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_INCOME;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_RISK_APPETITE;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.AddCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"                        PREFIX_BIRTHDAY, PREFIX_INCOME, PREFIX_RISK_APPETITE);","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_BIRTHDAY,","lastModifiedDate":"2022-10-13"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"                PREFIX_INCOME, PREFIX_RISK_APPETITE)","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        Income income \u003d ParserUtil.parseIncome(argMultimap.getValue(PREFIX_INCOME).get());","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"        RiskAppetite ra \u003d ParserUtil.parseRA(argMultimap.getValue(PREFIX_RISK_APPETITE).get());","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, birthday, income, ra);","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"cowlinn":14,"-":41,"marcusczh":15}},{"path":"src/main/java/longtimenosee/logic/parser/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_END_TIME;","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_START_TIME;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.logic.commands.AddEventCommand;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Date;","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Description;","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Duration;","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-22"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":" * Parses input arguments and creates a new AddEventCommand object","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"     * and returns an AddEventCommand object for execution.","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"     * @throws ParseException if the user input does not conform to  the expected format","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION,","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"                        PREFIX_NAME, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME);","lastModifiedDate":"2022-10-22"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_NAME, PREFIX_DATE,","lastModifiedDate":"2022-10-22"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"                PREFIX_START_TIME, PREFIX_END_TIME)","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2022-10-22"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_START_TIME).get(),","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"                argMultimap.getValue(PREFIX_END_TIME).get());","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"        Event event \u003d new Event(description, name, date, duration);","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"        return new AddEventCommand(event);","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"cowlinn":55}},{"path":"src/main/java/longtimenosee/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.AddCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.logic.commands.AddEventCommand;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.CalendarCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ClearCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.Command;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.DeleteCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.DeleteEventCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.logic.commands.EventCommand;","lastModifiedDate":"2022-10-26"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ExitCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindEventCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindPolicyCommand;","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.HelpCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ListCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.logic.commands.ListEventsCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.PersonCommand;","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.PinCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyAddCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyAssignCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyAssignedListCommand;","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.PolicyCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyDeleteAssignedCommand;","lastModifiedDate":"2022-10-22"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyDeleteCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyListCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.SortCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.logic.commands.ViewIncomeCommand;","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ViewPinCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"marcusczh"},"content":"        case FindEventCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marcusczh"},"content":"            return new FindEventCommandParser().parse(arguments);","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marcusczh"},"content":"        case FindPolicyCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-14"},{"lineNumber":86,"author":{"gitId":"marcusczh"},"content":"            return new FindPolicyCommandParser().parse(arguments);","lastModifiedDate":"2022-10-14"},{"lineNumber":87,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":97,"author":{"gitId":"loyhongshenggg"},"content":"        case ViewPinCommand.COMMAND_WORD: //for pinning, creates PinCommandParser object","lastModifiedDate":"2022-10-09"},{"lineNumber":98,"author":{"gitId":"loyhongshenggg"},"content":"            return new ViewPinCommandParser().parse(arguments);","lastModifiedDate":"2022-10-09"},{"lineNumber":99,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":100,"author":{"gitId":"loyhongshenggg"},"content":"        case ViewIncomeCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-20"},{"lineNumber":101,"author":{"gitId":"loyhongshenggg"},"content":"            return new ViewIncomeCommandParser().parse(arguments);","lastModifiedDate":"2022-10-20"},{"lineNumber":102,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":103,"author":{"gitId":"loyhongshenggg"},"content":"        case PinCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-09"},{"lineNumber":104,"author":{"gitId":"loyhongshenggg"},"content":"            return new PinCommandParser().parse(arguments);","lastModifiedDate":"2022-10-09"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":106,"author":{"gitId":"ReubenChay"},"content":"        case SortCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-30"},{"lineNumber":107,"author":{"gitId":"ReubenChay"},"content":"            return new SortCommand(arguments.trim());","lastModifiedDate":"2022-09-30"},{"lineNumber":108,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"        case PolicyAddCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"            return new PolicyAddCommandParser().parse(arguments);","lastModifiedDate":"2022-10-18"},{"lineNumber":111,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":112,"author":{"gitId":"Ssatu"},"content":"        case PolicyDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":113,"author":{"gitId":"Ssatu"},"content":"            return new PolicyDeleteCommandParser().parse(arguments);","lastModifiedDate":"2022-10-18"},{"lineNumber":114,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":115,"author":{"gitId":"Ssatu"},"content":"        case PolicyListCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":116,"author":{"gitId":"Ssatu"},"content":"            return new PolicyListCommand();","lastModifiedDate":"2022-10-18"},{"lineNumber":117,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"Ssatu"},"content":"        case PolicyCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"Ssatu"},"content":"            return new PolicyCommand();","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":121,"author":{"gitId":"ReubenChay"},"content":"        case CalendarCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":122,"author":{"gitId":"ReubenChay"},"content":"            return new CalendarCommand();","lastModifiedDate":"2022-10-18"},{"lineNumber":123,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":124,"author":{"gitId":"Ssatu"},"content":"        case PersonCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-11"},{"lineNumber":125,"author":{"gitId":"Ssatu"},"content":"            return new PersonCommand();","lastModifiedDate":"2022-10-11"},{"lineNumber":126,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":127,"author":{"gitId":"Ssatu"},"content":"        case PolicyAssignCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":128,"author":{"gitId":"Ssatu"},"content":"            return new PolicyAssignCommandParser().parse(arguments);","lastModifiedDate":"2022-10-18"},{"lineNumber":129,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":130,"author":{"gitId":"Ssatu"},"content":"        case PolicyAssignedListCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-22"},{"lineNumber":131,"author":{"gitId":"Ssatu"},"content":"            return new PolicyAssignedListCommandParser().parse(arguments);","lastModifiedDate":"2022-10-22"},{"lineNumber":132,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":133,"author":{"gitId":"Ssatu"},"content":"        case PolicyDeleteAssignedCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-22"},{"lineNumber":134,"author":{"gitId":"Ssatu"},"content":"            return new PolicyAssignedDeleteCommandParser().parse(arguments);","lastModifiedDate":"2022-10-22"},{"lineNumber":135,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":136,"author":{"gitId":"cowlinn"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-16"},{"lineNumber":137,"author":{"gitId":"cowlinn"},"content":"            return new AddEventCommandParser().parse(arguments);","lastModifiedDate":"2022-10-16"},{"lineNumber":138,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":139,"author":{"gitId":"ReubenChay"},"content":"        case DeleteEventCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":140,"author":{"gitId":"ReubenChay"},"content":"            return new DeleteEventCommandParser().parse(arguments);","lastModifiedDate":"2022-10-18"},{"lineNumber":141,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"        case ListEventsCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"            return new ListEventsCommand();","lastModifiedDate":"2022-10-18"},{"lineNumber":144,"author":{"gitId":"cowlinn"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-26"},{"lineNumber":145,"author":{"gitId":"cowlinn"},"content":"            return new EventCommand();","lastModifiedDate":"2022-10-26"},{"lineNumber":146,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":11,"loyhongshenggg":11,"Ssatu":32,"cowlinn":9,"-":63,"marcusczh":26}},{"path":"src/main/java/longtimenosee/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"-":59,"marcusczh":1}},{"path":"src/main/java/longtimenosee/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"-":147,"marcusczh":1}},{"path":"src/main/java/longtimenosee/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"    /* Person prefix definitions */","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");","lastModifiedDate":"2022-09-26"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public static final Prefix PREFIX_INCOME \u003d new Prefix(\"i/\");","lastModifiedDate":"2022-09-26"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"    public static final Prefix PREFIX_RISK_APPETITE \u003d new Prefix(\"ra/\");","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    /* Policy prefix definitions */","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"ti/\");","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"cmp/\");","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"    public static final Prefix PREFIX_COMMISSION \u003d new Prefix(\"cms/\");","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    public static final Prefix PREFIX_COVERAGES \u003d new Prefix(\"cov/\");","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    public static final Prefix PREFIX_PREMIUM \u003d new Prefix(\"pr/\");","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public static final Prefix PREFIX_START \u003d new Prefix(\"sd/\");","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    public static final Prefix PREFIX_END \u003d new Prefix(\"ed/\");","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    /* Event prefix definitions */","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");","lastModifiedDate":"2022-10-22"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"ReubenChay":1,"Ssatu":9,"cowlinn":15,"-":13,"marcusczh":1}},{"path":"src/main/java/longtimenosee/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.DeleteCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"-":24,"marcusczh":5}},{"path":"src/main/java/longtimenosee/logic/parser/DeleteEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.DeleteEventCommand;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":" * Parses input arguments and creates a new DeleteEventCommand object","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"     * and returns a DeleteEventCommand object for execution.","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"        try {","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"            return new DeleteEventCommand(index);","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"ReubenChay":28}},{"path":"src/main/java/longtimenosee/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_INCOME;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_RISK_APPETITE;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"                        PREFIX_BIRTHDAY, PREFIX_INCOME, PREFIX_RISK_APPETITE);","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));","lastModifiedDate":"2022-10-17"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"        if (argMultimap.getValue(PREFIX_INCOME).isPresent()) {","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"            editPersonDescriptor.setIncome(ParserUtil.parseIncome(argMultimap.getValue(PREFIX_INCOME).get()));","lastModifiedDate":"2022-10-17"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"        if (argMultimap.getValue(PREFIX_RISK_APPETITE).isPresent()) {","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"            editPersonDescriptor.setRiskAppetite(ParserUtil.parseRA(argMultimap.getValue(PREFIX_RISK_APPETITE).get()));","lastModifiedDate":"2022-10-17"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"cowlinn":15,"-":69,"marcusczh":12}},{"path":"src/main/java/longtimenosee/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMPANY;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COVERAGES;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_INCOME;","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_RISK_APPETITE;","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.AddressContainsInputPredicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.BirthdayMatchesInputPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.EmailMatchesInputPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.IncomeMatchesInputPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PhoneContainsNumberPredicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PolicyCompanyMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PolicyCoverageMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PolicyTitleContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.RiskAppetiteMatchesInputPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.TagContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-05"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-05"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_EMAIL,","lastModifiedDate":"2022-10-05"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"                        PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_INCOME, PREFIX_RISK_APPETITE, PREFIX_TITLE,","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"                        PREFIX_COVERAGES, PREFIX_COMPANY);","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"        if (!isAtLeastOnePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_EMAIL,","lastModifiedDate":"2022-10-05"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"                PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_INCOME, PREFIX_RISK_APPETITE, PREFIX_TITLE, PREFIX_COVERAGES,","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"                PREFIX_COMPANY)","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-14"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"        List\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d new ArrayList\u003cPredicate\u003cPerson\u003e\u003e();","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"        checkNamePrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"        checkPhonePrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"        checkAddressPrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"        checkEmailPrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"        checkTagPrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"        checkBirthdayPrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"        checkIncomePrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"        checkRiskAppetitePrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marcusczh"},"content":"        checkPolicyTitlePrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"marcusczh"},"content":"        checkPolicyCoveragePrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"marcusczh"},"content":"        checkPolicyCompanyPrefix(argMultimap, predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"        return new FindCommand(predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marcusczh"},"content":"     * Checks if there is at least one of the specified prefixes is present in the argument multimap.","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"marcusczh"},"content":"     * @param argumentMultimap contains the tokenized arguments","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"marcusczh"},"content":"     * @param prefixes to be checked","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marcusczh"},"content":"     * @return boolean to indicate if any prefix is present","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marcusczh"},"content":"    private static boolean isAtLeastOnePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-11-01"},{"lineNumber":86,"author":{"gitId":"marcusczh"},"content":"        for (Prefix prefix : prefixes) {","lastModifiedDate":"2022-10-21"},{"lineNumber":87,"author":{"gitId":"marcusczh"},"content":"            if (argumentMultimap.getValue(prefix).isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marcusczh"},"content":"                return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marcusczh"},"content":"        return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":93,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"marcusczh"},"content":"    private static void checkNamePrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2022-10-05"},{"lineNumber":97,"author":{"gitId":"marcusczh"},"content":"            String trimmedArgs \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).fullName.trim();","lastModifiedDate":"2022-10-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":99,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2022-10-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":101,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":103,"author":{"gitId":"marcusczh"},"content":"    private static void checkPhonePrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":104,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":105,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2022-10-05"},{"lineNumber":106,"author":{"gitId":"marcusczh"},"content":"            String phoneNumber \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()).value;","lastModifiedDate":"2022-10-05"},{"lineNumber":107,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new PhoneContainsNumberPredicate(phoneNumber));","lastModifiedDate":"2022-10-29"},{"lineNumber":108,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-05"},{"lineNumber":109,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":110,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":111,"author":{"gitId":"marcusczh"},"content":"    private static void checkAddressPrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":112,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":113,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2022-10-05"},{"lineNumber":114,"author":{"gitId":"marcusczh"},"content":"            String address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()).value;","lastModifiedDate":"2022-10-05"},{"lineNumber":115,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new AddressContainsInputPredicate(address));","lastModifiedDate":"2022-10-29"},{"lineNumber":116,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-05"},{"lineNumber":117,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":118,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":119,"author":{"gitId":"marcusczh"},"content":"    private static void checkEmailPrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":120,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":121,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2022-10-05"},{"lineNumber":122,"author":{"gitId":"marcusczh"},"content":"            String email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()).value;","lastModifiedDate":"2022-10-05"},{"lineNumber":123,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new EmailMatchesInputPredicate(email));","lastModifiedDate":"2022-10-14"},{"lineNumber":124,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-05"},{"lineNumber":125,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":126,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":127,"author":{"gitId":"marcusczh"},"content":"    private static void checkTagPrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":128,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":129,"author":{"gitId":"marcusczh"},"content":"        if (!(argMultimap.getAllValues(PREFIX_TAG).isEmpty())) {","lastModifiedDate":"2022-10-21"},{"lineNumber":130,"author":{"gitId":"marcusczh"},"content":"            List\u003cString\u003e tagKeywords \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2022-10-21"},{"lineNumber":131,"author":{"gitId":"marcusczh"},"content":"            List\u003cString\u003e parsedKeywords \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":132,"author":{"gitId":"marcusczh"},"content":"            for (String tagKeyword : tagKeywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":133,"author":{"gitId":"marcusczh"},"content":"                parsedKeywords.add(ParserUtil.parseTag(tagKeyword).tagName.trim());","lastModifiedDate":"2022-10-21"},{"lineNumber":134,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":135,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new TagContainsKeywordsPredicate(parsedKeywords));","lastModifiedDate":"2022-10-21"},{"lineNumber":136,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":137,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":138,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":139,"author":{"gitId":"marcusczh"},"content":"    private static void checkBirthdayPrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":140,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":141,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":142,"author":{"gitId":"marcusczh"},"content":"            String birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()).value;","lastModifiedDate":"2022-10-15"},{"lineNumber":143,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new BirthdayMatchesInputPredicate(birthday));","lastModifiedDate":"2022-10-15"},{"lineNumber":144,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":145,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":146,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":147,"author":{"gitId":"marcusczh"},"content":"    private static void checkIncomePrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":148,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":149,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_INCOME).isPresent()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":150,"author":{"gitId":"marcusczh"},"content":"            String income \u003d ParserUtil.parseIncome(argMultimap.getValue(PREFIX_INCOME).get()).value;","lastModifiedDate":"2022-10-15"},{"lineNumber":151,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new IncomeMatchesInputPredicate(income));","lastModifiedDate":"2022-10-15"},{"lineNumber":152,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":153,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":154,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":155,"author":{"gitId":"marcusczh"},"content":"    private static void checkRiskAppetitePrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":156,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":157,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_RISK_APPETITE).isPresent()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":158,"author":{"gitId":"marcusczh"},"content":"            String riskAppetite \u003d ParserUtil.parseRA(argMultimap.getValue(PREFIX_RISK_APPETITE).get()).value;","lastModifiedDate":"2022-10-15"},{"lineNumber":159,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new RiskAppetiteMatchesInputPredicate(riskAppetite));","lastModifiedDate":"2022-10-15"},{"lineNumber":160,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":161,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":162,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":163,"author":{"gitId":"marcusczh"},"content":"    private static void checkPolicyTitlePrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":164,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":165,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":166,"author":{"gitId":"marcusczh"},"content":"            String trimmedArgs \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()).fullTitle.trim();","lastModifiedDate":"2022-10-21"},{"lineNumber":167,"author":{"gitId":"marcusczh"},"content":"            String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2022-10-21"},{"lineNumber":168,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new PolicyTitleContainsKeywordsPredicate(List.of(titleKeywords)));","lastModifiedDate":"2022-10-21"},{"lineNumber":169,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":170,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":171,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":172,"author":{"gitId":"marcusczh"},"content":"    private static void checkPolicyCoveragePrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":173,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":174,"author":{"gitId":"marcusczh"},"content":"        if (!(argMultimap.getAllValues(PREFIX_COVERAGES).isEmpty())) {","lastModifiedDate":"2022-10-21"},{"lineNumber":175,"author":{"gitId":"marcusczh"},"content":"            List\u003cString\u003e coverageKeywords \u003d argMultimap.getAllValues(PREFIX_COVERAGES);","lastModifiedDate":"2022-10-21"},{"lineNumber":176,"author":{"gitId":"marcusczh"},"content":"            List\u003cString\u003e parsedKeywords \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":177,"author":{"gitId":"marcusczh"},"content":"            for (String coverageKeyword : coverageKeywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":178,"author":{"gitId":"marcusczh"},"content":"                parsedKeywords.add(ParserUtil.parseCoverage(coverageKeyword).coverageType.trim());","lastModifiedDate":"2022-10-21"},{"lineNumber":179,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-05"},{"lineNumber":180,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new PolicyCoverageMatchesInputPredicate(parsedKeywords));","lastModifiedDate":"2022-10-21"},{"lineNumber":181,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":182,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":183,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":184,"author":{"gitId":"marcusczh"},"content":"    private static void checkPolicyCompanyPrefix(ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicates)","lastModifiedDate":"2022-10-21"},{"lineNumber":185,"author":{"gitId":"marcusczh"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":186,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":187,"author":{"gitId":"marcusczh"},"content":"            String company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()).value;","lastModifiedDate":"2022-10-21"},{"lineNumber":188,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new PolicyCompanyMatchesInputPredicate(company));","lastModifiedDate":"2022-10-21"},{"lineNumber":189,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-05"},{"lineNumber":190,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"-":22,"marcusczh":169}},{"path":"src/main/java/longtimenosee/logic/parser/FindEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindEventCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.predicate.DescriptionContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.predicate.EventDateMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.predicate.NameInEventContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":" * Parses input arguments and creates a new FindEventCommand object","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"     * Parses the given {@code String} of arguments in the context of the FindEventCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"     * and returns a FindEventCommand object for execution.","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    public FindEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_NAME, PREFIX_DATE);","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        if (!isAtLeastOnePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_NAME, PREFIX_DATE)","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        List\u003cPredicate\u003cEvent\u003e\u003e predicates \u003d new ArrayList\u003cPredicate\u003cEvent\u003e\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"            String trimmedDescription \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get())","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"                    .retrieveDescription().trim();","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new DescriptionContainsKeywordsPredicate(trimmedDescription));","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2022-10-24"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"            String trimmedArgs \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).fullName.trim();","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new NameInEventContainsKeywordsPredicate(List.of(nameKeywords)));","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"            String birthday \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()).value;","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new EventDateMatchesInputPredicate(birthday));","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"        return new FindEventCommand(predicates);","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"     * Checks if there is at least one of the specified prefixes is present in the argument multimap.","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"     * @param argumentMultimap contains the tokenized arguments","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"     * @param prefixes to be checked","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"     * @return boolean to indicate if any prefix is present","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"    private static boolean isAtLeastOnePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"        for (Prefix prefix : prefixes) {","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marcusczh"},"content":"            if (argumentMultimap.getValue(prefix).isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"marcusczh"},"content":"                return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"        return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":77}},{"path":"src/main/java/longtimenosee/logic/parser/FindPolicyCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMPANY;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COVERAGES;","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindPolicyCommand;","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.predicate.CompanyMatchesInputPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.predicate.CoverageMatchesInputPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.predicate.TitleContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":" * Parses input arguments and creates a new FindPolicyCommand object","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"public class FindPolicyCommandParser implements Parser\u003cFindPolicyCommand\u003e {","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPolicyCommand","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"     * and returns a FindPolicyCommand object for execution.","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    public FindPolicyCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-14"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_COMPANY, PREFIX_COVERAGES);","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        if (!isAtLeastOnePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_COMPANY, PREFIX_COVERAGES)","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPolicyCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-14"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        List\u003cPredicate\u003cPolicy\u003e\u003e predicates \u003d new ArrayList\u003cPredicate\u003cPolicy\u003e\u003e();","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"            String trimmedArgs \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()).fullTitle.trim();","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"            String[] titleKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new TitleContainsKeywordsPredicate(List.of(titleKeywords)));","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {","lastModifiedDate":"2022-10-14"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"            String company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()).value;","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new CompanyMatchesInputPredicate(company));","lastModifiedDate":"2022-10-14"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        if (!(argMultimap.getAllValues(PREFIX_COVERAGES).isEmpty())) {","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"            List\u003cString\u003e coverageKeywords \u003d argMultimap.getAllValues(PREFIX_COVERAGES);","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"            List\u003cString\u003e parsedKeywords \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"            for (String coverageKeyword : coverageKeywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"                parsedKeywords.add(ParserUtil.parseCoverage(coverageKeyword).coverageType.trim());","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"            predicates.add(new CoverageMatchesInputPredicate(parsedKeywords));","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"        return new FindPolicyCommand(predicates);","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"     * Checks if there is at least one of the specified prefixes is present in the argument multimap.","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"     * @param argumentMultimap contains the tokenized arguments","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"     * @param prefixes to be checked","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"     * @return boolean to indicate if any prefix is present","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"marcusczh"},"content":"    private static boolean isAtLeastOnePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"marcusczh"},"content":"        for (Prefix prefix : prefixes) {","lastModifiedDate":"2022-10-14"},{"lineNumber":74,"author":{"gitId":"marcusczh"},"content":"            if (argumentMultimap.getValue(prefix).isPresent()) {","lastModifiedDate":"2022-10-14"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"                return true;","lastModifiedDate":"2022-10-14"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-14"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":78,"author":{"gitId":"marcusczh"},"content":"        return false;","lastModifiedDate":"2022-10-14"},{"lineNumber":79,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":80,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"marcusczh":80}},{"path":"src/main/java/longtimenosee/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.Command;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"-":13,"marcusczh":3}},{"path":"src/main/java/longtimenosee/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Date;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Description;","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Duration;","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Commission;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Company;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.PolicyDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Title;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"     * @throws ParseException if the given {@code name} is invalid or too long.","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"        if (!Name.isValidLength(trimmedName)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Name.LENGTH_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":139,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":140,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-26"},{"lineNumber":141,"author":{"gitId":"cowlinn"},"content":"     * Parses {@code String birthday} into a {@code Birthday}.","lastModifiedDate":"2022-09-26"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-09-26"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-26"},{"lineNumber":144,"author":{"gitId":"cowlinn"},"content":"    public static Birthday parseBirthday(String birthday) throws ParseException {","lastModifiedDate":"2022-09-28"},{"lineNumber":145,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(birthday);","lastModifiedDate":"2022-09-26"},{"lineNumber":146,"author":{"gitId":"cowlinn"},"content":"        String trimmedBirthday \u003d birthday.trim();","lastModifiedDate":"2022-09-26"},{"lineNumber":147,"author":{"gitId":"cowlinn"},"content":"        if (!Birthday.isValidFormat(trimmedBirthday)) {","lastModifiedDate":"2022-09-28"},{"lineNumber":148,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Birthday.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-09-28"},{"lineNumber":149,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":150,"author":{"gitId":"cowlinn"},"content":"        if (!Birthday.isValidDate(trimmedBirthday)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":151,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Birthday.RANGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":152,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":153,"author":{"gitId":"cowlinn"},"content":"        if (!Birthday.isReasonableBirthday(trimmedBirthday)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":154,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Birthday.MESSAGE_DATE_CONSTRAINTS);","lastModifiedDate":"2022-09-28"},{"lineNumber":155,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":156,"author":{"gitId":"cowlinn"},"content":"        return new Birthday(birthday);","lastModifiedDate":"2022-09-28"},{"lineNumber":157,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":158,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":159,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-26"},{"lineNumber":160,"author":{"gitId":"cowlinn"},"content":"     * Parses {@code String income} into a {@code income}.","lastModifiedDate":"2022-09-26"},{"lineNumber":161,"author":{"gitId":"cowlinn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-09-26"},{"lineNumber":162,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-26"},{"lineNumber":163,"author":{"gitId":"cowlinn"},"content":"    public static Income parseIncome(String income) throws ParseException {","lastModifiedDate":"2022-09-28"},{"lineNumber":164,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(income);","lastModifiedDate":"2022-09-26"},{"lineNumber":165,"author":{"gitId":"cowlinn"},"content":"        String trimmedIncome \u003d income.trim();","lastModifiedDate":"2022-09-26"},{"lineNumber":166,"author":{"gitId":"cowlinn"},"content":"        if (!Income.isValidFormat(trimmedIncome)) {","lastModifiedDate":"2022-09-28"},{"lineNumber":167,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Income.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-09-28"},{"lineNumber":168,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-30"},{"lineNumber":169,"author":{"gitId":"cowlinn"},"content":"        if (!Income.isPositiveIncome(trimmedIncome)) {","lastModifiedDate":"2022-10-30"},{"lineNumber":170,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Income.VALUE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-30"},{"lineNumber":171,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":172,"author":{"gitId":"cowlinn"},"content":"        return new Income(income);","lastModifiedDate":"2022-09-28"},{"lineNumber":173,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":174,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":175,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-26"},{"lineNumber":176,"author":{"gitId":"cowlinn"},"content":"     * Parses {@code String RA} into a {@code RiskAppetite}.","lastModifiedDate":"2022-09-26"},{"lineNumber":177,"author":{"gitId":"cowlinn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-09-26"},{"lineNumber":178,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-26"},{"lineNumber":179,"author":{"gitId":"cowlinn"},"content":"    public static RiskAppetite parseRA(String ra) throws ParseException {","lastModifiedDate":"2022-09-28"},{"lineNumber":180,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(ra);","lastModifiedDate":"2022-09-26"},{"lineNumber":181,"author":{"gitId":"cowlinn"},"content":"        String trimmedRiskAppetiteTag \u003d ra.trim();","lastModifiedDate":"2022-09-26"},{"lineNumber":182,"author":{"gitId":"cowlinn"},"content":"        if (!RiskAppetite.isValidFormat(trimmedRiskAppetiteTag)) {","lastModifiedDate":"2022-09-29"},{"lineNumber":183,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(RiskAppetite.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-09-28"},{"lineNumber":184,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":185,"author":{"gitId":"cowlinn"},"content":"        return new RiskAppetite(ra);","lastModifiedDate":"2022-09-28"},{"lineNumber":186,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":187,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"Ssatu"},"content":"     * Parses {@code String Title} into a {@code Title}.","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"Ssatu"},"content":"     * Checks if the title is a valid title.","lastModifiedDate":"2022-10-26"},{"lineNumber":191,"author":{"gitId":"Ssatu"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"Ssatu"},"content":"    public static Title parseTitle(String title) throws ParseException {","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(title);","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"Ssatu"},"content":"        String trimmedTitleTag \u003d title.trim();","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"Ssatu"},"content":"        if (!Title.isValidTitle(trimmedTitleTag)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(Title.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"Ssatu"},"content":"        return new Title(trimmedTitleTag);","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"Ssatu"},"content":"     * Parses {@code String company} into a {@code Company}.","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"Ssatu"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"Ssatu"},"content":"    public static Company parseCompany(String company) throws ParseException {","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(company);","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"Ssatu"},"content":"        String trimmedCompanyTag \u003d company.trim();","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"marcusczh"},"content":"        if (!Company.isValidCompany(trimmedCompanyTag)) {","lastModifiedDate":"2022-10-21"},{"lineNumber":210,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"Ssatu"},"content":"        return new Company(trimmedCompanyTag);","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"Ssatu"},"content":"     * Parses {@code String commissions} into a {@code Commission}.","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"Ssatu"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"Ssatu"},"content":"    public static Commission parseCommission(String commission) throws ParseException {","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(commission);","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"Ssatu"},"content":"        String trimmedCommission \u003d commission.trim();","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"Ssatu"},"content":"        if (!Commission.isValidCommission(trimmedCommission)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(Commission.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"Ssatu"},"content":"        return new Commission(trimmedCommission);","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"Ssatu"},"content":"     * Parses a {@code String Coverage} into a {@code Coverage}.","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"Ssatu"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"Ssatu"},"content":"     * @throws ParseException if the given {@code coverage} is invalid.","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"Ssatu"},"content":"    public static Coverage parseCoverage(String coverage) throws ParseException {","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(coverage);","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"Ssatu"},"content":"        String trimmedCoverage \u003d coverage.trim();","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"Ssatu"},"content":"        if (!Coverage.isValidCoverageName(trimmedCoverage)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"Ssatu"},"content":"        return new Coverage(trimmedCoverage);","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"Ssatu"},"content":"     * Parses {@code Collection\u003cString\u003e coverages} into a {@code Set\u003cCoverage\u003e}.","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"Ssatu"},"content":"    public static Set\u003cCoverage\u003e parseCoverages(Collection\u003cString\u003e coverages) throws ParseException {","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(coverages);","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"Ssatu"},"content":"        final Set\u003cCoverage\u003e coverageSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"Ssatu"},"content":"        for (String coverage : coverages) {","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"Ssatu"},"content":"            coverageSet.add(parseCoverage(coverage));","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"Ssatu"},"content":"        return coverageSet;","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"cowlinn"},"content":"    // Parse functions related to Event //","lastModifiedDate":"2022-10-16"},{"lineNumber":255,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":256,"author":{"gitId":"cowlinn"},"content":"     * Parses a {@code String startTime, endTime} into a {@code Duration}.","lastModifiedDate":"2022-10-16"},{"lineNumber":257,"author":{"gitId":"cowlinn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-16"},{"lineNumber":258,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":259,"author":{"gitId":"cowlinn"},"content":"     * @throws ParseException if the given {@code startTime, endTime} is invalid.","lastModifiedDate":"2022-10-16"},{"lineNumber":260,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":261,"author":{"gitId":"cowlinn"},"content":"    public static Duration parseDuration(String startTime, String endTime) throws ParseException {","lastModifiedDate":"2022-10-16"},{"lineNumber":262,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(startTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":263,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(endTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":264,"author":{"gitId":"cowlinn"},"content":"        String strippedStartTime \u003d startTime.strip();","lastModifiedDate":"2022-10-16"},{"lineNumber":265,"author":{"gitId":"cowlinn"},"content":"        String strippedEndTime \u003d endTime.strip();","lastModifiedDate":"2022-10-16"},{"lineNumber":266,"author":{"gitId":"cowlinn"},"content":"        if (!Duration.isValidTime(strippedStartTime) || !Duration","lastModifiedDate":"2022-10-16"},{"lineNumber":267,"author":{"gitId":"cowlinn"},"content":"                .isValidTime((strippedEndTime))) {","lastModifiedDate":"2022-10-16"},{"lineNumber":268,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Duration.FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":269,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":270,"author":{"gitId":"cowlinn"},"content":"        String finalInput \u003d strippedStartTime + \"__\" + strippedEndTime;","lastModifiedDate":"2022-10-16"},{"lineNumber":271,"author":{"gitId":"cowlinn"},"content":"        if (!Duration.isValidStartAndEnd(finalInput)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":272,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":273,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":274,"author":{"gitId":"cowlinn"},"content":"        return new Duration(finalInput);","lastModifiedDate":"2022-10-16"},{"lineNumber":275,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":276,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":277,"author":{"gitId":"cowlinn"},"content":"     * Parses a {@code String date} into a {@code Date}.","lastModifiedDate":"2022-10-16"},{"lineNumber":278,"author":{"gitId":"cowlinn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-16"},{"lineNumber":279,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":280,"author":{"gitId":"cowlinn"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2022-10-16"},{"lineNumber":281,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":282,"author":{"gitId":"cowlinn"},"content":"    public static Date parseDate(String date) throws ParseException {","lastModifiedDate":"2022-10-16"},{"lineNumber":283,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(date);","lastModifiedDate":"2022-10-16"},{"lineNumber":284,"author":{"gitId":"cowlinn"},"content":"        String strippedDate \u003d date.strip();","lastModifiedDate":"2022-10-16"},{"lineNumber":285,"author":{"gitId":"cowlinn"},"content":"        if (!Date.isValidFormat(strippedDate)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":286,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Date.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":287,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":288,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"cowlinn"},"content":"        if (!Date.isValidRange(strippedDate)) {","lastModifiedDate":"2022-10-22"},{"lineNumber":290,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Date.RANGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-22"},{"lineNumber":291,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":292,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":293,"author":{"gitId":"cowlinn"},"content":"        if (!Date.isValidYear(strippedDate)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":294,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Date.YEAR_RANGE_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":295,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":296,"author":{"gitId":"cowlinn"},"content":"        return new Date(strippedDate);","lastModifiedDate":"2022-10-22"},{"lineNumber":297,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":298,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":299,"author":{"gitId":"cowlinn"},"content":"     * Parses {@code String policyDate} into a {@code PolicyDate}.","lastModifiedDate":"2022-10-19"},{"lineNumber":300,"author":{"gitId":"cowlinn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-19"},{"lineNumber":301,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":302,"author":{"gitId":"cowlinn"},"content":"    public static PolicyDate parsePolicyDate(String policyDate) throws ParseException {","lastModifiedDate":"2022-10-19"},{"lineNumber":303,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(policyDate);","lastModifiedDate":"2022-10-19"},{"lineNumber":304,"author":{"gitId":"cowlinn"},"content":"        String trimmedPolicyDate \u003d policyDate.trim();","lastModifiedDate":"2022-10-19"},{"lineNumber":305,"author":{"gitId":"cowlinn"},"content":"        if (!PolicyDate.isValidFormat(trimmedPolicyDate)) {","lastModifiedDate":"2022-10-19"},{"lineNumber":306,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(PolicyDate.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-19"},{"lineNumber":307,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":308,"author":{"gitId":"cowlinn"},"content":"        return new PolicyDate(policyDate);","lastModifiedDate":"2022-10-19"},{"lineNumber":309,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":310,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":311,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":312,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":313,"author":{"gitId":"cowlinn"},"content":"     * Parses a {@code String description} into a {@code Description}.","lastModifiedDate":"2022-10-16"},{"lineNumber":314,"author":{"gitId":"cowlinn"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-16"},{"lineNumber":315,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":316,"author":{"gitId":"cowlinn"},"content":"     * @throws ParseException if the given {@code description} is invalid.","lastModifiedDate":"2022-10-16"},{"lineNumber":317,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":318,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":319,"author":{"gitId":"cowlinn"},"content":"    public static Description parseDescription(String description) throws ParseException {","lastModifiedDate":"2022-10-16"},{"lineNumber":320,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(description);","lastModifiedDate":"2022-10-16"},{"lineNumber":321,"author":{"gitId":"cowlinn"},"content":"        String strippedDescription \u003d description.strip();","lastModifiedDate":"2022-10-16"},{"lineNumber":322,"author":{"gitId":"cowlinn"},"content":"        if (!Description.isValidDescription(strippedDescription)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":323,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":324,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":325,"author":{"gitId":"cowlinn"},"content":"        if (!Description.isValidLength(strippedDescription)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":326,"author":{"gitId":"cowlinn"},"content":"            throw new ParseException(Description.LENGTH_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":327,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":328,"author":{"gitId":"cowlinn"},"content":"        return new Description(strippedDescription);","lastModifiedDate":"2022-10-16"},{"lineNumber":329,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":330,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"Ssatu":68,"cowlinn":136,"-":112,"marcusczh":14}},{"path":"src/main/java/longtimenosee/logic/parser/PinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.PinCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-09"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":" * Parses input arguments and creates a new PinCommand object","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-09"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"public class PinCommandParser implements Parser\u003cPinCommand\u003e {","lastModifiedDate":"2022-10-09"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"     * Parses the given {@code String} of arguments in the context of the PinCommand","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"     * and returns a PinCommand object for execution.","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"    public PinCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"        try {","lastModifiedDate":"2022-10-09"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-09"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"            return new PinCommand(index);","lastModifiedDate":"2022-10-09"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-09"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-09"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PinCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-09"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-09"}],"authorContributionMap":{"loyhongshenggg":25,"marcusczh":5}},{"path":"src/main/java/longtimenosee/logic/parser/PolicyAddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMMISSION;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COMPANY;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_COVERAGES;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyAddCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Commission;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Company;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Title;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":" * Parses input arguments and creates a new PolicyAddCommand object.","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"public class PolicyAddCommandParser {","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     * Parses the given {@code String} of arguments in the context of the PolicyAddCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     * and returns an PolicyAddCommand object for execution.","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    public PolicyAddCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_COMPANY, PREFIX_COMMISSION, PREFIX_COVERAGES);","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_COMPANY, PREFIX_COMMISSION, PREFIX_COVERAGES)","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PolicyAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        Commission commission \u003d ParserUtil.parseCommission(argMultimap.getValue(PREFIX_COMMISSION).get());","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"        Set\u003cCoverage\u003e coverages \u003d ParserUtil.parseCoverages(argMultimap.getAllValues(PREFIX_COVERAGES));","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        Policy policy \u003d new Policy(title, company, commission, coverages);","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"        return new PolicyAddCommand(policy);","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":45,"marcusczh":12}},{"path":"src/main/java/longtimenosee/logic/parser/PolicyAssignCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_END;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PREMIUM;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_START;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyAssignCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.PolicyDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.Premium;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":" * Parses input arguments and creates a new PolicyAssignCommand object","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"public class PolicyAssignCommandParser implements Parser\u003cPolicyAssignCommand\u003e {","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     * Parses the given {@code String} of arguments in the context of the PolicyAssignCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     * and returns a PolicyAssignCommand object for execution.","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public PolicyAssignCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PREMIUM, PREFIX_START, PREFIX_END);","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"        Index personIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"        Index policyIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"        PolicyDate startDate;","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"        PolicyDate endDate;","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"        Premium premium;","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PREMIUM, PREFIX_START, PREFIX_END)","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PolicyAssignCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        String[] splitString \u003d argMultimap.getPreamble().split(\" \");","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"        String premiumString \u003d argMultimap.getValue(PREFIX_PREMIUM).get();","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        String startDateString \u003d argMultimap.getValue(PREFIX_START).get();","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        String endDateString \u003d argMultimap.getValue(PREFIX_END).get();","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"        if (splitString.length \u003d\u003d 2) {","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"            personIndex \u003d ParserUtil.parseIndex(splitString[0]);","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"            policyIndex \u003d ParserUtil.parseIndex(splitString[1]);","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"        } else {","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PolicyAssignCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"        if (Premium.isValidPremium(premiumString)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"            premium \u003d new Premium(argMultimap.getValue(PREFIX_PREMIUM).get());","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        } else {","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Premium.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        if (PolicyDate.isValidDate(startDateString)","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 PolicyDate.isValidDate(endDateString)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"            startDate \u003d new PolicyDate(argMultimap.getValue(PREFIX_START).get());","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"            endDate \u003d new PolicyDate(argMultimap.getValue(PREFIX_END).get());","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"        } else {","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"                    PolicyDate.MESSAGE_FORMAT_CONSTRAINTS));","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"        if (!AssignedPolicy.isChronological(startDate, endDate)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-26"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"                    AssignedPolicy.MESSAGE_DATE_CONSTRAINTS));","lastModifiedDate":"2022-10-26"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"        return new PolicyAssignCommand(personIndex, policyIndex, premium, startDate, endDate);","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-26"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-26"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-10-26"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-10-26"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"Ssatu":84}},{"path":"src/main/java/longtimenosee/logic/parser/PolicyAssignedDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-22"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyDeleteAssignedCommand;","lastModifiedDate":"2022-10-22"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-22"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" * Parses input arguments and creates a new PolicyDeleteCommand object","lastModifiedDate":"2022-10-22"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-22"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"public class PolicyAssignedDeleteCommandParser implements Parser\u003cPolicyDeleteAssignedCommand\u003e {","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"     * Parses the given {@code String} of arguments in the context of the PolicyDeleteCommand","lastModifiedDate":"2022-10-22"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2022-10-22"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-22"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public PolicyDeleteAssignedCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-22"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"        Index personIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"        Index policyIndex;","lastModifiedDate":"2022-10-22"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"        try {","lastModifiedDate":"2022-10-22"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"            String trimmedInput \u003d args.trim();","lastModifiedDate":"2022-10-22"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"            String[] indexes \u003d (trimmedInput.split(\" \"));","lastModifiedDate":"2022-10-22"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"            personIndex \u003d ParserUtil.parseIndex(indexes[0]);","lastModifiedDate":"2022-10-22"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"            policyIndex \u003d ParserUtil.parseIndex(indexes[1]);","lastModifiedDate":"2022-10-22"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-22"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"                    PolicyDeleteAssignedCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-22"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        return new PolicyDeleteAssignedCommand(personIndex, policyIndex);","lastModifiedDate":"2022-10-22"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-22"}],"authorContributionMap":{"Ssatu":36}},{"path":"src/main/java/longtimenosee/logic/parser/PolicyAssignedListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-22"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyAssignedListCommand;","lastModifiedDate":"2022-10-22"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-22"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" * Parses input arguments and creates a new PolicyDeleteCommand object","lastModifiedDate":"2022-10-22"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-22"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"public class PolicyAssignedListCommandParser implements Parser\u003cPolicyAssignedListCommand\u003e {","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"     * Parses the given {@code String} of arguments in the context of the PolicyDeleteCommand","lastModifiedDate":"2022-10-22"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2022-10-22"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-22"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public PolicyAssignedListCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-22"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"        try {","lastModifiedDate":"2022-10-22"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-22"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"            return new PolicyAssignedListCommand(index);","lastModifiedDate":"2022-10-22"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-22"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-22"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PolicyAssignedListCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-22"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-22"}],"authorContributionMap":{"Ssatu":29}},{"path":"src/main/java/longtimenosee/logic/parser/PolicyDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.commands.PolicyDeleteCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" * Parses input arguments and creates a new PolicyDeleteCommand object","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"public class PolicyDeleteCommandParser implements Parser\u003cPolicyDeleteCommand\u003e {","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"     * Parses the given {@code String} of arguments in the context of the PolicyDeleteCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public PolicyDeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"        try {","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"            return new PolicyDeleteCommand(index);","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PolicyDeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"Ssatu":29}},{"path":"src/main/java/longtimenosee/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"-":38,"marcusczh":1}},{"path":"src/main/java/longtimenosee/logic/parser/ViewIncomeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_YEAR_FORMAT;","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.logic.commands.ViewIncomeCommand;","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.logic.parser.exceptions.InvalidYearException;","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":" * Parses input arguments and creates a new ViewIncomeCommand object","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"public class ViewIncomeCommandParser {","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"     * Parses the viewIncome in the context of the ViewPIncome Command","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"     * and returns a ViewIncomeCommand object for execution.","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"    public ViewIncomeCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"        try {","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"            if (index.getOneBased() \u003c 1900 || index.getOneBased() \u003e 2100) {","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"                throw new InvalidYearException(\"Chosen year is invalid\");","lastModifiedDate":"2022-10-25"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"            }","lastModifiedDate":"2022-10-25"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"            return new ViewIncomeCommand(index.getOneBased());","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewIncomeCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"        } catch (InvalidYearException e) {","lastModifiedDate":"2022-10-25"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-25"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"                    String.format(MESSAGE_INVALID_YEAR_FORMAT, ViewIncomeCommand.MESSAGE_USAGE), e);","lastModifiedDate":"2022-10-25"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":36}},{"path":"src/main/java/longtimenosee/logic/parser/ViewPinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ViewPinCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PinnedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-09"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":" * parses the command to view pinned clients.","lastModifiedDate":"2022-10-09"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"public class ViewPinCommandParser {","lastModifiedDate":"2022-10-09"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"     * Parses the viewPin in the context of the ViewPin Command","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"     * and returns a ViewPinCommand object for execution.","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"    public ViewPinCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"        return new ViewPinCommand(new PinnedPersonPredicate());","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-09"}],"authorContributionMap":{"loyhongshenggg":15,"marcusczh":4}},{"path":"src/main/java/longtimenosee/logic/parser/exceptions/InvalidYearException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"package longtimenosee.logic.parser.exceptions;","lastModifiedDate":"2022-10-25"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-25"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":" * Represents a parse error encountered by a parser when user inputs an invalid year.","lastModifiedDate":"2022-10-26"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"public class InvalidYearException extends Exception {","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"    public InvalidYearException(String message) {","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"        super(message);","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-25"}],"authorContributionMap":{"loyhongshenggg":11}},{"path":"src/main/java/longtimenosee/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"-":15,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.UniqueEventList;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.UniquePersonList;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.UniquePolicyList;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"    private final UniquePolicyList policies;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"    private final UniqueEventList events;","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"        policies \u003d new UniquePolicyList();","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"        events \u003d new UniqueEventList();","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"     * Replaces the contents of the client list with {@code clients}.","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"     * {@code clients} must not contain duplicate clients.","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"    public void setPolicies(List\u003cPolicy\u003e policies) {","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"        this.policies.setPolicies(policies);","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"        setPolicies(newData.getPolicyList());","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"        setEvents(newData.getEventList());","lastModifiedDate":"2022-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-09-30"},{"lineNumber":119,"author":{"gitId":"ReubenChay"},"content":"     * Sorts the address book","lastModifiedDate":"2022-09-30"},{"lineNumber":120,"author":{"gitId":"ReubenChay"},"content":"     * @param comparator comparator used to sort the address book","lastModifiedDate":"2022-09-30"},{"lineNumber":121,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-09-30"},{"lineNumber":122,"author":{"gitId":"ReubenChay"},"content":"    public void sort(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2022-09-30"},{"lineNumber":123,"author":{"gitId":"ReubenChay"},"content":"        persons.sort(comparator);","lastModifiedDate":"2022-10-11"},{"lineNumber":124,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-09-30"},{"lineNumber":125,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":139,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"Ssatu"},"content":"    //policy level operations","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"Ssatu"},"content":"     * Returns true if a policy with the same identity as {@code policy} exists in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"Ssatu"},"content":"    public boolean hasPolicy(Policy policy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"Ssatu"},"content":"        return policies.contains(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"Ssatu"},"content":"     * Adds a policy to the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"Ssatu"},"content":"     * The policy must not already exist in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"Ssatu"},"content":"    public void addPolicy(Policy policy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"Ssatu"},"content":"        policies.add(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"Ssatu"},"content":"    public ObservableList\u003cPolicy\u003e getPolicyList() {","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"Ssatu"},"content":"        return policies.asUnmodifiableObservableList();","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"Ssatu"},"content":"    public void removePolicy(Policy policy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"Ssatu"},"content":"        policies.remove(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"Ssatu"},"content":"     * Replaces the given policy {@code target} in the list with {@code editedPolicy}.","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"Ssatu"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"Ssatu"},"content":"     * The person identity of {@code editedPolicy} must not be the same as another existing policy in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"Ssatu"},"content":"    public void setPolicy(Policy target, Policy editedPolicy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(editedPolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"Ssatu"},"content":"        policies.setPolicy(target, editedPolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"Ssatu"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 policies.equals(((AddressBook) other).policies)","lastModifiedDate":"2022-10-16"},{"lineNumber":184,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 events.equals(((AddressBook) other).events));","lastModifiedDate":"2022-10-16"},{"lineNumber":185,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"cowlinn"},"content":"        return persons.hashCode() + policies.hashCode();","lastModifiedDate":"2022-10-12"},{"lineNumber":190,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":193,"author":{"gitId":"cowlinn"},"content":"     * Checks the existing personList if a person has a name which matches the name given.","lastModifiedDate":"2022-10-16"},{"lineNumber":194,"author":{"gitId":"cowlinn"},"content":"     * @param personName","lastModifiedDate":"2022-10-16"},{"lineNumber":195,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":196,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":197,"author":{"gitId":"cowlinn"},"content":"    public boolean hasPersonByName(String personName) {","lastModifiedDate":"2022-10-16"},{"lineNumber":198,"author":{"gitId":"cowlinn"},"content":"        return persons.hasPersonByName(personName);","lastModifiedDate":"2022-10-16"},{"lineNumber":199,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":200,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":201,"author":{"gitId":"cowlinn"},"content":"    public void addEvent(Event e) {","lastModifiedDate":"2022-10-16"},{"lineNumber":202,"author":{"gitId":"cowlinn"},"content":"        events.add(e);","lastModifiedDate":"2022-10-16"},{"lineNumber":203,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":204,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":205,"author":{"gitId":"cowlinn"},"content":"    public boolean hasEvent(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":206,"author":{"gitId":"cowlinn"},"content":"        return events.hasEvent(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":207,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":208,"author":{"gitId":"cowlinn"},"content":"    public void removeEvent(Event e) {","lastModifiedDate":"2022-10-16"},{"lineNumber":209,"author":{"gitId":"cowlinn"},"content":"        events.deleteEvent(e);","lastModifiedDate":"2022-10-16"},{"lineNumber":210,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":211,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":212,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":213,"author":{"gitId":"cowlinn"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2022-10-16"},{"lineNumber":214,"author":{"gitId":"cowlinn"},"content":"        return events.asUnmodifiableObservableList();","lastModifiedDate":"2022-10-16"},{"lineNumber":215,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":216,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":217,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":218,"author":{"gitId":"cowlinn"},"content":"     * Replaces the contents of the Event list with {@code events}.","lastModifiedDate":"2022-10-16"},{"lineNumber":219,"author":{"gitId":"cowlinn"},"content":"     * {@code events} must not contain duplicate clients.","lastModifiedDate":"2022-10-16"},{"lineNumber":220,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":221,"author":{"gitId":"cowlinn"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-10-16"},{"lineNumber":222,"author":{"gitId":"cowlinn"},"content":"        this.events.setEvents(events);","lastModifiedDate":"2022-10-16"},{"lineNumber":223,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":224,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":225,"author":{"gitId":"cowlinn"},"content":"    public boolean checkOverlapEvent(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":226,"author":{"gitId":"cowlinn"},"content":"        return events.overlaps(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":227,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":228,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":229,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":230,"author":{"gitId":"cowlinn"},"content":"     * List overlapping events with event passed into parameter","lastModifiedDate":"2022-10-16"},{"lineNumber":231,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":232,"author":{"gitId":"cowlinn"},"content":"     * @return list of overlapping events.","lastModifiedDate":"2022-10-16"},{"lineNumber":233,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":234,"author":{"gitId":"cowlinn"},"content":"    public List\u003cEvent\u003e listEventOverlap(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":235,"author":{"gitId":"cowlinn"},"content":"        return events.listEventOverlap(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":236,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":237,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":238,"author":{"gitId":"cowlinn"},"content":"     * List events on the same day with event passed into parameter","lastModifiedDate":"2022-10-16"},{"lineNumber":239,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":240,"author":{"gitId":"cowlinn"},"content":"     * @return list of overlapping events.","lastModifiedDate":"2022-10-16"},{"lineNumber":241,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":242,"author":{"gitId":"cowlinn"},"content":"    public List\u003cEvent\u003e listEventsSameDay(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":243,"author":{"gitId":"cowlinn"},"content":"        return events.listEventSameDay(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":244,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":245,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":246,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":247,"author":{"gitId":"ReubenChay"},"content":"     * Lists upcoming events in the next 7 days","lastModifiedDate":"2022-10-17"},{"lineNumber":248,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":249,"author":{"gitId":"ReubenChay"},"content":"    public List\u003cEvent\u003e calendarView() {","lastModifiedDate":"2022-10-17"},{"lineNumber":250,"author":{"gitId":"ReubenChay"},"content":"        return events.calendarView();","lastModifiedDate":"2022-10-17"},{"lineNumber":251,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":252,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":253,"author":{"gitId":"cowlinn"},"content":"     * Removes events associated with a given person.","lastModifiedDate":"2022-10-20"},{"lineNumber":254,"author":{"gitId":"cowlinn"},"content":"     * The person should no longer exist in the model","lastModifiedDate":"2022-10-20"},{"lineNumber":255,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":256,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":257,"author":{"gitId":"cowlinn"},"content":"    public void removeEventsUnderPerson(Person person) {","lastModifiedDate":"2022-10-20"},{"lineNumber":258,"author":{"gitId":"cowlinn"},"content":"        events.removeEventsUnderPerson(person);","lastModifiedDate":"2022-10-20"},{"lineNumber":259,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":260,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ReubenChay":17,"Ssatu":61,"cowlinn":74,"-":104,"marcusczh":5}},{"path":"src/main/java/longtimenosee/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_NO_PERSONS \u003d unused -\u003e false;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    Predicate\u003cPolicy\u003e PREDICATE_SHOW_ALL_POLICIES \u003d unused -\u003e true;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    Predicate\u003cPolicy\u003e PREDICATE_SHOW_NO_POLICIES \u003d unused -\u003e true;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"    //TODO: Determine if we should use show all events like this?","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"     * Returns the user prefs GUI settings.","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":78,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-09-30"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"     * Sorts the list","lastModifiedDate":"2022-09-30"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"     * @param comparator comparator used to sort the list","lastModifiedDate":"2022-09-30"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-09-30"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"    void sort(Comparator\u003cPerson\u003e comparator);","lastModifiedDate":"2022-09-30"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"Ssatu"},"content":"     * Returns true if a policy with the same identity as {@code Policy} exists in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"    boolean hasPolicy(Policy toAdd);","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"loyhongshenggg"},"content":"    FinancialAdvisorIncome getIncome();","lastModifiedDate":"2022-10-20"},{"lineNumber":112,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":113,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"Ssatu"},"content":"     * Adds the policy specified.","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"Ssatu"},"content":"    void addPolicy(Policy toAdd);","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"Ssatu"},"content":"     * Deletes the given Policy.","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"Ssatu"},"content":"     * The policy must exist in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"Ssatu"},"content":"    void deletePolicy(Policy toDelete);","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"Ssatu"},"content":"     * Replaces the given Policy {@code target} with {@code editedPolicy}.","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"Ssatu"},"content":"     * {@code policy} must exist in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"Ssatu"},"content":"     * The policy of {@code editedPolicy} must not be the same as another existing policy in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"Ssatu"},"content":"    void setPolicy(Policy target, Policy editedPolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"Ssatu"},"content":"    /** Returns an unmodifiable view of the filtered policy list */","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"Ssatu"},"content":"    ObservableList\u003cPolicy\u003e getFilteredPolicyList();","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"Ssatu"},"content":"     * Updates the filter of the filtered policy list to filter by the given {@code predicate}.","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"Ssatu"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"Ssatu"},"content":"    void updateFilteredPolicyList(Predicate\u003cPolicy\u003e predicate);","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":141,"author":{"gitId":"cowlinn"},"content":"     * Adds the Event specified.","lastModifiedDate":"2022-10-16"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"    void addEvent(Event toAdd, String personName);","lastModifiedDate":"2022-10-16"},{"lineNumber":144,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":145,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":146,"author":{"gitId":"cowlinn"},"content":"     * Checks if there is an overlapping","lastModifiedDate":"2022-10-16"},{"lineNumber":147,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd Event to be added","lastModifiedDate":"2022-10-16"},{"lineNumber":148,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":149,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":150,"author":{"gitId":"cowlinn"},"content":"    boolean hasEventOverlap(Event toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":151,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":152,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":153,"author":{"gitId":"cowlinn"},"content":"     * List overlapping events with event passed into param","lastModifiedDate":"2022-10-16"},{"lineNumber":154,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":155,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":156,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"cowlinn"},"content":"    List\u003cEvent\u003e listEventsOverlap(Event toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":158,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"cowlinn"},"content":"     * Checks if there is already an existing event","lastModifiedDate":"2022-10-16"},{"lineNumber":160,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":161,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":162,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":163,"author":{"gitId":"cowlinn"},"content":"    boolean hasEvent(Event toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":164,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":165,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":166,"author":{"gitId":"ReubenChay"},"content":"     * Deletes an event from event list","lastModifiedDate":"2022-10-17"},{"lineNumber":167,"author":{"gitId":"ReubenChay"},"content":"     * @param toDelete event to delete","lastModifiedDate":"2022-10-17"},{"lineNumber":168,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":169,"author":{"gitId":"ReubenChay"},"content":"    void deleteEvent(Event toDelete);","lastModifiedDate":"2022-10-17"},{"lineNumber":170,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":171,"author":{"gitId":"cowlinn"},"content":"    /** Returns an unmodifiable view of the filtered event list */","lastModifiedDate":"2022-10-16"},{"lineNumber":172,"author":{"gitId":"cowlinn"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();","lastModifiedDate":"2022-10-16"},{"lineNumber":173,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":174,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":175,"author":{"gitId":"ReubenChay"},"content":"     * Lists events on the same day as an event to add","lastModifiedDate":"2022-10-17"},{"lineNumber":176,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":177,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":178,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":179,"author":{"gitId":"cowlinn"},"content":"    List\u003cEvent\u003e listEventsSameDay(Event toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":180,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":181,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":182,"author":{"gitId":"ReubenChay"},"content":"     * Shows upcoming events in the next 7 days","lastModifiedDate":"2022-10-17"},{"lineNumber":183,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":184,"author":{"gitId":"ReubenChay"},"content":"    List\u003cEvent\u003e calendarView();","lastModifiedDate":"2022-10-17"},{"lineNumber":185,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":186,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":187,"author":{"gitId":"cowlinn"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2022-10-18"},{"lineNumber":188,"author":{"gitId":"cowlinn"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2022-10-18"},{"lineNumber":189,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":190,"author":{"gitId":"cowlinn"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);","lastModifiedDate":"2022-10-18"},{"lineNumber":191,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":192,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":193,"author":{"gitId":"cowlinn"},"content":"    void removeEventsUnderPerson(Person personToDelete);","lastModifiedDate":"2022-10-20"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"ReubenChay":21,"loyhongshenggg":5,"Ssatu":35,"cowlinn":45,"-":84,"marcusczh":4}},{"path":"src/main/java/longtimenosee/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-10-16"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    private final FilteredList\u003cPolicy\u003e filteredPolicies;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"    private final FinancialAdvisorIncome income;","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"        filteredPolicies \u003d new FilteredList\u003c\u003e(this.addressBook.getPolicyList());","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"        this.income \u003d new FinancialAdvisorIncome();","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":126,"author":{"gitId":"loyhongshenggg"},"content":"    public FinancialAdvisorIncome getIncome() {","lastModifiedDate":"2022-10-20"},{"lineNumber":127,"author":{"gitId":"loyhongshenggg"},"content":"        return income;","lastModifiedDate":"2022-10-20"},{"lineNumber":128,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":130,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-09-30"},{"lineNumber":131,"author":{"gitId":"ReubenChay"},"content":"    public void sort(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2022-09-30"},{"lineNumber":132,"author":{"gitId":"ReubenChay"},"content":"        addressBook.sort(comparator);","lastModifiedDate":"2022-09-30"},{"lineNumber":133,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-09-30"},{"lineNumber":134,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":135,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":170,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2022-09-28"},{"lineNumber":171,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 filteredPolicies.equals(other.filteredPolicies);","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"Ssatu"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Policy stuff \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"Ssatu"},"content":"    public boolean hasPolicy(Policy policy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"Ssatu"},"content":"        return addressBook.hasPolicy(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":182,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"Ssatu"},"content":"    public void addPolicy(Policy policy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"Ssatu"},"content":"        addressBook.addPolicy(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"Ssatu"},"content":"        updateFilteredPolicyList(PREDICATE_SHOW_ALL_POLICIES);","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"Ssatu"},"content":"    public void setPolicy(Policy target, Policy editedPolicy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"Ssatu"},"content":"        requireAllNonNull(target, editedPolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"Ssatu"},"content":"        addressBook.setPolicy(target, editedPolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"Ssatu"},"content":"    public void deletePolicy(Policy policy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"Ssatu"},"content":"        addressBook.removePolicy(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"Ssatu"},"content":"    public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"Ssatu"},"content":"        return filteredPolicies;","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"Ssatu"},"content":"    public void updateFilteredPolicyList(Predicate\u003cPolicy\u003e predicate) {","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"Ssatu"},"content":"        filteredPolicies.setPredicate(predicate);","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"cowlinn"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event stuff \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":210,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":211,"author":{"gitId":"cowlinn"},"content":"    public void addEvent(Event e, String personName) throws PersonNotFoundException {","lastModifiedDate":"2022-10-16"},{"lineNumber":212,"author":{"gitId":"cowlinn"},"content":"        if (!addressBook.hasPersonByName(personName)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":213,"author":{"gitId":"cowlinn"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2022-10-16"},{"lineNumber":214,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":215,"author":{"gitId":"cowlinn"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":216,"author":{"gitId":"cowlinn"},"content":"        addressBook.addEvent(e);","lastModifiedDate":"2022-10-16"},{"lineNumber":217,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":218,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":219,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":220,"author":{"gitId":"ReubenChay"},"content":"     * Updates the filtered event list","lastModifiedDate":"2022-10-19"},{"lineNumber":221,"author":{"gitId":"ReubenChay"},"content":"     * @param predicate predicate to filter the list by","lastModifiedDate":"2022-10-19"},{"lineNumber":222,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":223,"author":{"gitId":"cowlinn"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2022-10-18"},{"lineNumber":224,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":225,"author":{"gitId":"cowlinn"},"content":"        filteredEvents.setPredicate(predicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":226,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":227,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-20"},{"lineNumber":228,"author":{"gitId":"cowlinn"},"content":"    public void removeEventsUnderPerson(Person personToDelete) {","lastModifiedDate":"2022-10-20"},{"lineNumber":229,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(personToDelete);","lastModifiedDate":"2022-10-20"},{"lineNumber":230,"author":{"gitId":"cowlinn"},"content":"        addressBook.removeEventsUnderPerson(personToDelete);","lastModifiedDate":"2022-10-20"},{"lineNumber":231,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":232,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":233,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":234,"author":{"gitId":"cowlinn"},"content":"    public boolean hasEventOverlap(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":235,"author":{"gitId":"cowlinn"},"content":"        return addressBook.checkOverlapEvent(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":236,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":237,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":238,"author":{"gitId":"cowlinn"},"content":"    public List\u003cEvent\u003e listEventsOverlap(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":239,"author":{"gitId":"cowlinn"},"content":"        return addressBook.listEventOverlap(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":240,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":241,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":242,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":243,"author":{"gitId":"cowlinn"},"content":"    public boolean hasEvent(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":244,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":245,"author":{"gitId":"cowlinn"},"content":"        return addressBook.hasEvent(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":246,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":247,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":248,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":249,"author":{"gitId":"cowlinn"},"content":"    public void deleteEvent(Event e) {","lastModifiedDate":"2022-10-16"},{"lineNumber":250,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(e);","lastModifiedDate":"2022-10-16"},{"lineNumber":251,"author":{"gitId":"cowlinn"},"content":"        addressBook.removeEvent(e);","lastModifiedDate":"2022-10-16"},{"lineNumber":252,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":253,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":254,"author":{"gitId":"cowlinn"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2022-10-16"},{"lineNumber":255,"author":{"gitId":"cowlinn"},"content":"        return filteredEvents;","lastModifiedDate":"2022-10-16"},{"lineNumber":256,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":257,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":258,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":259,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":260,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":261,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":262,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":263,"author":{"gitId":"cowlinn"},"content":"    public List\u003cEvent\u003e listEventsSameDay(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":264,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":265,"author":{"gitId":"cowlinn"},"content":"        return addressBook.listEventsSameDay(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":266,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":267,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":268,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":269,"author":{"gitId":"ReubenChay"},"content":"    public List\u003cEvent\u003e calendarView() {","lastModifiedDate":"2022-10-17"},{"lineNumber":270,"author":{"gitId":"ReubenChay"},"content":"        return addressBook.calendarView();","lastModifiedDate":"2022-10-17"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ReubenChay":14,"loyhongshenggg":7,"Ssatu":36,"cowlinn":61,"-":149,"marcusczh":6}},{"path":"src/main/java/longtimenosee/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    ObservableList\u003cPolicy\u003e getPolicyList();","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Ssatu":1,"cowlinn":3,"-":15,"marcusczh":3}},{"path":"src/main/java/longtimenosee/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":14,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":85,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/event/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":" * Represents the date of an Event in the address book.","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"public class Date {","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public static final String STANDARD_DATE \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2022-10-15"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Dates must follow Format: \" + STANDARD_DATE;","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    public static final String RANGE_FORMAT_CONSTRAINTS \u003d \"Ensure that Year/Month/Date values are valid dates.\";","lastModifiedDate":"2022-10-23"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"    public static final String YEAR_RANGE_CONSTRAINTS \u003d \"Ensure that Year entered is reasonable (i.e: Within the \"","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"            + \"20th century to 21st Century)\";","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"    private static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"    public final String value;","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"    private LocalDate date;","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"     * Main constructor for Date","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"     * @param value A valid Date parsed in YYYY-MM-DD","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"    public Date(String value) {","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(value);","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"        checkArgument(isValidFormat(value), MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"        this.value \u003d value;","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"        this.date \u003d parseDate(value);","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"     * Requires a dateTime object to already have an appropriate format (YYYY-MM-DD).","lastModifiedDate":"2022-10-22"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"     * Checks if given Year, Month, Date values are integer values in the appropriate range","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"     * (e.g: 0 \u003c\u003d MM \u003c\u003d 12)","lastModifiedDate":"2022-10-22"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"     * @param date in YYYY-MM-DD.","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidRange(String date) {","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"        assert (isValidFormat(date) \u003d\u003d true);","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"            LocalDate dateTime \u003d LocalDate.parse(date);","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        return true;","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"     * Requires a dateTime object to already have an appropriate format (YYYY-MM-DD).","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"     * Checks if given Year for an event is reasonable (i.e: within the 20th to 21st century)","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"     * @param date in YYYY-MM-DD.","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidYear(String date) {","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"        assert (isValidFormat(date) \u003d\u003d true);","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"            LocalDate dateTime \u003d LocalDate.parse(date);","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"            int year \u003d dateTime.getYear();","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"            if (year \u003c\u003d 1900 || year \u003e\u003d 2100) {","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"                return false;","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2022-10-22"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-10-22"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"        return true;","lastModifiedDate":"2022-10-22"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"    private LocalDate parseDate(String value) {","lastModifiedDate":"2022-10-15"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(STANDARD_DATE);","lastModifiedDate":"2022-10-15"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-10-15"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"            LocalDate dateTime \u003d LocalDate.parse(value);","lastModifiedDate":"2022-10-15"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException dateTimeException) {","lastModifiedDate":"2022-10-26"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"            throw dateTimeException;","lastModifiedDate":"2022-10-26"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"        LocalDate dateTime \u003d LocalDate.parse(value, formatter);","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"        return dateTime;","lastModifiedDate":"2022-10-15"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidFormat(String value) {","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"        return value.matches(DATE_VALIDATION_REGEX);","lastModifiedDate":"2022-10-15"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-15"},{"lineNumber":92,"author":{"gitId":"cowlinn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-15"},{"lineNumber":93,"author":{"gitId":"cowlinn"},"content":"            return true;","lastModifiedDate":"2022-10-15"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"        if (!(other instanceof Date)) {","lastModifiedDate":"2022-10-15"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-10-15"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"        Date otherDate \u003d (Date) other;","lastModifiedDate":"2022-10-15"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"        return otherDate.date.equals(this.date)","lastModifiedDate":"2022-10-15"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherDate.value.equals(this.value);","lastModifiedDate":"2022-10-15"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"    public String toString() {","lastModifiedDate":"2022-10-15"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"        return date.format(DateTimeFormatter","lastModifiedDate":"2022-10-15"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"                .ofLocalizedDate(FormatStyle.LONG));","lastModifiedDate":"2022-10-15"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2022-10-15"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"        return this.date;","lastModifiedDate":"2022-10-15"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"cowlinn":113}},{"path":"src/main/java/longtimenosee/model/event/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":" * Represents an Event\u0027s description in the address book. Also serves as the title","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"public class Description {","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"    public static final int MAXIMUM_DESCRIPTION_LENGTH \u003d 175;","lastModifiedDate":"2022-10-27"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Description should only contain \"","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"        + \"alphanumeric characters and spaces. It should not be empty\";","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"    public static final String LENGTH_CONSTRAINTS \u003d \"Ensure description is of an appropriate length\";","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"    /*","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2022-10-15"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"     * otherwise \" \" (a blank string) becomes a valid input, similar to Name.","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"    private String description;","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"     * Constructs a {@code Description}.","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"     * @param description A valid name.","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"    public Description(String description) {","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(description);","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"        checkArgument(isValidLength(description), LENGTH_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"     * Returns true if a given string is a valid description","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidDescription(String test) {","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"     * Returns true is a given string is of a valid length","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"     * Presumes that the description is already valid.","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"     * This is to account for the case where the description is empty.","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidLength(String test) {","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"        assert(isValidDescription(test));","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"        return test.length() \u003c\u003d MAXIMUM_DESCRIPTION_LENGTH;","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"    public String toString() {","lastModifiedDate":"2022-10-15"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        return description;","lastModifiedDate":"2022-10-15"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"    public String retrieveDescription() {","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        return description;","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-15"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-15"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2022-10-15"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 description.equals(((Description) other).description)); //state check","lastModifiedDate":"2022-10-15"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"cowlinn":65}},{"path":"src/main/java/longtimenosee/model/event/Duration.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import java.time.LocalTime;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":" * Represents a duration class, which consists of 2 LocalTime Objects","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":" *","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"public class Duration {","lastModifiedDate":"2022-10-15"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"            \"Start cannot be before end.\";","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"    public static final String FORMAT_CONSTRAINTS \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"            \"Time input must follow format : HH:MM\";","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"    private static final double MINUTES_IN_HOUR \u003d 60;","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"    public final String value;","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"    private LocalTime startTime;","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"    private LocalTime endTime;","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"     * For Input: The string value is seperated by \"__\". This is also what is saved in Storage","lastModifiedDate":"2022-10-15"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"     * Both the start and end dates are already validated (by parserUtil)","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"     * Stores both values","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"     * @param input","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    public Duration(String input) {","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(input);","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"        checkArgument(isValidStartAndEnd(input), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"        value \u003d input;","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"        String[] timeInput \u003d value.split(\"__\");","lastModifiedDate":"2022-10-15"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"        startTime \u003d LocalTime.parse(timeInput[0]);","lastModifiedDate":"2022-10-15"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"        endTime \u003d LocalTime.parse(timeInput[1]);","lastModifiedDate":"2022-10-15"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"     * Used for validation purposes in ParserUtil, to check if each individual date given can be parsed","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"     * Will be used to parse both start and end times (individually)","lastModifiedDate":"2022-10-15"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"     * @param time","lastModifiedDate":"2022-10-15"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"     * @return isValidTime or not","lastModifiedDate":"2022-10-15"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidTime(String time) {","lastModifiedDate":"2022-10-15"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-10-15"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"            LocalTime verifiedTime \u003d LocalTime.parse(time);","lastModifiedDate":"2022-10-15"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2022-10-15"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"        return true;","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"     * Used for validation purposes in ParserUtil","lastModifiedDate":"2022-10-15"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"     * The deliminator \"__\" will be added in between both start and end times after","lastModifiedDate":"2022-10-16"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"     * both have been individually validated","lastModifiedDate":"2022-10-16"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"     * returns whether endTime is after startTime","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"     * @param time","lastModifiedDate":"2022-10-15"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"     * @return isValidTime or not","lastModifiedDate":"2022-10-15"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidStartAndEnd(String time) {","lastModifiedDate":"2022-10-15"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-10-15"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"            String[] timeInput \u003d time.split(\"__\");","lastModifiedDate":"2022-10-15"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"            LocalTime startTime \u003d LocalTime.parse(timeInput[0]);","lastModifiedDate":"2022-10-15"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"            LocalTime endTime \u003d LocalTime.parse(timeInput[1]);","lastModifiedDate":"2022-10-15"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2022-10-15"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"            //System.out.println(\"This should be verified previously\");","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-10-15"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"        String[] timeInput \u003d time.split(\"__\");","lastModifiedDate":"2022-10-15"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        LocalTime startTime \u003d LocalTime.parse(timeInput[0]);","lastModifiedDate":"2022-10-15"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"        LocalTime endTime \u003d LocalTime.parse(timeInput[1]);","lastModifiedDate":"2022-10-15"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"        return endTime.isAfter(startTime);","lastModifiedDate":"2022-10-15"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"     * Compares 2 sets of time frames for a potential overlap.","lastModifiedDate":"2022-10-15"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"     * @param other","lastModifiedDate":"2022-10-15"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"     * @return isOverlap or not","lastModifiedDate":"2022-10-15"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"    public boolean isOverlap(Duration other) {","lastModifiedDate":"2022-10-16"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"        //check if the other event\u0027s start time is before this start time or after the end time","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"        //Defensive programming by checking both the start and end time for each event","lastModifiedDate":"2022-11-01"},{"lineNumber":91,"author":{"gitId":"ReubenChay"},"content":"        //Case 1: Other event happens before --\u003e other event must start and end before this event\u0027s start time","lastModifiedDate":"2022-11-01"},{"lineNumber":92,"author":{"gitId":"ReubenChay"},"content":"        boolean happensBefore \u003d other.startTime.isBefore(this.startTime)","lastModifiedDate":"2022-11-01"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"                \u0026\u0026 other.endTime.isBefore(this.startTime);","lastModifiedDate":"2022-11-01"},{"lineNumber":94,"author":{"gitId":"ReubenChay"},"content":"        //Case 1: Other event happens after --\u003e other event must start and end after this event\u0027s end time","lastModifiedDate":"2022-11-01"},{"lineNumber":95,"author":{"gitId":"ReubenChay"},"content":"        boolean happensAfter \u003d other.startTime.isAfter(this.endTime)","lastModifiedDate":"2022-11-01"},{"lineNumber":96,"author":{"gitId":"ReubenChay"},"content":"                \u0026\u0026 other.endTime.isAfter(this.endTime);","lastModifiedDate":"2022-11-01"},{"lineNumber":97,"author":{"gitId":"ReubenChay"},"content":"        return !(happensBefore || happensAfter);","lastModifiedDate":"2022-11-01"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"     * Utility function to generate the number of hours between 2 events, in decimal representation","lastModifiedDate":"2022-10-15"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"     * @return nearest number of hours.","lastModifiedDate":"2022-10-15"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"    public double getHours() {","lastModifiedDate":"2022-10-15"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"        long numHours \u003d startTime.until(endTime, ChronoUnit.MINUTES);","lastModifiedDate":"2022-10-15"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"        return ((double) numHours) / MINUTES_IN_HOUR;","lastModifiedDate":"2022-10-15"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-15"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-15"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"                || (other instanceof Duration // instanceof handles nulls","lastModifiedDate":"2022-10-15"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 startTime.equals(((Duration) other).startTime)// state check","lastModifiedDate":"2022-10-15"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 endTime.equals(((Duration) other).endTime)); // state check","lastModifiedDate":"2022-10-15"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"    public String toString() {","lastModifiedDate":"2022-10-15"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"        return \"Start: \" + startTime.format(DateTimeFormatter","lastModifiedDate":"2022-10-15"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"                .ofLocalizedTime(FormatStyle.MEDIUM))","lastModifiedDate":"2022-10-16"},{"lineNumber":120,"author":{"gitId":"cowlinn"},"content":"                + \" || End: \" + endTime.format(DateTimeFormatter","lastModifiedDate":"2022-10-16"},{"lineNumber":121,"author":{"gitId":"cowlinn"},"content":"                .ofLocalizedTime(FormatStyle.MEDIUM));","lastModifiedDate":"2022-10-16"},{"lineNumber":122,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":123,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":124,"author":{"gitId":"cowlinn"},"content":"    public LocalTime getStartTime() {","lastModifiedDate":"2022-10-19"},{"lineNumber":125,"author":{"gitId":"cowlinn"},"content":"        return startTime;","lastModifiedDate":"2022-10-19"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":127,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-15"},{"lineNumber":128,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"ReubenChay":9,"cowlinn":119}},{"path":"src/main/java/longtimenosee/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-22"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":" * Represents an Event in the address book.","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"public class Event {","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cEvent\u003e EVENT_COMPARATOR \u003d new Comparator\u003cEvent\u003e() {","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"        public int compare(Event firstEvent, Event secondEvent) {","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"            int compare \u003d firstEvent.getDate().getDate().compareTo(secondEvent.getDate().getDate());","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"            if (compare !\u003d 0) {","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"                return compare;","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"            } else {","lastModifiedDate":"2022-10-19"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"                return firstEvent.getDuration().getStartTime().compareTo(secondEvent.getDuration().getStartTime());","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-10-19"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"    private final Description description;","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"    private final Name personName; //There can only be one!","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"    private final Date date;","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"    private final Duration duration; //Consists of 2 durations: Start Time, End Time","lastModifiedDate":"2022-10-15"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"    public Event(Description description, Name personName, Date date, Duration duration) {","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"        requireAllNonNull(description, personName, date, duration);","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"        this.personName \u003d personName;","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-10-15"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"     * Utility method to view list of events.","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"     * @param events","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"    public static String viewEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"        for (Event e: events) {","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"            s.append(e + \"\\n\");","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        return s.toString();","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"    //TODO: Can you pin an event?","lastModifiedDate":"2022-10-15"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"    public Description getDescription() {","lastModifiedDate":"2022-10-15"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"        return description;","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"     * Utility function to check if 2 events clash","lastModifiedDate":"2022-10-15"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"     * @return whether the two event Clashes.","lastModifiedDate":"2022-10-15"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"    public static Boolean eventClash(Event first, Event second) {","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"        if (first.getDate().equals(second.getDate())) { //same day","lastModifiedDate":"2022-10-15"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"            if (first.getDuration().isOverlap(second.getDuration())) { //duration window overlaps","lastModifiedDate":"2022-10-15"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"                return true;","lastModifiedDate":"2022-10-15"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-15"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"        return false;","lastModifiedDate":"2022-10-15"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"    public Date getDate() {","lastModifiedDate":"2022-10-15"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"        return this.date;","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"    public Duration getDuration() {","lastModifiedDate":"2022-10-15"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        return this.duration;","lastModifiedDate":"2022-10-15"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"    //TODO: Check if a person currently exists in the UniquePersonList for verification","lastModifiedDate":"2022-10-15"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"    public Name getPersonName() {","lastModifiedDate":"2022-10-22"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"        return this.personName;","lastModifiedDate":"2022-10-15"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"     * Weaker notation of equality between two events","lastModifiedDate":"2022-10-15"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"     * TODO: Decide what \"unique event\" means?","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"     * We only compare the description of the events and if the same people are involved.","lastModifiedDate":"2022-10-15"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"     * @param otherEvent","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-15"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":92,"author":{"gitId":"cowlinn"},"content":"    public boolean isSameEvent(Event otherEvent) {","lastModifiedDate":"2022-10-15"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"        return otherEvent !\u003d null \u0026\u0026 otherEvent.equals(this);","lastModifiedDate":"2022-11-01"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-15"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-15"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"            return true;","lastModifiedDate":"2022-10-15"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2022-10-15"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-10-15"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2022-10-15"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"        return otherEvent.getPersonName().equals(this.getPersonName())","lastModifiedDate":"2022-10-15"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherEvent.getDescription().equals(this.getDescription())","lastModifiedDate":"2022-10-15"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherEvent.getDate().equals(this.getDate())","lastModifiedDate":"2022-10-15"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherEvent.getPersonName().equals(((Event) other).getPersonName())","lastModifiedDate":"2022-10-15"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherEvent.getDuration().equals(this.getDuration());","lastModifiedDate":"2022-10-15"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"    public String toString() {","lastModifiedDate":"2022-10-16"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-10-16"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"        builder.append(\"\\n\" + \"Description: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"                .append(getDescription() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"                .append(\"Attendees: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"                .append(getPersonName() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":120,"author":{"gitId":"cowlinn"},"content":"                .append(\"Date: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":121,"author":{"gitId":"cowlinn"},"content":"                .append(getDate() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":122,"author":{"gitId":"cowlinn"},"content":"                .append(\"Duration: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":123,"author":{"gitId":"cowlinn"},"content":"                .append(getDuration());","lastModifiedDate":"2022-10-16"},{"lineNumber":124,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":125,"author":{"gitId":"cowlinn"},"content":"        return builder.toString();","lastModifiedDate":"2022-10-16"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":127,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"ReubenChay":11,"cowlinn":116}},{"path":"src/main/java/longtimenosee/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.event.Event.EVENT_COMPARATOR;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.exceptions.DuplicateEventException;","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.exceptions.OverlapEventException;","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":" * A Event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":" * events uses Event#isSameEvent(Event) for equality so as to ensure that the Event being added or updated is","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of a Event uses Event#equals(Object) so","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":" * as to ensure that the Event with exactly the same fields will be removed.","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":" *","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":" *","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":" * @see Event#isSameEvent(Event)","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"     * Returns true if the list contains an equivalent event as the given argument.","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    public boolean contains(Event toCheck) {","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"     * Adds an Event to the list.","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"    public void add(Event toAdd) throws DuplicateEventException, OverlapEventException {","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"        if (overlaps(toAdd)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"            throw new OverlapEventException();","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2022-10-16"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"        FXCollections.sort(internalList, EVENT_COMPARATOR);","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"     * Checks if an incoming event will cause the events to overlap","lastModifiedDate":"2022-10-16"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"    public boolean overlaps(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"        for (Event e : internalList) {","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"            if (Event.eventClash(e, toAdd)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"                return true;","lastModifiedDate":"2022-10-16"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"        return false;","lastModifiedDate":"2022-10-16"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"     * Removes the equivalent event from the list.","lastModifiedDate":"2022-10-16"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"     * The event must exist in the list.","lastModifiedDate":"2022-10-16"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"    public void remove(Event toRemove) {","lastModifiedDate":"2022-10-16"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-10-16"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2022-10-16"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"     * Replaces the contents of this list with {@code events}.","lastModifiedDate":"2022-10-16"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"     * {@code events} must not contain duplicate persons.","lastModifiedDate":"2022-10-16"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":92,"author":{"gitId":"cowlinn"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-10-16"},{"lineNumber":93,"author":{"gitId":"cowlinn"},"content":"        requireAllNonNull(events);","lastModifiedDate":"2022-10-16"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"        if (!eventsAreUnique(events)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"            throw new DuplicateEventException();","lastModifiedDate":"2022-10-16"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"        if (!eventsNoClash(events)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"            throw new OverlapEventException();","lastModifiedDate":"2022-10-16"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"        internalList.setAll(events);","lastModifiedDate":"2022-10-16"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"    public void setEvents(UniqueEventList replacement) {","lastModifiedDate":"2022-10-16"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-10-16"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2022-10-16"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-10-16"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2022-10-16"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"    public Iterator\u003cEvent\u003e iterator() {","lastModifiedDate":"2022-10-16"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"        return internalList.iterator();","lastModifiedDate":"2022-10-16"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-16"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-16"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls","lastModifiedDate":"2022-10-16"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));","lastModifiedDate":"2022-10-16"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":120,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":121,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":122,"author":{"gitId":"cowlinn"},"content":"     * Check if the internal list has said event.","lastModifiedDate":"2022-10-16"},{"lineNumber":123,"author":{"gitId":"cowlinn"},"content":"     * Less strict equalty used (i.e: Only the person\u0027s name /descriptor)","lastModifiedDate":"2022-10-16"},{"lineNumber":124,"author":{"gitId":"cowlinn"},"content":"     * @param toCheck","lastModifiedDate":"2022-10-16"},{"lineNumber":125,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":127,"author":{"gitId":"cowlinn"},"content":"    public boolean hasEvent(Event toCheck) {","lastModifiedDate":"2022-10-16"},{"lineNumber":128,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-16"},{"lineNumber":129,"author":{"gitId":"cowlinn"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);","lastModifiedDate":"2022-10-16"},{"lineNumber":130,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":131,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":132,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":133,"author":{"gitId":"cowlinn"},"content":"     * Attempts to delete an event","lastModifiedDate":"2022-10-16"},{"lineNumber":134,"author":{"gitId":"cowlinn"},"content":"     * Strict equality applies for deleting events, as opposed to hasEvent","lastModifiedDate":"2022-10-23"},{"lineNumber":135,"author":{"gitId":"cowlinn"},"content":"     * @param e","lastModifiedDate":"2022-10-16"},{"lineNumber":136,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":137,"author":{"gitId":"cowlinn"},"content":"    public void deleteEvent(Event e) {","lastModifiedDate":"2022-10-16"},{"lineNumber":138,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(e);","lastModifiedDate":"2022-10-16"},{"lineNumber":139,"author":{"gitId":"cowlinn"},"content":"        if (!internalList.remove(e)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":140,"author":{"gitId":"cowlinn"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2022-10-16"},{"lineNumber":141,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"    //TODO: Events are unique?","lastModifiedDate":"2022-10-16"},{"lineNumber":144,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":145,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":146,"author":{"gitId":"cowlinn"},"content":"     * Returns true if {@code persons} contains only unique events.","lastModifiedDate":"2022-10-16"},{"lineNumber":147,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":148,"author":{"gitId":"cowlinn"},"content":"    private boolean eventsAreUnique(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-10-16"},{"lineNumber":149,"author":{"gitId":"cowlinn"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {","lastModifiedDate":"2022-10-16"},{"lineNumber":150,"author":{"gitId":"cowlinn"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {","lastModifiedDate":"2022-10-16"},{"lineNumber":151,"author":{"gitId":"cowlinn"},"content":"                if (events.get(i).isSameEvent(events.get(j))) {","lastModifiedDate":"2022-10-16"},{"lineNumber":152,"author":{"gitId":"cowlinn"},"content":"                    return false;","lastModifiedDate":"2022-10-16"},{"lineNumber":153,"author":{"gitId":"cowlinn"},"content":"                }","lastModifiedDate":"2022-10-16"},{"lineNumber":154,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-16"},{"lineNumber":155,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":156,"author":{"gitId":"cowlinn"},"content":"        return true;","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":158,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":160,"author":{"gitId":"cowlinn"},"content":"     * Returns true if{@code events} contain only events that do not clash.","lastModifiedDate":"2022-10-16"},{"lineNumber":161,"author":{"gitId":"cowlinn"},"content":"     * @param events","lastModifiedDate":"2022-10-16"},{"lineNumber":162,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-16"},{"lineNumber":163,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":164,"author":{"gitId":"cowlinn"},"content":"    public boolean eventsNoClash(List\u003cEvent\u003e events) {","lastModifiedDate":"2022-10-16"},{"lineNumber":165,"author":{"gitId":"cowlinn"},"content":"        for (int i \u003d 0; i \u003c events.size() - 1; i++) {","lastModifiedDate":"2022-10-16"},{"lineNumber":166,"author":{"gitId":"cowlinn"},"content":"            for (int j \u003d i + 1; j \u003c events.size(); j++) {","lastModifiedDate":"2022-10-16"},{"lineNumber":167,"author":{"gitId":"cowlinn"},"content":"                if (Event.eventClash(events.get(i), events.get(j))) {","lastModifiedDate":"2022-10-16"},{"lineNumber":168,"author":{"gitId":"cowlinn"},"content":"                    return false;","lastModifiedDate":"2022-10-16"},{"lineNumber":169,"author":{"gitId":"cowlinn"},"content":"                }","lastModifiedDate":"2022-10-16"},{"lineNumber":170,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-16"},{"lineNumber":171,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":172,"author":{"gitId":"cowlinn"},"content":"        return true;","lastModifiedDate":"2022-10-16"},{"lineNumber":173,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":174,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":175,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":176,"author":{"gitId":"cowlinn"},"content":"     * List overlapping events in UniqueEventList","lastModifiedDate":"2022-10-16"},{"lineNumber":177,"author":{"gitId":"cowlinn"},"content":"     * comparing event passed into parameter","lastModifiedDate":"2022-10-16"},{"lineNumber":178,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":179,"author":{"gitId":"cowlinn"},"content":"     * @return list of events which overlap with incoming event.","lastModifiedDate":"2022-10-16"},{"lineNumber":180,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":181,"author":{"gitId":"cowlinn"},"content":"    public List\u003cEvent\u003e listEventOverlap(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":182,"author":{"gitId":"cowlinn"},"content":"        List\u003cEvent\u003e clashingEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-16"},{"lineNumber":183,"author":{"gitId":"cowlinn"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {","lastModifiedDate":"2022-10-16"},{"lineNumber":184,"author":{"gitId":"cowlinn"},"content":"            if (Event.eventClash(internalList.get(i), toAdd)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":185,"author":{"gitId":"cowlinn"},"content":"                clashingEvents.add(internalList.get(i));","lastModifiedDate":"2022-10-16"},{"lineNumber":186,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-16"},{"lineNumber":187,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":188,"author":{"gitId":"cowlinn"},"content":"        return clashingEvents;","lastModifiedDate":"2022-10-16"},{"lineNumber":189,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":190,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":191,"author":{"gitId":"cowlinn"},"content":"     * List events occuring on the same day in UniqueEventList","lastModifiedDate":"2022-10-16"},{"lineNumber":192,"author":{"gitId":"cowlinn"},"content":"     * comparing event passed into parameter","lastModifiedDate":"2022-10-16"},{"lineNumber":193,"author":{"gitId":"cowlinn"},"content":"     * @param toAdd","lastModifiedDate":"2022-10-16"},{"lineNumber":194,"author":{"gitId":"cowlinn"},"content":"     * @return list of events on the same day.","lastModifiedDate":"2022-10-16"},{"lineNumber":195,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":196,"author":{"gitId":"cowlinn"},"content":"    public List\u003cEvent\u003e listEventSameDay(Event toAdd) {","lastModifiedDate":"2022-10-16"},{"lineNumber":197,"author":{"gitId":"cowlinn"},"content":"        List\u003cEvent\u003e sameDayEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-16"},{"lineNumber":198,"author":{"gitId":"cowlinn"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {","lastModifiedDate":"2022-10-16"},{"lineNumber":199,"author":{"gitId":"cowlinn"},"content":"            if (toAdd.getDate().equals(internalList.get(i).getDate())) {","lastModifiedDate":"2022-10-16"},{"lineNumber":200,"author":{"gitId":"cowlinn"},"content":"                sameDayEvents.add(internalList.get(i));","lastModifiedDate":"2022-10-16"},{"lineNumber":201,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-16"},{"lineNumber":202,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":203,"author":{"gitId":"cowlinn"},"content":"        return sameDayEvents;","lastModifiedDate":"2022-10-16"},{"lineNumber":204,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":205,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":206,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":207,"author":{"gitId":"ReubenChay"},"content":"     * Lists upcoming events in the next 7 days from the day that this method is called","lastModifiedDate":"2022-10-17"},{"lineNumber":208,"author":{"gitId":"ReubenChay"},"content":"     * @return list of events in the next 7 days","lastModifiedDate":"2022-10-17"},{"lineNumber":209,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":210,"author":{"gitId":"ReubenChay"},"content":"    public List\u003cEvent\u003e calendarView() {","lastModifiedDate":"2022-10-17"},{"lineNumber":211,"author":{"gitId":"ReubenChay"},"content":"        List\u003cEvent\u003e thisWeek \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-17"},{"lineNumber":212,"author":{"gitId":"ReubenChay"},"content":"        LocalDate todaysDate \u003d LocalDate.now();","lastModifiedDate":"2022-10-17"},{"lineNumber":213,"author":{"gitId":"ReubenChay"},"content":"        LocalDate weekLater \u003d todaysDate.plusDays(7);","lastModifiedDate":"2022-10-17"},{"lineNumber":214,"author":{"gitId":"cowlinn"},"content":"        for (Event event : internalList) {","lastModifiedDate":"2022-10-20"},{"lineNumber":215,"author":{"gitId":"cowlinn"},"content":"            LocalDate eventDate \u003d event.getDate().getDate();","lastModifiedDate":"2022-10-20"},{"lineNumber":216,"author":{"gitId":"ReubenChay"},"content":"            if ((eventDate.isAfter(todaysDate) || eventDate.isEqual(todaysDate))","lastModifiedDate":"2022-10-17"},{"lineNumber":217,"author":{"gitId":"ReubenChay"},"content":"                    \u0026\u0026 (eventDate.isBefore(weekLater) || eventDate.isEqual(weekLater))) {","lastModifiedDate":"2022-10-17"},{"lineNumber":218,"author":{"gitId":"cowlinn"},"content":"                thisWeek.add(event);","lastModifiedDate":"2022-10-20"},{"lineNumber":219,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-17"},{"lineNumber":220,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":221,"author":{"gitId":"ReubenChay"},"content":"        return thisWeek;","lastModifiedDate":"2022-10-17"},{"lineNumber":222,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":223,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":224,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":225,"author":{"gitId":"cowlinn"},"content":"     * Removes all events in internal event list associated with given person.","lastModifiedDate":"2022-10-20"},{"lineNumber":226,"author":{"gitId":"cowlinn"},"content":"     * @param person","lastModifiedDate":"2022-10-20"},{"lineNumber":227,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":228,"author":{"gitId":"cowlinn"},"content":"    public void removeEventsUnderPerson(Person person) {","lastModifiedDate":"2022-10-20"},{"lineNumber":229,"author":{"gitId":"cowlinn"},"content":"        List\u003cEvent\u003e eventsAssociatedWithPerson \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-20"},{"lineNumber":230,"author":{"gitId":"cowlinn"},"content":"        for (Event event: internalList) {","lastModifiedDate":"2022-10-20"},{"lineNumber":231,"author":{"gitId":"cowlinn"},"content":"            if (event.getPersonName().fullName.equals(person.getName().fullName)) {","lastModifiedDate":"2022-10-22"},{"lineNumber":232,"author":{"gitId":"cowlinn"},"content":"                eventsAssociatedWithPerson.add(event);","lastModifiedDate":"2022-10-20"},{"lineNumber":233,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":234,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":235,"author":{"gitId":"cowlinn"},"content":"        for (Event event: internalList) {","lastModifiedDate":"2022-10-20"},{"lineNumber":236,"author":{"gitId":"cowlinn"},"content":"            if (eventsAssociatedWithPerson.contains(event)) {","lastModifiedDate":"2022-10-20"},{"lineNumber":237,"author":{"gitId":"cowlinn"},"content":"                remove(event);","lastModifiedDate":"2022-10-20"},{"lineNumber":238,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":239,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":240,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":241,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"ReubenChay":22,"cowlinn":219}},{"path":"src/main/java/longtimenosee/model/event/exceptions/DuplicateEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event.exceptions;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":" * identity).","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"public class DuplicateEventException extends RuntimeException {","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"    public DuplicateEventException() {","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"        super(\"Operation would result in duplicate events\");","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"cowlinn":11}},{"path":"src/main/java/longtimenosee/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event.exceptions;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":" * Signals that the operation is unable to find the specified event.","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"public class EventNotFoundException extends RuntimeException {","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"cowlinn":7}},{"path":"src/main/java/longtimenosee/model/event/exceptions/OverlapEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event.exceptions;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":" * Encapsulates exception where adding an event overlaps with another pre-existing one","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"public class OverlapEventException extends RuntimeException {","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"    public OverlapEventException() {","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"        super(\"Operation would result in overlapping events\");","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"cowlinn":10}},{"path":"src/main/java/longtimenosee/model/event/predicate/DescriptionContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.event.predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Event}\u0027s {@code Description} matches any of the keywords given.","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class DescriptionContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    private final String keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    public DescriptionContainsKeywordsPredicate(String keywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        return event.getDescription().retrieveDescription().toLowerCase().contains(keywords.toLowerCase());","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof DescriptionContainsKeywordsPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"                return keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords);","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":35}},{"path":"src/main/java/longtimenosee/model/event/predicate/EventDateMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.event.predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Event}\u0027s {@code Date} matches the date given.","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"public class EventDateMatchesInputPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    private final String date;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"     * Constructs an EventDateMatchesInputPredicate object, which consists of a date input.","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     * @param date is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"    public EventDateMatchesInputPredicate(String date) {","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assert date.length() !\u003d 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        assert date.length() \u003d\u003d 10;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        LocalDate eventDate \u003d event.getDate().getDate();","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        LocalDate inputDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        return eventDate.equals(inputDate);","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof EventDateMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"                return date.equals(((EventDateMatchesInputPredicate) other).date);","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":45}},{"path":"src/main/java/longtimenosee/model/event/predicate/NameInEventContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.event.predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Event}\u0027s participant {@code Name} matches any of the keywords given.","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"public class NameInEventContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    public NameInEventContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        for (String keyword : keywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"            if (StringUtil.containsWordIgnoreCase(event.getPersonName().fullName, keyword)) {","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"                return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof NameInEventContainsKeywordsPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"                return keywords.equals(((NameInEventContainsKeywordsPredicate) other).keywords);","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":41}},{"path":"src/main/java/longtimenosee/model/event/predicate/WithinNextSevenDays.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.event.predicate;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":" * Tests that a {@code Event} occurs within the next 7 days.","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"public class WithinNextSevenDays implements Predicate\u003cEvent\u003e {","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"    public WithinNextSevenDays() {","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"    public boolean test(Event event) {","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"        LocalDate currentDate \u003d LocalDate.now();","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"        LocalDate weekLater \u003d currentDate.plusDays(7);","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"        LocalDate eventDate \u003d event.getDate().getDate();","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"        return (eventDate.isAfter(currentDate) || eventDate.isEqual(currentDate))","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 (eventDate.isBefore(weekLater) || eventDate.isEqual(weekLater));","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"cowlinn":23}},{"path":"src/main/java/longtimenosee/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":55,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/person/Birthday.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import java.time.chrono.ChronoLocalDate;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-09-28"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-09-29"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":" * Encapsulation for a client\u0027s birthday","lastModifiedDate":"2022-09-29"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-09-29"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"public class Birthday {","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"    public static final int TWENTIETH_CENTURY_BOUNDARY \u003d 1900;","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cPerson\u003e BIRTHDAY_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"            return p1.getBirthday().getBirthday().compareTo(p2.getBirthday().getBirthday());","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date of birth cannot be in the future or \"","lastModifiedDate":"2022-10-26"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"             + \"before the 20th century\";","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"    public static final String RANGE_FORMAT_CONSTRAINTS \u003d \"Ensure that Year/Month/Date values entered are valid.\"","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"            + \"\\n Such that it is a valid date.\";","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"    public static final String STANDARD_DATE \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2022-09-29"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    public static final String SORT_BIRTHDAY \u003d \"birthday\";","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Date of Birth must follow Format: \" + STANDARD_DATE;","lastModifiedDate":"2022-09-29"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"    private static final String BIRTHDAY_VALIDATION_REGEX \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";","lastModifiedDate":"2022-09-29"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"    public final String value;","lastModifiedDate":"2022-09-29"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"    private LocalDate birthday;","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-29"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"     * Main constructor for Birthday","lastModifiedDate":"2022-09-29"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"     * @param value","lastModifiedDate":"2022-09-29"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-29"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"    public Birthday(String value) {","lastModifiedDate":"2022-09-28"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"        this.value \u003d value;","lastModifiedDate":"2022-09-28"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"        this.birthday \u003d parseBirthday(value);","lastModifiedDate":"2022-09-28"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"     * Utility function to check if values entered are within range of an appropriate date.","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"     * * i.e: 0 \u003c\u003d Day \u003c\u003d 31, 0 \u003c\u003d Month \u003c\u003d 12","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"     * The LocalDate library is then used to parse these values.","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"     * To account for edge cases like Leap years.","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"     * @param date","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidDate(String date) {","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"        assert(isValidFormat(date) \u003d\u003d true);","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"            LocalDate attemptToParseBirthday \u003d LocalDate.parse(date);","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException invalidValueException) {","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"        return true;","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"    public LocalDate getBirthday() {","lastModifiedDate":"2022-09-28"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"        return this.birthday;","lastModifiedDate":"2022-09-26"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-26"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"     * Utility function to check if a birthday is reasonable","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"     * date parsed in must be of a valid format (i.e: YYYY-MM-DD)","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"     * Checks that a client\u0027s birthday is reasonable:","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"     * i.e: Birthday is not in the future, and not before the 20th century.","lastModifiedDate":"2022-10-26"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-26"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-26"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"    public static boolean isReasonableBirthday(String date) {","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"        assert(isValidFormat(date) \u003d\u003d true);","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-09-28"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"            LocalDate verifiedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-09-28"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2022-09-28"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-09-28"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"        LocalDate verifiedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-09-28"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"        int verifiedYear \u003d verifiedDate.getYear();","lastModifiedDate":"2022-10-26"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"        return verifiedYear \u003e\u003d TWENTIETH_CENTURY_BOUNDARY","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"            \u0026\u0026 (LocalDate.now().isEqual(verifiedDate) || LocalDate.now().isAfter(ChronoLocalDate.from(verifiedDate)));","lastModifiedDate":"2022-10-26"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-28"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"     * Credits to: https://stackoverflow.com/questions/2149680/regex-date-format-validation-on-java","lastModifiedDate":"2022-09-28"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"     * For regex example for YYYY-MM-DD","lastModifiedDate":"2022-09-28"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidFormat(String date) {","lastModifiedDate":"2022-09-28"},{"lineNumber":92,"author":{"gitId":"cowlinn"},"content":"        return date.matches(BIRTHDAY_VALIDATION_REGEX);","lastModifiedDate":"2022-09-28"},{"lineNumber":93,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-29"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"     * Parses a birthday in string form and checks for validity","lastModifiedDate":"2022-09-29"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"     * @param  s","lastModifiedDate":"2022-09-29"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"     * @return LocalDate","lastModifiedDate":"2022-09-29"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-26"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"    public static LocalDate parseBirthday(String s) {","lastModifiedDate":"2022-09-28"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(STANDARD_DATE);","lastModifiedDate":"2022-09-26"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-09-28"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"            LocalDate dateTime \u003d LocalDate.parse(s);","lastModifiedDate":"2022-09-28"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"        } catch (DateTimeParseException f) {","lastModifiedDate":"2022-09-28"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"            return LocalDate.parse(\"2000-05-05\"); //TODO: Change to a better default value","lastModifiedDate":"2022-10-15"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"        LocalDate dateTime \u003d LocalDate.parse(s);","lastModifiedDate":"2022-09-28"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"        return dateTime;","lastModifiedDate":"2022-09-26"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-29"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"     * Calculates a client\u0027s age based on his birthday input","lastModifiedDate":"2022-09-29"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"     * @return age","lastModifiedDate":"2022-09-29"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-29"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"    public int calculateAge() {","lastModifiedDate":"2022-09-26"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"        int currentYear \u003d LocalDate.now().getYear();","lastModifiedDate":"2022-09-28"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"        return currentYear - birthday.getYear();","lastModifiedDate":"2022-09-26"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":120,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":121,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":122,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-09-26"},{"lineNumber":123,"author":{"gitId":"cowlinn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-09-26"},{"lineNumber":124,"author":{"gitId":"cowlinn"},"content":"            return true;","lastModifiedDate":"2022-09-26"},{"lineNumber":125,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"        if (!(other instanceof Birthday)) {","lastModifiedDate":"2022-09-26"},{"lineNumber":127,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-09-26"},{"lineNumber":128,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":129,"author":{"gitId":"cowlinn"},"content":"        Birthday otherBirthday \u003d (Birthday) other;","lastModifiedDate":"2022-09-26"},{"lineNumber":130,"author":{"gitId":"cowlinn"},"content":"        if (this.getBirthday() \u003d\u003d null || otherBirthday.getBirthday() \u003d\u003d null) {","lastModifiedDate":"2022-09-26"},{"lineNumber":131,"author":{"gitId":"cowlinn"},"content":"            return this.getBirthday() \u003d\u003d otherBirthday.getBirthday();","lastModifiedDate":"2022-10-26"},{"lineNumber":132,"author":{"gitId":"cowlinn"},"content":"        } else {","lastModifiedDate":"2022-09-26"},{"lineNumber":133,"author":{"gitId":"cowlinn"},"content":"            return this.getBirthday().equals(otherBirthday.getBirthday());","lastModifiedDate":"2022-10-26"},{"lineNumber":134,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":135,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":136,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":137,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-09-28"},{"lineNumber":138,"author":{"gitId":"cowlinn"},"content":"    public String toString() {","lastModifiedDate":"2022-09-28"},{"lineNumber":139,"author":{"gitId":"cowlinn"},"content":"        return birthday.format(DateTimeFormatter","lastModifiedDate":"2022-09-28"},{"lineNumber":140,"author":{"gitId":"cowlinn"},"content":"                .ofLocalizedDate(FormatStyle.LONG));","lastModifiedDate":"2022-09-28"},{"lineNumber":141,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-28"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-09-28"},{"lineNumber":144,"author":{"gitId":"cowlinn"},"content":"    public int hashCode() {","lastModifiedDate":"2022-09-28"},{"lineNumber":145,"author":{"gitId":"cowlinn"},"content":"        return birthday.hashCode();","lastModifiedDate":"2022-09-28"},{"lineNumber":146,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-28"},{"lineNumber":147,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"ReubenChay":8,"cowlinn":139}},{"path":"src/main/java/longtimenosee/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cPerson\u003e EMAIL_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"            int platformCompare \u003d p1.getEmail().getPlatform().toUpperCase().compareTo(","lastModifiedDate":"2022-10-30"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"                    p2.getEmail().getPlatform().toUpperCase());","lastModifiedDate":"2022-10-30"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"            int nameCompare \u003d p1.getEmail().getEmailName().toLowerCase()","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"                    .compareTo(p2.getEmail().getEmailName().toLowerCase());","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"            if (platformCompare \u003d\u003d 0) { // same email platform used","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"                return nameCompare;","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"            return platformCompare;","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    public static final String SORT_EMAIL \u003d \"email\";","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"    private static final String AT_SYMBOL \u003d \"@\";","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-09-30"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"     * Returns the email name before the @ symbol","lastModifiedDate":"2022-09-30"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-09-30"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"    private String getEmailName() {","lastModifiedDate":"2022-09-30"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"        return this.value.substring(0, value.indexOf(AT_SYMBOL));","lastModifiedDate":"2022-09-30"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-09-30"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-09-30"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"     * Returns the email platform which the email is using","lastModifiedDate":"2022-09-30"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"     * eg. example@gmail.com will return gmail","lastModifiedDate":"2022-09-30"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-09-30"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"    private String getPlatform() {","lastModifiedDate":"2022-09-30"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"        int index \u003d value.indexOf(AT_SYMBOL);","lastModifiedDate":"2022-09-30"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"        String temp \u003d value.substring(index + 1, value.length());","lastModifiedDate":"2022-09-30"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"        return temp.substring(0, temp.indexOf(DOT));","lastModifiedDate":"2022-09-30"},{"lineNumber":91,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-09-30"},{"lineNumber":92,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":38,"-":70,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/person/Income.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-09-29"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":" * Immutable representation of a Person\u0027s income","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-09-29"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"public class Income {","lastModifiedDate":"2022-09-26"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cPerson\u003e INCOME_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"            return Double.compare(p1.getIncome().getIncome(), p2.getIncome().getIncome());","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Please enter a decimal number for your income\";","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    public static final String SORT_INCOME \u003d \"income\";","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public static final String VALUE_FORMAT_CONSTRAINTS \u003d \"Please ensure your income is a positive value :D\";","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"    public final String value;","lastModifiedDate":"2022-09-29"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    public final IncomeBracket incomeBracket;","lastModifiedDate":"2022-10-13"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"    private double income;","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-30"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"     * Constructs an {@code Income}.","lastModifiedDate":"2022-10-30"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-30"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"     * @param income A valid email address.","lastModifiedDate":"2022-10-30"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-30"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"    public Income(String income) {","lastModifiedDate":"2022-10-30"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"        value \u003d income;","lastModifiedDate":"2022-10-30"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"        this.income \u003d Double.valueOf(income);","lastModifiedDate":"2022-10-30"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"        this.incomeBracket \u003d parseIncome(this.income);","lastModifiedDate":"2022-10-30"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-30"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"     * Rejects negative income values","lastModifiedDate":"2022-10-30"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"     * Asserts that income passed in can be cast into a valid double value","lastModifiedDate":"2022-10-30"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"     * @param income value","lastModifiedDate":"2022-10-30"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-30"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"    public static boolean isPositiveIncome(String income) {","lastModifiedDate":"2022-10-30"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"        assert(isValidFormat(income));","lastModifiedDate":"2022-10-30"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"        double incomeValue \u003d Double.valueOf(income);","lastModifiedDate":"2022-10-30"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"        return incomeValue \u003e\u003d 0;","lastModifiedDate":"2022-10-30"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"     * Classifies a yearly income value into it\u0027s appropriate income bracket","lastModifiedDate":"2022-10-13"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"     * This information is based off IRAS values for FY 2023/24","lastModifiedDate":"2022-10-13"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"     * @ shorturl.at/oPQRV","lastModifiedDate":"2022-10-13"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"    public enum IncomeBracket {","lastModifiedDate":"2022-10-13"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"        First(\"first\"), Second(\"second\"), Third(\"third\"),","lastModifiedDate":"2022-10-30"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"        Fourth(\"fourth\"), Fifth(\"fifth\"), Sixth(\"sixth\"),","lastModifiedDate":"2022-10-30"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        Seventh(\"seventh\"), Eight(\"eighth\"), Ninth(\"ninth\"),","lastModifiedDate":"2022-10-30"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"        Tenth(\"tenth\");","lastModifiedDate":"2022-10-30"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"        private String message;","lastModifiedDate":"2022-10-13"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"        IncomeBracket(String message) {","lastModifiedDate":"2022-10-13"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"            this.message \u003d message;","lastModifiedDate":"2022-10-13"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"        public String toString() {","lastModifiedDate":"2022-10-13"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"            return \"The income for this individual falls in the \"","lastModifiedDate":"2022-10-13"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"                    + message + \" bracket\";","lastModifiedDate":"2022-10-13"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"     * Parses the given income into the appropriate income bracket.","lastModifiedDate":"2022-10-13"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"     * @param income","lastModifiedDate":"2022-10-13"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-10-13"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"    public static IncomeBracket parseIncome(double income) {","lastModifiedDate":"2022-10-13"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"        if (income \u003c\u003d 30000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.First;","lastModifiedDate":"2022-10-13"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 40000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Second;","lastModifiedDate":"2022-10-13"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 80000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Third;","lastModifiedDate":"2022-10-13"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 120000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Fourth;","lastModifiedDate":"2022-10-13"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 160000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Fifth;","lastModifiedDate":"2022-10-13"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 200000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Sixth;","lastModifiedDate":"2022-10-13"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 240000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Seventh;","lastModifiedDate":"2022-10-13"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 280000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Eight;","lastModifiedDate":"2022-10-13"},{"lineNumber":92,"author":{"gitId":"cowlinn"},"content":"        } else if (income \u003c\u003d 320000) {","lastModifiedDate":"2022-10-13"},{"lineNumber":93,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Ninth;","lastModifiedDate":"2022-10-13"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"        } else {","lastModifiedDate":"2022-10-13"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"            return IncomeBracket.Tenth;","lastModifiedDate":"2022-10-13"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"    public IncomeBracket getIncomeBracket() {","lastModifiedDate":"2022-10-13"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"        return incomeBracket;","lastModifiedDate":"2022-10-13"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"    public double getIncome() {","lastModifiedDate":"2022-09-26"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"        return income;","lastModifiedDate":"2022-09-26"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-29"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"     * Checks if income format is valid","lastModifiedDate":"2022-09-29"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"     * @param income","lastModifiedDate":"2022-09-29"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"     * @return","lastModifiedDate":"2022-09-29"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-29"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidFormat(String income) {","lastModifiedDate":"2022-09-28"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"        try {","lastModifiedDate":"2022-09-28"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"            double testIncome \u003d Double.valueOf(income);","lastModifiedDate":"2022-09-28"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2022-09-28"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-09-28"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"        return true;","lastModifiedDate":"2022-09-28"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-28"},{"lineNumber":120,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":121,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-09-26"},{"lineNumber":122,"author":{"gitId":"cowlinn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-09-26"},{"lineNumber":123,"author":{"gitId":"cowlinn"},"content":"            return true;","lastModifiedDate":"2022-09-26"},{"lineNumber":124,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":125,"author":{"gitId":"cowlinn"},"content":"        if (!(other instanceof Income)) {","lastModifiedDate":"2022-09-26"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-09-26"},{"lineNumber":127,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":128,"author":{"gitId":"cowlinn"},"content":"        Income otherIncome \u003d (Income) other;","lastModifiedDate":"2022-09-26"},{"lineNumber":129,"author":{"gitId":"cowlinn"},"content":"        return this.getIncome() \u003d\u003d (otherIncome.getIncome());","lastModifiedDate":"2022-09-26"},{"lineNumber":130,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":131,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":132,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-09-28"},{"lineNumber":133,"author":{"gitId":"cowlinn"},"content":"    public String toString() {","lastModifiedDate":"2022-09-28"},{"lineNumber":134,"author":{"gitId":"cowlinn"},"content":"        return incomeBracket.toString();","lastModifiedDate":"2022-10-13"},{"lineNumber":135,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-28"},{"lineNumber":136,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":137,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":138,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"ReubenChay":10,"cowlinn":128}},{"path":"src/main/java/longtimenosee/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"    public static final int MAXIMUM_NAME_LENGTH \u003d 100;","lastModifiedDate":"2022-10-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"    public static final String LENGTH_CONSTRAINTS \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"            \"Names should not be more than \" + MAXIMUM_NAME_LENGTH","lastModifiedDate":"2022-10-26"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"                   + \" characters in length\";","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cPerson\u003e NAME_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-09-30"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-09-30"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"            return p1.getName().fullName.toUpperCase().compareTo(","lastModifiedDate":"2022-10-30"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"                    p2.getName().fullName.toUpperCase());","lastModifiedDate":"2022-10-30"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-09-30"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-09-30"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    public static final String SORT_NAME \u003d \"name\";","lastModifiedDate":"2022-09-30"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"        checkArgument(isValidLength(name), LENGTH_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"     * Returns true if a given string is of a valid length.","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"     * Presumes that the string is a valid name","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"     * This accounts for the case where the string is empty.","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidLength(String test) {","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"        return test.length() \u003c\u003d MAXIMUM_NAME_LENGTH;","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":12,"cowlinn":14,"-":56,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cPerson\u003e DEFAULT_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"            return p1.getLocalDateTime().compareTo(p2.getLocalDateTime());","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"    public static final String SORT_DEFAULT \u003d \"default\";","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"    private final LocalDateTime timeStamp;","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"loyhongshenggg"},"content":"    // indicate pinned client","lastModifiedDate":"2022-10-09"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"    private Boolean pin \u003d false;","lastModifiedDate":"2022-10-09"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    private Set\u003cAssignedPolicy\u003e assignedPolicies \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    private Birthday birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"    //private PersonNotes notes; //TODO: Just a string","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"    private Income income;","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"    private RiskAppetite ra;","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"                  Birthday birthday, Income income, RiskAppetite ra) {","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        requireAllNonNull(name, phone, email, address, tags, birthday, income, ra);","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        this.timeStamp \u003d LocalDateTime.now();","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"        this.income \u003d income;","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"        this.ra \u003d ra;","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":63,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"loyhongshenggg"},"content":"     * Constructor for person with pin.","lastModifiedDate":"2022-10-10"},{"lineNumber":65,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"                  Birthday birthday, Income income, RiskAppetite ra,","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"                  boolean pin) {","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"        requireAllNonNull(name, phone, email, address, tags, birthday, income, ra);","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"loyhongshenggg"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-10-09"},{"lineNumber":71,"author":{"gitId":"loyhongshenggg"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2022-10-09"},{"lineNumber":72,"author":{"gitId":"loyhongshenggg"},"content":"        this.email \u003d email;","lastModifiedDate":"2022-10-09"},{"lineNumber":73,"author":{"gitId":"loyhongshenggg"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-10-09"},{"lineNumber":74,"author":{"gitId":"loyhongshenggg"},"content":"        this.timeStamp \u003d LocalDateTime.now();","lastModifiedDate":"2022-10-10"},{"lineNumber":75,"author":{"gitId":"loyhongshenggg"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2022-10-09"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"        this.income \u003d income;","lastModifiedDate":"2022-10-12"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        this.ra \u003d ra;","lastModifiedDate":"2022-10-12"},{"lineNumber":79,"author":{"gitId":"loyhongshenggg"},"content":"        this.pin \u003d pin;","lastModifiedDate":"2022-10-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"     * Constructor for person with assigned policies.","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"                  Birthday birthday, Income income, RiskAppetite ra,","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"                  Set\u003cAssignedPolicy\u003e policies, boolean pin) {","lastModifiedDate":"2022-10-18"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"        requireAllNonNull(name, phone, email, address, tags, birthday, income, ra);","lastModifiedDate":"2022-10-18"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-10-18"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"        this.email \u003d email;","lastModifiedDate":"2022-10-18"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"        this.timeStamp \u003d LocalDateTime.now();","lastModifiedDate":"2022-10-18"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2022-10-18"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2022-10-18"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"        this.income \u003d income;","lastModifiedDate":"2022-10-18"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"        this.ra \u003d ra;","lastModifiedDate":"2022-10-18"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"        this.pin \u003d pin;","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"        this.assignedPolicies \u003d policies;","lastModifiedDate":"2022-10-18"},{"lineNumber":100,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":101,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":118,"author":{"gitId":"ReubenChay"},"content":"    public LocalDateTime getLocalDateTime() {","lastModifiedDate":"2022-10-01"},{"lineNumber":119,"author":{"gitId":"ReubenChay"},"content":"        return this.timeStamp;","lastModifiedDate":"2022-10-01"},{"lineNumber":120,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":121,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":122,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":123,"author":{"gitId":"Ssatu"},"content":"     * Returns an immutable policy set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-10-18"},{"lineNumber":124,"author":{"gitId":"Ssatu"},"content":"     * if modification is attempted.","lastModifiedDate":"2022-10-18"},{"lineNumber":125,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":126,"author":{"gitId":"Ssatu"},"content":"    public Set\u003cAssignedPolicy\u003e getAssignedPolicies() {","lastModifiedDate":"2022-10-18"},{"lineNumber":127,"author":{"gitId":"Ssatu"},"content":"        return Collections.unmodifiableSet(assignedPolicies);","lastModifiedDate":"2022-10-18"},{"lineNumber":128,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":129,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"loyhongshenggg"},"content":"    public void setPin(boolean b) {","lastModifiedDate":"2022-10-09"},{"lineNumber":139,"author":{"gitId":"loyhongshenggg"},"content":"        this.pin \u003d b;","lastModifiedDate":"2022-10-09"},{"lineNumber":140,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":141,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":142,"author":{"gitId":"loyhongshenggg"},"content":"    public boolean getPin() {","lastModifiedDate":"2022-10-09"},{"lineNumber":143,"author":{"gitId":"loyhongshenggg"},"content":"        return this.pin;","lastModifiedDate":"2022-10-09"},{"lineNumber":144,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":145,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":146,"author":{"gitId":"Ssatu"},"content":"    public boolean addPolicy(AssignedPolicy assignedPolicy) {","lastModifiedDate":"2022-10-18"},{"lineNumber":147,"author":{"gitId":"Ssatu"},"content":"        return assignedPolicies.add(assignedPolicy);","lastModifiedDate":"2022-10-18"},{"lineNumber":148,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":149,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":150,"author":{"gitId":"Ssatu"},"content":"    public boolean removePolicy(AssignedPolicy assignedPolicy) {","lastModifiedDate":"2022-10-22"},{"lineNumber":151,"author":{"gitId":"Ssatu"},"content":"        return assignedPolicies.remove(assignedPolicy);","lastModifiedDate":"2022-10-22"},{"lineNumber":152,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":153,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":154,"author":{"gitId":"cowlinn"},"content":"    public Birthday getBirthday() {","lastModifiedDate":"2022-10-12"},{"lineNumber":155,"author":{"gitId":"cowlinn"},"content":"        return this.birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":156,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":157,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":158,"author":{"gitId":"cowlinn"},"content":"    public RiskAppetite getRiskAppetite() {","lastModifiedDate":"2022-10-12"},{"lineNumber":159,"author":{"gitId":"cowlinn"},"content":"        return this.ra;","lastModifiedDate":"2022-10-12"},{"lineNumber":160,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":161,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":162,"author":{"gitId":"cowlinn"},"content":"    public Income getIncome() {","lastModifiedDate":"2022-10-12"},{"lineNumber":163,"author":{"gitId":"cowlinn"},"content":"        return this.income;","lastModifiedDate":"2022-10-12"},{"lineNumber":164,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":165,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":198,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())","lastModifiedDate":"2022-10-12"},{"lineNumber":199,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherPerson.getRiskAppetite().equals(getRiskAppetite())","lastModifiedDate":"2022-10-12"},{"lineNumber":200,"author":{"gitId":"cowlinn"},"content":"                \u0026\u0026 otherPerson.getIncome().equals(getIncome());","lastModifiedDate":"2022-10-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":206,"author":{"gitId":"cowlinn"},"content":"        return Objects.hash(name, phone, email, address, tags, birthday, income, ra);","lastModifiedDate":"2022-10-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":212,"author":{"gitId":"cowlinn"},"content":"        builder.append(\"\\n\" + \"Name: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":213,"author":{"gitId":"cowlinn"},"content":"                .append(getName() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":214,"author":{"gitId":"cowlinn"},"content":"                .append(\"Phone: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":215,"author":{"gitId":"cowlinn"},"content":"                .append(getPhone() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":216,"author":{"gitId":"cowlinn"},"content":"                .append(\"Email: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":217,"author":{"gitId":"cowlinn"},"content":"                .append(getEmail() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":218,"author":{"gitId":"cowlinn"},"content":"                .append(\"Address: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":219,"author":{"gitId":"cowlinn"},"content":"                .append(getAddress() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":220,"author":{"gitId":"cowlinn"},"content":"                .append(\"Birthday: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":221,"author":{"gitId":"cowlinn"},"content":"                .append(getBirthday() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":222,"author":{"gitId":"cowlinn"},"content":"                .append(\"Income: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":223,"author":{"gitId":"cowlinn"},"content":"                .append(getIncome() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":224,"author":{"gitId":"cowlinn"},"content":"                .append(\"RiskLevel: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":225,"author":{"gitId":"cowlinn"},"content":"                .append(getRiskAppetite());","lastModifiedDate":"2022-10-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":235,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":15,"loyhongshenggg":22,"Ssatu":38,"cowlinn":48,"-":109,"marcusczh":3}},{"path":"src/main/java/longtimenosee/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\"","lastModifiedDate":"2022-10-27"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"            + \" and not more than 25 digits in length. \";","lastModifiedDate":"2022-10-27"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,25}\";","lastModifiedDate":"2022-10-27"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cPerson\u003e PHONE_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-09-30"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-09-30"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"            return p1.getPhone().value.compareTo(p2.getPhone().value);","lastModifiedDate":"2022-09-30"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-09-30"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-09-30"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"    public static final String SORT_PHONE \u003d \"phone\";","lastModifiedDate":"2022-09-30"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":10,"cowlinn":3,"-":50,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/person/RiskAppetite.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-09-26"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":" *  Encapsulation for a client\u0027s RiskAppetite","lastModifiedDate":"2022-09-29"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-09-26"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"public class RiskAppetite {","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    public static final Comparator\u003cPerson\u003e RISK_APPETITE_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"            RiskLevel ra1 \u003d p1.getRiskAppetite().getRiskLevel();","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"            RiskLevel ra2 \u003d p2.getRiskAppetite().getRiskLevel();","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"            if (ra1 \u003d\u003d ra2) {","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"                return 0;","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"            } else if (ra1 \u003d\u003d RiskLevel.HIGH \u0026\u0026 (ra2 \u003d\u003d RiskLevel.LOW || ra2 \u003d\u003d RiskLevel.MEDIUM)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"                return 1;","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"            } else if (ra1 \u003d\u003d RiskLevel.MEDIUM \u0026\u0026 ra2 \u003d\u003d RiskLevel.LOW) {","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"                return 1;","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"            } else if (ra2 \u003d\u003d RiskLevel.HIGH \u0026\u0026 (ra1 \u003d\u003d RiskLevel.LOW || ra1 \u003d\u003d RiskLevel.MEDIUM)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"                return -1;","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"            } else {","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"                return -1;","lastModifiedDate":"2022-10-17"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"    };","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Error: RiskAppetite must be one \"","lastModifiedDate":"2022-09-29"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"            + \"of the following indicators: \"","lastModifiedDate":"2022-09-29"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"            + \"{H, M, L}\";","lastModifiedDate":"2022-09-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"    public static final List\u003cString\u003e MESSAGE_VALIDATION \u003d Collections.unmodifiableList(List.of(\"H\", \"M\", \"L\"));","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"    public static final String SORT_RISK_APPETITE \u003d \"risk appetite\";","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"    public final String value;","lastModifiedDate":"2022-09-29"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    private final RiskLevel rl;","lastModifiedDate":"2022-09-29"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-29"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"     * Enumerator representing RiskLevel.","lastModifiedDate":"2022-09-29"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"     * Encapsulates 3 different categories, High, Medium and Low risk.","lastModifiedDate":"2022-09-29"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"     * Tagged with messages to be represented in String format.","lastModifiedDate":"2022-09-29"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-29"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"    public enum RiskLevel {","lastModifiedDate":"2022-09-26"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"        HIGH(\"High\"), MEDIUM(\"Medium\"), LOW(\"Low\");","lastModifiedDate":"2022-09-28"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"        private String message;","lastModifiedDate":"2022-09-28"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        RiskLevel(String message) {","lastModifiedDate":"2022-09-28"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"            this.message \u003d message;","lastModifiedDate":"2022-09-28"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-09-28"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"        public String toString() {","lastModifiedDate":"2022-09-28"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"            return message;","lastModifiedDate":"2022-09-28"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-28"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-29"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"     * Default constructor.","lastModifiedDate":"2022-09-29"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"     * @param riskLevel","lastModifiedDate":"2022-09-29"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-29"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"    public RiskAppetite(String riskLevel) {","lastModifiedDate":"2022-09-28"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"        requireNonNull(riskLevel);","lastModifiedDate":"2022-10-30"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"        value \u003d riskLevel;","lastModifiedDate":"2022-09-28"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"        rl \u003d parseRiskLevel(riskLevel);","lastModifiedDate":"2022-09-28"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"    public RiskLevel getRiskLevel() {","lastModifiedDate":"2022-09-26"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"        return this.rl;","lastModifiedDate":"2022-09-26"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marcusczh"},"content":"     * Returns true if a given string is a valid risk appetite.","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marcusczh"},"content":"     * @param ra is the input string to be tested","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"marcusczh"},"content":"     * @return boolean to indicate if the given string is a valid risk appetite","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"    public static boolean isValidFormat(String ra) {","lastModifiedDate":"2022-09-29"},{"lineNumber":84,"author":{"gitId":"marcusczh"},"content":"        return MESSAGE_VALIDATION.contains(ra);","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-29"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-09-26"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"     * Utility function to parse risklevel from string","lastModifiedDate":"2022-09-26"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"     * @param indicator to parseRiskLevel from Json","lastModifiedDate":"2022-09-26"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"     * @return the appropriate risklevel wrapped in an enum","lastModifiedDate":"2022-09-26"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-09-26"},{"lineNumber":92,"author":{"gitId":"cowlinn"},"content":"    public static RiskLevel parseRiskLevel(String indicator) {","lastModifiedDate":"2022-09-26"},{"lineNumber":93,"author":{"gitId":"cowlinn"},"content":"        switch (indicator) {","lastModifiedDate":"2022-09-26"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"        case \"H\":","lastModifiedDate":"2022-09-26"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"            return RiskLevel.HIGH;","lastModifiedDate":"2022-09-26"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"        case \"M\":","lastModifiedDate":"2022-09-26"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"            return RiskLevel.MEDIUM;","lastModifiedDate":"2022-09-26"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"        case \"L\":","lastModifiedDate":"2022-09-26"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"            return RiskLevel.LOW;","lastModifiedDate":"2022-09-26"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"        default:","lastModifiedDate":"2022-09-29"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"            return RiskLevel.HIGH;","lastModifiedDate":"2022-10-17"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-09-26"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-09-26"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"            return true;","lastModifiedDate":"2022-09-26"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"        if (!(other instanceof RiskAppetite)) {","lastModifiedDate":"2022-09-26"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"            return false;","lastModifiedDate":"2022-09-26"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"        RiskAppetite otherRA \u003d (RiskAppetite) other;","lastModifiedDate":"2022-09-26"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"        boolean isSameRA \u003d this.getRiskLevel() \u003d\u003d otherRA.getRiskLevel();","lastModifiedDate":"2022-09-26"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"        return isSameRA;","lastModifiedDate":"2022-09-28"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":120,"author":{"gitId":"cowlinn"},"content":"    @Override","lastModifiedDate":"2022-09-28"},{"lineNumber":121,"author":{"gitId":"cowlinn"},"content":"    public String toString() {","lastModifiedDate":"2022-09-28"},{"lineNumber":122,"author":{"gitId":"cowlinn"},"content":"        return rl.toString();","lastModifiedDate":"2022-09-28"},{"lineNumber":123,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-09-28"},{"lineNumber":124,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":125,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"ReubenChay":22,"cowlinn":91,"marcusczh":12}},{"path":"src/main/java/longtimenosee/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-09-30"},{"lineNumber":105,"author":{"gitId":"ReubenChay"},"content":"     * Sorts the contents of this list using the comparator","lastModifiedDate":"2022-09-30"},{"lineNumber":106,"author":{"gitId":"ReubenChay"},"content":"     * @param comparator comparator used in sorting","lastModifiedDate":"2022-09-30"},{"lineNumber":107,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-09-30"},{"lineNumber":108,"author":{"gitId":"ReubenChay"},"content":"    public void sort(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2022-09-30"},{"lineNumber":109,"author":{"gitId":"ReubenChay"},"content":"        FXCollections.sort(internalList, comparator);","lastModifiedDate":"2022-09-30"},{"lineNumber":110,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-09-30"},{"lineNumber":111,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":150,"author":{"gitId":"cowlinn"},"content":"     * Returns true if {@code persons} contains a person with a given name.","lastModifiedDate":"2022-10-16"},{"lineNumber":151,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":152,"author":{"gitId":"cowlinn"},"content":"    public boolean hasPersonByName(String personName) {","lastModifiedDate":"2022-10-16"},{"lineNumber":153,"author":{"gitId":"cowlinn"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {","lastModifiedDate":"2022-10-16"},{"lineNumber":154,"author":{"gitId":"cowlinn"},"content":"            Person p \u003d internalList.get(i);","lastModifiedDate":"2022-10-16"},{"lineNumber":155,"author":{"gitId":"cowlinn"},"content":"            if (p.getName().fullName.equals(personName)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":156,"author":{"gitId":"cowlinn"},"content":"                return true;","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-16"},{"lineNumber":158,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"cowlinn"},"content":"        return false;","lastModifiedDate":"2022-10-16"},{"lineNumber":160,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ReubenChay":9,"loyhongshenggg":3,"cowlinn":12,"-":133,"marcusczh":4}},{"path":"src/main/java/longtimenosee/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"-":10,"marcusczh":1}},{"path":"src/main/java/longtimenosee/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"-":5,"marcusczh":1}},{"path":"src/main/java/longtimenosee/model/person/predicate/AddressContainsInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Person}\u0027s {@code Address} matches the input given.","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class AddressContainsInputPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    private final String address;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"     * Constructs a AddressMatchesInputPredicate object, which consists of an address input.","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * @param address is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"    public AddressContainsInputPredicate(String address) {","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        assert address.length() !\u003d 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        return person.getAddress().value.toLowerCase().contains(address.toLowerCase());","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof AddressContainsInputPredicate) {","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                return address.equals(((AddressContainsInputPredicate) other).address);","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-05"}],"authorContributionMap":{"marcusczh":40}},{"path":"src/main/java/longtimenosee/model/person/predicate/BirthdayMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Person}\u0027s {@code Birthday} matches the input given.","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"public class BirthdayMatchesInputPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    private final String birthday;","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"     * Constructs a BirthdayMatchesInputPredicate object, which consists of a birthday input.","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     * @param birthday is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"    public BirthdayMatchesInputPredicate(String birthday) {","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assert birthday.length() !\u003d 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        assert birthday.length() \u003d\u003d 10;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        LocalDate personBirthday \u003d person.getBirthday().getBirthday();","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        LocalDate inputDate \u003d LocalDate.parse(birthday);","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        return personBirthday.equals(inputDate);","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof BirthdayMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"                return birthday.equals(((BirthdayMatchesInputPredicate) other).birthday);","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"marcusczh":44}},{"path":"src/main/java/longtimenosee/model/person/predicate/EmailMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Person}\u0027s {@code Email} matches the input given.","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class EmailMatchesInputPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    private final String input;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"     * Constructs an EmailMatchesInputPredicate object, which consists of an input.","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * @param input is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"    public EmailMatchesInputPredicate(String input) {","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        assert input.length() !\u003d 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assert input.contains(\"@\");","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        this.input \u003d input;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        return person.getEmail().value.equalsIgnoreCase(input);","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof EmailMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"                return input.equals(((EmailMatchesInputPredicate) other).input);","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-05"}],"authorContributionMap":{"marcusczh":41}},{"path":"src/main/java/longtimenosee/model/person/predicate/IncomeMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Income.IncomeBracket;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Person}\u0027s {@code Income} falls under the same income bracket as the input provided.","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"public class IncomeMatchesInputPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    private final String income;","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * Constructs an IncomeMatchesInputPredicate object, which consists of an income input.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     * @param income is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    public IncomeMatchesInputPredicate(String income) {","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        assert income.length() !\u003d 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        this.income \u003d income;","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        IncomeBracket personIncomeBracket \u003d person.getIncome().getIncomeBracket();","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        IncomeBracket inputIncomeBracket \u003d Income.parseIncome(Double.parseDouble(income));","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        return personIncomeBracket.equals(inputIncomeBracket);","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof IncomeMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"                return income.equals(((IncomeMatchesInputPredicate) other).income);","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"marcusczh":44}},{"path":"src/main/java/longtimenosee/model/person/predicate/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * Constructs a NameContainsKeywordsPredicate object, which consists of a keywords input.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     * @param keywords is the keywords input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":29,"marcusczh":8}},{"path":"src/main/java/longtimenosee/model/person/predicate/PhoneContainsNumberPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Person}\u0027s {@code Phone} number matches the given number.","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class PhoneContainsNumberPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    private final String number;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"     * Constructs a PhoneMatchesNumberPredicate object, which consists of a number input.","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * @param number is the input by the user to be compared.","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"    public PhoneContainsNumberPredicate(String number) {","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        assert number.length() \u003e\u003d 3;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        this.number \u003d number;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        return person.getPhone().value.contains(number);","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof PhoneContainsNumberPredicate) {","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                return number.equals(((PhoneContainsNumberPredicate) other).number);","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-05"}],"authorContributionMap":{"marcusczh":40}},{"path":"src/main/java/longtimenosee/model/person/predicate/PinnedPersonPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-09"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-09"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":" * Tests that a {@code pinned} is true or false to see if a contact is pinned.","lastModifiedDate":"2022-10-09"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"public class PinnedPersonPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"    public PinnedPersonPredicate() {","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-09"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"        boolean pinned \u003d true;","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"        return person.getPin() \u003d\u003d pinned;","lastModifiedDate":"2022-10-09"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-09"}],"authorContributionMap":{"loyhongshenggg":18,"marcusczh":3}},{"path":"src/main/java/longtimenosee/model/person/predicate/PolicyCompanyMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code AssignedPolicy}\u0027s {@code Policy} {@code Company} for a given {@code Person} matches the","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":" * keyword given.","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"public class PolicyCompanyMatchesInputPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    private final String input;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * Constructs a PolicyCompanyMatchesInputPredicate object, which consists of an input.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     * @param input is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    public PolicyCompanyMatchesInputPredicate(String input) {","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        assert input.length() !\u003d 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        this.input \u003d input;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        for (AssignedPolicy assignedPolicy : person.getAssignedPolicies()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"            if (assignedPolicy.getPolicy().getCompany().value.equals(input)) {","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"                return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof PolicyCompanyMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"                return input.equals(((PolicyCompanyMatchesInputPredicate) other).input);","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":47}},{"path":"src/main/java/longtimenosee/model/person/predicate/PolicyCoverageMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code AssignedPolicy}\u0027s {@code Policy} {@code Coverage} for a given {@code Person} matches any of the","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":" * keywords given.","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"public class PolicyCoverageMatchesInputPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"     * Constructs a PolicyCoverageMatchesInputPredicate object, which consists of a keywords input.","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"     * @param keywords is the keywords input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    public PolicyCoverageMatchesInputPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        assert !keywords.isEmpty();","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        boolean[] isMatch \u003d new boolean[keywords.size()];","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        for (int i \u003d 0; i \u003c keywords.size(); i++) {","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"            for (Coverage coverage : getCoverages(person)) {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                if (StringUtil.containsWordIgnoreCase(coverage.coverageType, keywords.get(i))) {","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"                    isMatch[i] \u003d true;","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"                    break;","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"                }","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        return isAllTrue(isMatch);","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"    private boolean isAllTrue(boolean[] arr) {","lastModifiedDate":"2022-10-24"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"        for (boolean bool : arr) {","lastModifiedDate":"2022-10-24"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"            if (!bool) {","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-24"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        return true;","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"    private static List\u003cCoverage\u003e getCoverages(Person person) {","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        List\u003cCoverage\u003e coverages \u003d new ArrayList\u003cCoverage\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        for (AssignedPolicy assignedPolicy : person.getAssignedPolicies()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"            coverages.addAll(assignedPolicy.getPolicy().getCoverages());","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"        return coverages;","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof PolicyCoverageMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"                return keywords.equals(((PolicyCoverageMatchesInputPredicate) other).keywords);","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":71}},{"path":"src/main/java/longtimenosee/model/person/predicate/PolicyTitleContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code AssignedPolicy}\u0027s {@code Policy} {@code Title} for a given {@code Person} matches any of the","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":" * keywords given.","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"public class PolicyTitleContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     * Constructs a PolicyTitleContainsKeywordsPredicate object, which consists of a keywords input.","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"     * @param keywords is the keywords input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"    public PolicyTitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        assert !keywords.isEmpty();","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        for (String keyword : keywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"            for (AssignedPolicy assignedPolicy : person.getAssignedPolicies()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"                if (StringUtil.containsWordIgnoreCase(assignedPolicy.getPolicy().getTitle().fullTitle, keyword)) {","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"                    return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"                }","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof PolicyTitleContainsKeywordsPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"                return keywords.equals(((PolicyTitleContainsKeywordsPredicate) other).keywords);","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":51}},{"path":"src/main/java/longtimenosee/model/person/predicate/RiskAppetiteMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.RiskAppetite.RiskLevel;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Person}\u0027s {@code RiskAppetite} is the same as the input provided.","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"public class RiskAppetiteMatchesInputPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    private final String riskAppetite;","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * Constructs a RiskAppetiteMatchesInputPredicate object, which consists of a risk appetite input.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     * @param riskAppetite is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    public RiskAppetiteMatchesInputPredicate(String riskAppetite) {","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        assert riskAppetite.length() \u003d\u003d 1;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        this.riskAppetite \u003d riskAppetite;","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        RiskLevel personRiskLevel \u003d person.getRiskAppetite().getRiskLevel();","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        RiskLevel inputRiskLevel \u003d RiskAppetite.parseRiskLevel(riskAppetite);","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        return personRiskLevel.equals(inputRiskLevel);","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof RiskAppetiteMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"                return riskAppetite.equals(((RiskAppetiteMatchesInputPredicate) other).riskAppetite);","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"marcusczh":44}},{"path":"src/main/java/longtimenosee/model/person/predicate/TagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given.","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     * Constructs a TagContainsKeywordsPredicate object, which consists of a keywords input.","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     * @param keywords is the keywords input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        assert !keywords.isEmpty();","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        boolean[] isMatch \u003d new boolean[keywords.size()];","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        for (int i \u003d 0; i \u003c keywords.size(); i++) {","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"            for (Tag tag : person.getTags()) {","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"                if (StringUtil.containsWordIgnoreCase(tag.tagName, keywords.get(i))) {","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"                    isMatch[i] \u003d true;","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"                    break;","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                }","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-05"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-05"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        return isAllTrue(isMatch);","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-05"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"    private boolean isAllTrue(boolean[] arr) {","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        for (boolean bool : arr) {","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"            if (!bool) {","lastModifiedDate":"2022-10-24"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-05"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-05"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        return true;","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof TagContainsKeywordsPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"                return keywords.equals(((TagContainsKeywordsPredicate) other).keywords);","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-05"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"}],"authorContributionMap":{"marcusczh":62}},{"path":"src/main/java/longtimenosee/model/policy/AssignedPolicy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"import java.time.Period;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" * An assigned policy is an encapsulation of the necessary details","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":" * of an insurance policy undertaken by a client.","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"public class AssignedPolicy {","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"End date should not be before Start date\";","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    public final Policy policy;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"    public final Premium premium;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public final PolicyDate startDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"    public final PolicyDate endDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"     * Construct an AssignedPolicy object.","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"     * @param policy","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     * @param premium Must be a valid yearly premium.","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     * @param startDate Must be a valid date, after 1900, and before 2100.","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     * @param endDate Must be a valid date, after startDate and 1900, and before 2100.","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public AssignedPolicy(Policy policy, Premium premium, PolicyDate startDate, PolicyDate endDate) {","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"        requireAllNonNull(policy, premium, startDate, endDate);","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        this.premium \u003d premium;","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"        this.policy \u003d policy;","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"     * Returns true if given start date is before the end date.","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"    public static boolean isChronological(PolicyDate startDate, PolicyDate endDate) {","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        return startDate.getDate().isBefore(endDate.getDate());","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"     * Returns the duration between start date and end date.","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"    public Period getDuration(LocalDate date) {","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"        Period diff \u003d Period.between(LocalDate.parse(startDate.getDate().toString()),","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"                LocalDate.parse(date.toString()));","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"loyhongshenggg"},"content":"        return diff;","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"    public Policy getPolicy() {","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"        return this.policy;","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"    public Premium getPremium() {","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        return this.premium;","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"    public PolicyDate getStartDate() {","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"        return this.startDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"    public PolicyDate getEndDate() {","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"        return this.endDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"    public boolean isSamePolicy(Policy policyToCheck) {","lastModifiedDate":"2022-10-22"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"        return this.policy.isSamePolicy(policyToCheck);","lastModifiedDate":"2022-10-22"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"        final StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"        sb.append(this.policy.toString())","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"                .append(\"\\n\" + \"Premium: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"                .append(getPremium() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"                .append(\"Start: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"                .append(getStartDate() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"                .append(\"End: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"                .append(getEndDate() + \"\\n\");","lastModifiedDate":"2022-10-27"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"        return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"     * Returns true if both AssignedPolicies have the same policy.","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"     * This defines a weaker notion of equality between two AssignedPolicies.","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"            return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"        if (!(other instanceof AssignedPolicy)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"            return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"        AssignedPolicy otherAssignedPolicy \u003d (AssignedPolicy) other;","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"Ssatu"},"content":"        return otherAssignedPolicy !\u003d null","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 otherAssignedPolicy.getPolicy().equals(getPolicy());","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"Ssatu"},"content":"        return Objects.hash(this.getPolicy());","lastModifiedDate":"2022-10-18"},{"lineNumber":107,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"loyhongshenggg":10,"Ssatu":94,"cowlinn":6}},{"path":"src/main/java/longtimenosee/model/policy/Commission.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":" * Represents a Policy\u0027s commission.","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCommission(String)}","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"public class Commission {","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Commissions should take the format of \u00271st yr %, 2nd yr %, \"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"            + \" 3rd year and beyond %\u0027  : \";","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"    /*","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public static final String VALIDATION_REGEX \u003d \"((([1-9]\\\\d*)?\\\\d)(\\\\.\\\\d*)?%(\\\\s)?){3}\";","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    public final String value;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    public final float[] percentages;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     * Constructs an {@code Commission}.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"     * @param commission A valid commission.","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    public Commission(String commission) {","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(commission);","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        checkArgument(isValidCommission(commission), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"        value \u003d commission;","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"        percentages \u003d parseCommission(commission);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"     * Returns true if a given string is a valid commission.","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    public static boolean isValidCommission(String test) {","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"     * Utility function to parse parseCommission from string","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"     * @param indicator to parseCommission from Json","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"     * @return the appropriate array of Commission percentages","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"    public static float[] parseCommission(String indicator) {","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"        String[] commissions \u003d indicator.split(\"%\");","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"loyhongshenggg"},"content":"        float[] percentages \u003d new float[commissions.length];","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"loyhongshenggg"},"content":"        for (int i \u003d 0; i \u003c commissions.length; i++) {","lastModifiedDate":"2022-10-20"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"            percentages[i] \u003d Float.valueOf(commissions[i]);","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"        return percentages;","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"        return value;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":64,"author":{"gitId":"loyhongshenggg"},"content":"     * Gets commission of the policy based on the year","lastModifiedDate":"2022-10-20"},{"lineNumber":65,"author":{"gitId":"loyhongshenggg"},"content":"     * @param year to get the targeted year, 1 for first year, 2 for second...","lastModifiedDate":"2022-10-20"},{"lineNumber":66,"author":{"gitId":"loyhongshenggg"},"content":"     * @return % commission of that year","lastModifiedDate":"2022-10-20"},{"lineNumber":67,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":68,"author":{"gitId":"loyhongshenggg"},"content":"    public float getCommission(int year) {","lastModifiedDate":"2022-10-20"},{"lineNumber":69,"author":{"gitId":"loyhongshenggg"},"content":"        if (year \u003e 1) {","lastModifiedDate":"2022-10-20"},{"lineNumber":70,"author":{"gitId":"loyhongshenggg"},"content":"            return percentages[2] / 100f;","lastModifiedDate":"2022-10-20"},{"lineNumber":71,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":72,"author":{"gitId":"loyhongshenggg"},"content":"        return percentages[year] / 100f;","lastModifiedDate":"2022-10-20"},{"lineNumber":73,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"                || (other instanceof Commission // instanceof handles nulls","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 value.equals(((Commission) other).value)); // state check","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"        return value.hashCode();","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"loyhongshenggg":13,"Ssatu":71,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/policy/Company.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":" * Encapsulation for the company a policy belongs to","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"public class Company {","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Error: Company must be one \"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"            + \"of the following companies: \"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"            + \"{MNF, PRU, AXA, GEL, NTU, ETQ, TML, AIA, AVI, FWD}\";","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"    public static final List\u003cString\u003e CONSTRAINTS \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"            Collections.unmodifiableList(List.of(\"MNF\", \"PRU\", \"AXA\", \"GEL\", \"NTU\", \"ETQ\", \"TML\", \"AIA\", \"AVI\", \"FWD\"));","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"    public final String value;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    private final CompanyName cn;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     * Enumerator representing CompanyNames.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     * Encapsulates 10 different companies.","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     * Tagged with messages to be represented in String format.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public enum CompanyName {","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"        MNF(\"Manulife Financial Private Limited\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        PRU(\"Prudential Assurance Company\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        AXA(\"AXA Insurance Private Limited\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        GEL(\"Great Eastern Life\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"        NTU(\"NTUC Income Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"        ETQ(\"Etiqa Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"        TML(\"Tokio Marine Life Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"        AIA(\"AIA Singapore Private Limited\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"        AVI(\"Aviva Limited\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"        FWD(\"Singapore Private Limited\");","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        private String message;","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"        CompanyName(String message) {","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"            this.message \u003d message;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"            return message;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"     * Constructs a {@code Company}.","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"     * @param company","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"    public Company(String company) {","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        checkArgument(isValidCompany(company), MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        value \u003d company;","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"        cn \u003d parseCompanyName(company);","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"    public CompanyName getCompanyName() {","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"        return this.cn;","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"    public static boolean isValidCompany(String company) {","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"        return CONSTRAINTS.contains(company);","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"     * Utility function to parse companyName from string","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"     * @param indicator to parseCompanyName from Json","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"     * @return the appropriate CompanyName wrapped in an enum","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"    public static CompanyName parseCompanyName(String indicator) {","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"        switch (indicator) {","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"        case \"MNF\":","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.MNF;","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"        case \"PRU\":","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.PRU;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"        case \"AXA\":","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.AXA;","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"        case \"GEL\":","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.GEL;","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"        case \"NTU\":","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.NTU;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"        case \"ETQ\":","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.ETQ;","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"        case \"TML\":","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.TML;","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"        case \"AIA\":","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.AIA;","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"        case \"AVI\":","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.AVI;","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"        case \"FWD\":","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.FWD;","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"Ssatu"},"content":"        default:","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"            //Should never reach this","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"Ssatu"},"content":"            return CompanyName.PRU;","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"            return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"Ssatu"},"content":"        if (!(other instanceof Company)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"Ssatu"},"content":"            return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"Ssatu"},"content":"        Company otherCompany \u003d (Company) other;","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"Ssatu"},"content":"        boolean isSameCompany \u003d this.getCompanyName() \u003d\u003d otherCompany.getCompanyName();","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"Ssatu"},"content":"        return isSameCompany;","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"Ssatu"},"content":"        return cn.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":121,"marcusczh":7}},{"path":"src/main/java/longtimenosee/model/policy/Coverage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" * Represents what a given policy covers.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidCoverageName(String)}","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"public class Coverage {","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Error: Coverages must be one \"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"            + \"of the following types: \"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"            + \"{LIFE, MOTOR, HEALTH, TRAVEL, PROPERTY, MOBILE, BITE, INVESTMENT}\";","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"    public static final List\u003cString\u003e CONSTRAINTS \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"            Collections.unmodifiableList(List.of(\"LIFE\", \"MOTOR\", \"HEALTH\", \"TRAVEL\", \"PROPERTY\", \"MOBILE\", \"BITE\",","lastModifiedDate":"2022-10-26"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"                    \"INVESTMENT\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    public final String coverageType;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    private final CoverageName coverageName;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     * Enumerator representing CoverageNames.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"     * Encapsulates the different kinds of Coverages.","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"     * Tagged with messages to be represented in String format.","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    public enum CoverageName {","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        LIFE(\"Life Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        MOTOR(\"Motor Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"        HEALTH(\"Health Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"        TRAVEL(\"Travel Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"        PROPERTY(\"Property Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"        MOBILE(\"Mobile Insurance\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"        BITE(\"Bite-sized Insurance\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"        INVESTMENT(\"Investment based\");","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        private String message;","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"        CoverageName(String message) {","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"            this.message \u003d message;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"            return message;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"     * Constructs a {@code Coverage}.","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"     * @param coverageType A valid coverageType.","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"    public Coverage(String coverageType) {","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(coverageType);","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        checkArgument(isValidCoverageName(coverageType), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"        this.coverageType \u003d coverageType;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"        this.coverageName \u003d parseCoverageName(coverageType);","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"    public CoverageName getCoverageName() {","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"        return this.coverageName;","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"    public String getCoverageType() {","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"        return this.coverageType;","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"    public static boolean isValidCoverageName(String coverage) {","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"        return CONSTRAINTS.contains(coverage);","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"     * Utility function to parse coverageName from string","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"     * @param indicator to parseCoverageName from Json","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"     * @return the appropriate CoverageName wrapped in an enum","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"    public static CoverageName parseCoverageName(String indicator) {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"        switch (indicator) {","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"        case \"LIFE\":","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.LIFE;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"        case \"MOTOR\":","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.MOTOR;","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"        case \"HEALTH\":","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.HEALTH;","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"        case \"MOBILE\":","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.MOBILE;","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"        case \"TRAVEL\":","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.TRAVEL;","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"        case \"PROPERTY\":","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.PROPERTY;","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"Ssatu"},"content":"        case \"BITE\":","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.BITE;","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"        default:","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"            //Should never reach this","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"Ssatu"},"content":"            return CoverageName.HEALTH;","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"Ssatu"},"content":"                || (other instanceof Coverage // instanceof handles nulls","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 this.getCoverageName() \u003d\u003d (((Coverage) other).getCoverageName())); // state check","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"Ssatu"},"content":"        return coverageName.hashCode();","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"Ssatu"},"content":"     * Format coverage as text for viewing.","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"Ssatu"},"content":"        return \u0027[\u0027 + coverageName.toString() + \u0027]\u0027;","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"Ssatu":123,"marcusczh":6}},{"path":"src/main/java/longtimenosee/model/policy/FinancialAdvisorIncome.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"import static longtimenosee.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"import java.math.RoundingMode;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"import java.time.Period;","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":" * Represents the income that a Financial Advisor earns.","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"public class FinancialAdvisorIncome {","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"    private float firstYearIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"    private float secondYearIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"    private float thirdYearIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"    private LocalDate year;","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"    public FinancialAdvisorIncome() {}","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"    public LocalDate getYear() {","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"        return year;","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"     * Calculates which term in the three years should we take for commission","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"    public int calculateYear(LocalDate year, AssignedPolicy policy) {","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"        LocalDate startDate \u003d policy.getStartDate().getDate();","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"        LocalDate endDate \u003d policy.getEndDate().getDate();","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"        Period duration \u003d Period.between(LocalDate.parse(startDate.toString()),","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"loyhongshenggg"},"content":"                LocalDate.parse(year.toString()));","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"loyhongshenggg"},"content":"        if (duration.getYears() \u003e 1) {","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"            return 2;","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"        } else if (duration.getYears() \u003e 0) {","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"            return 1;","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"        } else {","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"loyhongshenggg"},"content":"            return 0;","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"     * Calculates the income of financial advisor in 3 years interval from specified date","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"loyhongshenggg"},"content":"    public void threeYearIncome(LocalDate date, Model model) {","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"loyhongshenggg"},"content":"        firstYearIncome \u003d calculateIncome(date, model);","lastModifiedDate":"2022-10-20"},{"lineNumber":52,"author":{"gitId":"loyhongshenggg"},"content":"        secondYearIncome \u003d calculateIncome(date.plusYears(1), model);","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"loyhongshenggg"},"content":"        thirdYearIncome \u003d calculateIncome(date.plusYears(2), model);","lastModifiedDate":"2022-10-20"},{"lineNumber":54,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":55,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"loyhongshenggg"},"content":"    public float getFirstYearIncome() {","lastModifiedDate":"2022-10-20"},{"lineNumber":57,"author":{"gitId":"loyhongshenggg"},"content":"        return firstYearIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":58,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":59,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":60,"author":{"gitId":"loyhongshenggg"},"content":"    public float getSecondYearIncome() {","lastModifiedDate":"2022-10-20"},{"lineNumber":61,"author":{"gitId":"loyhongshenggg"},"content":"        return secondYearIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":63,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":64,"author":{"gitId":"loyhongshenggg"},"content":"    public float getThirdYearIncome() {","lastModifiedDate":"2022-10-20"},{"lineNumber":65,"author":{"gitId":"loyhongshenggg"},"content":"        return thirdYearIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":66,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":67,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":68,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":69,"author":{"gitId":"loyhongshenggg"},"content":"     * Calculates the income of financial advisor in the specified year","lastModifiedDate":"2022-10-20"},{"lineNumber":70,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":71,"author":{"gitId":"loyhongshenggg"},"content":"    public float calculateIncome(LocalDate year, Model model) {","lastModifiedDate":"2022-10-20"},{"lineNumber":72,"author":{"gitId":"loyhongshenggg"},"content":"        float yearlyIncome \u003d 0f;","lastModifiedDate":"2022-10-25"},{"lineNumber":73,"author":{"gitId":"loyhongshenggg"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-20"},{"lineNumber":74,"author":{"gitId":"loyhongshenggg"},"content":"        ObservableList\u003cPerson\u003e personList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-20"},{"lineNumber":75,"author":{"gitId":"loyhongshenggg"},"content":"        LocalDate fullYear \u003d LocalDate.of(year.getYear(), 1, 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":76,"author":{"gitId":"loyhongshenggg"},"content":"        this.year \u003d fullYear;","lastModifiedDate":"2022-10-20"},{"lineNumber":77,"author":{"gitId":"loyhongshenggg"},"content":"        for (Person currentPerson : personList) {","lastModifiedDate":"2022-10-20"},{"lineNumber":78,"author":{"gitId":"loyhongshenggg"},"content":"            Set\u003cAssignedPolicy\u003e assignedPolicy \u003d currentPerson.getAssignedPolicies();","lastModifiedDate":"2022-10-20"},{"lineNumber":79,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":80,"author":{"gitId":"loyhongshenggg"},"content":"            for (AssignedPolicy policy : assignedPolicy) { //iterate through each policy of a person","lastModifiedDate":"2022-10-20"},{"lineNumber":81,"author":{"gitId":"loyhongshenggg"},"content":"                float policyPremiumPaid \u003d policy.getPremium().numericValue; //Premium paid is constant","lastModifiedDate":"2022-10-20"},{"lineNumber":82,"author":{"gitId":"loyhongshenggg"},"content":"                Period duration \u003d Period.between(LocalDate.parse(fullYear.toString()),","lastModifiedDate":"2022-10-20"},{"lineNumber":83,"author":{"gitId":"loyhongshenggg"},"content":"                        LocalDate.parse(policy.getEndDate().getDate().toString()));","lastModifiedDate":"2022-10-20"},{"lineNumber":84,"author":{"gitId":"loyhongshenggg"},"content":"                if (policy.getEndDate().getDate().isBefore(fullYear)) {","lastModifiedDate":"2022-10-20"},{"lineNumber":85,"author":{"gitId":"loyhongshenggg"},"content":"                    continue;","lastModifiedDate":"2022-10-20"},{"lineNumber":86,"author":{"gitId":"loyhongshenggg"},"content":"                } else if ((policy.getEndDate().getDate().isAfter(fullYear)","lastModifiedDate":"2022-10-20"},{"lineNumber":87,"author":{"gitId":"loyhongshenggg"},"content":"                        || policy.getEndDate().getDate().equals(fullYear))","lastModifiedDate":"2022-10-20"},{"lineNumber":88,"author":{"gitId":"loyhongshenggg"},"content":"                        \u0026\u0026 (policy.getStartDate().getDate().isBefore(fullYear)","lastModifiedDate":"2022-10-20"},{"lineNumber":89,"author":{"gitId":"loyhongshenggg"},"content":"                        || policy.getStartDate().getDate().equals(fullYear))) {","lastModifiedDate":"2022-10-20"},{"lineNumber":90,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":91,"author":{"gitId":"loyhongshenggg"},"content":"                    int months \u003d duration.getMonths();","lastModifiedDate":"2022-10-26"},{"lineNumber":92,"author":{"gitId":"loyhongshenggg"},"content":"                    if (months \u003d\u003d 0) {","lastModifiedDate":"2022-10-20"},{"lineNumber":93,"author":{"gitId":"loyhongshenggg"},"content":"                        if (duration.getYears() \u003e\u003d 1) {","lastModifiedDate":"2022-10-26"},{"lineNumber":94,"author":{"gitId":"loyhongshenggg"},"content":"                            months \u003d 12;","lastModifiedDate":"2022-10-20"},{"lineNumber":95,"author":{"gitId":"loyhongshenggg"},"content":"                        }","lastModifiedDate":"2022-10-20"},{"lineNumber":96,"author":{"gitId":"loyhongshenggg"},"content":"                    }","lastModifiedDate":"2022-10-20"},{"lineNumber":97,"author":{"gitId":"loyhongshenggg"},"content":"                    yearlyIncome +\u003d","lastModifiedDate":"2022-10-20"},{"lineNumber":98,"author":{"gitId":"loyhongshenggg"},"content":"                            policy.getPolicy().getCommission().getCommission(calculateYear(year, policy))","lastModifiedDate":"2022-10-20"},{"lineNumber":99,"author":{"gitId":"loyhongshenggg"},"content":"                                    * months","lastModifiedDate":"2022-10-20"},{"lineNumber":100,"author":{"gitId":"loyhongshenggg"},"content":"                                    * policyPremiumPaid;","lastModifiedDate":"2022-10-20"},{"lineNumber":101,"author":{"gitId":"loyhongshenggg"},"content":"                } else {","lastModifiedDate":"2022-10-20"},{"lineNumber":102,"author":{"gitId":"loyhongshenggg"},"content":"                    continue;","lastModifiedDate":"2022-10-20"},{"lineNumber":103,"author":{"gitId":"loyhongshenggg"},"content":"                }","lastModifiedDate":"2022-10-20"},{"lineNumber":104,"author":{"gitId":"loyhongshenggg"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":105,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":106,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":107,"author":{"gitId":"loyhongshenggg"},"content":"        BigDecimal bd \u003d new BigDecimal(yearlyIncome);","lastModifiedDate":"2022-10-25"},{"lineNumber":108,"author":{"gitId":"loyhongshenggg"},"content":"        BigDecimal formattedIncome \u003d bd.setScale(2, RoundingMode.FLOOR);","lastModifiedDate":"2022-10-25"},{"lineNumber":109,"author":{"gitId":"loyhongshenggg"},"content":"        return formattedIncome.floatValue();","lastModifiedDate":"2022-10-25"},{"lineNumber":110,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":111,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":112,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":112}},{"path":"src/main/java/longtimenosee/model/policy/Policy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":" * Represents a Policy in the address book.","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"public class Policy {","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    // Identity fields","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"    private final Title title;","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    private final Company company;","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    // Data fields","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    private final Commission commission;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    private final Set\u003cCoverage\u003e coverages \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    public Policy(Title title, Company company, Commission commission, Set\u003cCoverage\u003e coverages) {","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"        requireAllNonNull(title, company, commission, coverages);","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"        this.commission \u003d commission;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        this.company \u003d company;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        this.coverages.addAll(coverages);","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    public Title getTitle() {","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"        return title;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"    public Company getCompany() {","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        return company;","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    public Commission getCommission() {","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        return commission;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"     * if modification is attempted.","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"    public Set\u003cCoverage\u003e getCoverages() {","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"        return Collections.unmodifiableSet(coverages);","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"     * Returns true if both policies have the same Title and company.","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"     * This defines a relatively strong notion of equality between two policies.","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"    public boolean isSamePolicy(Policy otherPolicy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        if (otherPolicy \u003d\u003d this) {","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"            return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"        return otherPolicy !\u003d null","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 otherPolicy.getCompany().equals(getCompany())","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 otherPolicy.getTitle().equals(getTitle());","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"     * Returns true if both policies have the same identity and data fields.","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"            return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"        if (!(other instanceof Policy)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"            return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"        Policy otherPolicy \u003d (Policy) other;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"        return otherPolicy.getCompany().equals(getCompany())","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 otherPolicy.getTitle().equals(getTitle())","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 otherPolicy.getCommission().equals(getCommission())","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 otherPolicy.getCoverages().equals(getCoverages());","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"        return Objects.hash(title, company, commission, coverages);","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"        builder.append(getTitle() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"                .append(\"Company: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"                .append(getCompany() + \"\\n\")","lastModifiedDate":"2022-10-27"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"                .append(\"Commission: \")","lastModifiedDate":"2022-10-27"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"                .append(getCommission() + \"\\n\");","lastModifiedDate":"2022-10-27"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"        Set\u003cCoverage\u003e coverages \u003d getCoverages();","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"Ssatu"},"content":"        if (!coverages.isEmpty()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"            builder.append(\"Coverages: \");","lastModifiedDate":"2022-10-27"},{"lineNumber":108,"author":{"gitId":"Ssatu"},"content":"            coverages.forEach(builder::append);","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"        return builder.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"Ssatu":103,"cowlinn":7,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/policy/PolicyDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":" * Encapsulation for a policy\u0027s date","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"public class PolicyDate {","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    public static final Comparator\u003cPerson\u003e POLICY_DATE_COMPARATOR \u003d new Comparator\u003cPerson\u003e() {","lastModifiedDate":"2022-10-26"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"            return p1.getBirthday().getBirthday().compareTo(p2.getBirthday().getBirthday());","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    };","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    public static final String STANDARD_DATE \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d \"Years must be between (including) 1900 \"","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"            + \"to 2100 and follow Format: \"","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"            + STANDARD_DATE;","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    private static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public final String value;","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    private LocalDate date;","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"     * Main constructor for PolicyDate","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"     * @param value","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"    public PolicyDate(String value) {","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"        this.value \u003d value;","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"        this.date \u003d parsePolicyDate(value);","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        return this.date;","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"     * Utility function to check if a birthday is valid","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"    public static boolean isValidDate(String date) {","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"        try {","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"            LocalDate verifiedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"            return false;","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        LocalDate verifiedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"        LocalDate lowerLimit \u003d LocalDate.of(1899, 12, 31);","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        LocalDate upperLimit \u003d LocalDate.of(2101, 1, 1);","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        return verifiedDate.isAfter(lowerLimit) \u0026\u0026 verifiedDate.isBefore(upperLimit);","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"     * Credits to: https://stackoverflow.com/questions/2149680/regex-date-format-validation-on-java","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"     * For regex example for YYYY-MM-DD","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"    public static boolean isValidFormat(String date) {","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"        return date.matches(DATE_VALIDATION_REGEX);","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"     * Parses a policy date in string form and checks for validity","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"     * @param  s","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"     * @return LocalDate","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"    public static LocalDate parsePolicyDate(String s) {","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(STANDARD_DATE);","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"        LocalDate dateTime \u003d LocalDate.parse(s, formatter);","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"        return dateTime;","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"            return true;","lastModifiedDate":"2022-10-18"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"        if (!(other instanceof PolicyDate)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"            return false;","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"        PolicyDate otherPolicyDate \u003d (PolicyDate) other;","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"        return this.getDate().equals(otherPolicyDate.getDate());","lastModifiedDate":"2022-10-18"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-18"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"        return date.format(DateTimeFormatter","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"                .ofLocalizedDate(FormatStyle.LONG));","lastModifiedDate":"2022-10-18"},{"lineNumber":100,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":101,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":103,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-18"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"        return date.hashCode();","lastModifiedDate":"2022-10-18"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":106,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"Ssatu":106}},{"path":"src/main/java/longtimenosee/model/policy/Premium.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":" * Represents what a policy\u0027s yearly premium is.","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidPremium(String)}","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"public class Premium {","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Premium should be any positive numeric value,\"","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"            + \" and it should not be blank\";","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"    /*","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public static final String VALIDATION_REGEX \u003d \"([1-9]\\\\d*)?\\\\d(\\\\.\\\\d\\\\d)?\";","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    public final String value;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    public final float numericValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     * @param premium A valid premium.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    public Premium(String premium) {","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(premium);","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        checkArgument(isValidPremium(premium), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        value \u003d premium;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        numericValue \u003d Float.valueOf(premium);","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"    public static boolean isValidPremium(String test) {","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"     * Returns the value of the monthly premium.","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"     * @return The float value of the premium.","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"    public float getNumericValue() {","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        return numericValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"        return value;","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"                || (other instanceof Premium // instanceof handles nulls","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 value.equals(((Premium) other).value)); // state check","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"        return value.hashCode();","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":66,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/policy/Title.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":" * Represents a Policy\u0027s title in the address book.","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"public class Title {","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_FORMAT_CONSTRAINTS \u003d","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"            \"Titles should only contain a maximum of 40 alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"    /*","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    public final String fullTitle;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"     * Constructs a {@code Title}.","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     * @param title A valid title.","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    public Title(String title) {","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(title);","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"        checkArgument(isValidTitle(title), MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"        fullTitle \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"    public static boolean isValidTitle(String test) {","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 40;","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    public String toString() {","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        return fullTitle;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"                || (other instanceof Title // instanceof handles nulls","lastModifiedDate":"2022-10-05"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"                \u0026\u0026 fullTitle.equals(((Title) other).fullTitle)); // state check","lastModifiedDate":"2022-10-05"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"        return fullTitle.hashCode();","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"Ssatu":55,"marcusczh":4}},{"path":"src/main/java/longtimenosee/model/policy/UniquePolicyList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.exceptions.DuplicatePolicyException;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.exceptions.PolicyNotFoundException;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":" * A list of policies that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":" * A person is considered unique by comparing using {@code Policy#isSamePolicy(Policy)}. As such, adding and updating of","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":" * policies uses Policy#isSamePolicy(Policy) for equality to ensure that the person being added or updated is","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":" * unique in terms of identity in the UniquePolicyList. However, the removal of a policy uses Policy#equals(Object) so","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":" * @see Policy#isSamePolicy(Policy)","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"public class UniquePolicyList implements Iterable\u003cPolicy\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    private final ObservableList\u003cPolicy\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    private final ObservableList\u003cPolicy\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"     * Returns true if the list contains an equivalent policy as the given argument.","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    public boolean contains(Policy toCheck) {","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"     * Adds a policy to the list.","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"     * The policy must not already exist in the list.","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    public void add(Policy toAdd) {","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"            throw new DuplicatePolicyException();","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"     * Replaces the policy {@code target} in the list with {@code editedPolicy}.","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"     * The policy identity of {@code editedPolicy} must not be the same as another existing policy in the list.","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"    public void setPolicy(Policy target, Policy editedPolicy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"        requireAllNonNull(target, editedPolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"            throw new PolicyNotFoundException();","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"        if (!target.isSamePolicy(editedPolicy) \u0026\u0026 contains(editedPolicy)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"            throw new DuplicatePolicyException();","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"        internalList.set(index, editedPolicy);","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"     * Removes the equivalent policy from the list.","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"     * The policy must exist in the list.","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"    public void remove(Policy toRemove) {","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"            throw new PolicyNotFoundException();","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"    public void setPolicies(UniquePolicyList replacement) {","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"     * Replaces the contents of this list with {@code policies}.","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"     * {@code policies} must not contain duplicate policiies.","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"    public void setPolicies(List\u003cPolicy\u003e policies) {","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"        requireAllNonNull(policies);","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"        if (!policiesAreUnique(policies)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"            throw new DuplicatePolicyException();","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"        internalList.setAll(policies);","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"Ssatu"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"Ssatu"},"content":"    public ObservableList\u003cPolicy\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"Ssatu"},"content":"    public Iterator\u003cPolicy\u003e iterator() {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"Ssatu"},"content":"        return internalList.iterator();","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"Ssatu"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"Ssatu"},"content":"                || (other instanceof UniquePolicyList // instanceof handles nulls","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 internalList.equals(((UniquePolicyList) other).internalList));","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"Ssatu"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"Ssatu"},"content":"        return internalList.hashCode();","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"Ssatu"},"content":"     * Returns true if {@code policies} contains only unique policies.","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"Ssatu"},"content":"    private boolean policiesAreUnique(List\u003cPolicy\u003e policies) {","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"Ssatu"},"content":"        for (int i \u003d 0; i \u003c policies.size() - 1; i++) {","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"Ssatu"},"content":"            for (int j \u003d i + 1; j \u003c policies.size(); j++) {","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"Ssatu"},"content":"                if (policies.get(i).isSamePolicy(policies.get(j))) {","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"Ssatu"},"content":"                    return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"Ssatu"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"Ssatu"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"Ssatu"},"content":"        return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":133,"marcusczh":4}},{"path":"src/main/java/longtimenosee/model/policy/exceptions/DuplicatePolicyException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":" * Signals that the operation will result in duplicate Policy (Policies are considered duplicates if they have the same","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":" * identity).","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"public class DuplicatePolicyException extends RuntimeException {","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"    public DuplicatePolicyException() {","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"        super(\"Operation would result in duplicate policies\");","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":10,"marcusczh":1}},{"path":"src/main/java/longtimenosee/model/policy/exceptions/PolicyNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy.exceptions;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":" * Signals that the operation is unable to find the specified client.","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"public class PolicyNotFoundException extends RuntimeException {","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":7,"marcusczh":1}},{"path":"src/main/java/longtimenosee/model/policy/predicate/CompanyMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Policy}\u0027s {@code Company} matches the input.","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class CompanyMatchesInputPredicate implements Predicate\u003cPolicy\u003e {","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    private final String input;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"     * Constructs a CompanyMatchesInputPredicate object, which consists of an input.","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * @param input is the input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"    public CompanyMatchesInputPredicate(String input) {","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        assert input.length() !\u003d 0;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        this.input \u003d input;","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Policy policy) {","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        return policy.getCompany().value.equals(input);","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof CompanyMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                return input.equals(((CompanyMatchesInputPredicate) other).input);","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"marcusczh":41}},{"path":"src/main/java/longtimenosee/model/policy/predicate/CoverageMatchesInputPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy.predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Policy}\u0027s {@code Coverage} matches the input.","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"public class CoverageMatchesInputPredicate implements Predicate\u003cPolicy\u003e {","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     * Constructs a CoverageMatchesInputPredicate object, which consists of a keywords input.","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     * @param keywords is the keywords input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"    public CoverageMatchesInputPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        assert !keywords.isEmpty();","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Policy policy) {","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        boolean[] isMatch \u003d new boolean[keywords.size()];","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        for (int i \u003d 0; i \u003c keywords.size(); i++) {","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"            for (Coverage coverage : policy.getCoverages()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"                if (StringUtil.containsWordIgnoreCase(coverage.coverageType, keywords.get(i))) {","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"                    isMatch[i] \u003d true;","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"                    break;","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                }","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        return isAllTrue(isMatch);","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"    private boolean isAllTrue(boolean[] arr) {","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        for (boolean bool : arr) {","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"            if (!bool) {","lastModifiedDate":"2022-10-24"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        return true;","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof CoverageMatchesInputPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"                return keywords.equals(((CoverageMatchesInputPredicate) other).keywords);","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-15"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"marcusczh":62}},{"path":"src/main/java/longtimenosee/model/policy/predicate/TitleContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.policy.predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"/**","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":" * Tests that a {@code Policy}\u0027s {@code Title} matches any of the keywords given.","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":" */","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"public class TitleContainsKeywordsPredicate implements Predicate\u003cPolicy\u003e {","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"     * Constructs a TitleContainsKeywordsPredicate object, which consists of a keywords input.","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"     * @param keywords is the keywords input by the user to be compared.","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        assert !keywords.isEmpty();","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"    public boolean test(Policy policy) {","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        for (String keyword : keywords) {","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"            if (StringUtil.containsWordIgnoreCase(policy.getTitle().fullTitle, keyword)) {","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"                return true;","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-14"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        return false;","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"            return true;","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"            if (other instanceof TitleContainsKeywordsPredicate) {","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"                return keywords.equals(((TitleContainsKeywordsPredicate) other).keywords);","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"            } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"                return false;","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"marcusczh":47}},{"path":"src/main/java/longtimenosee/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":52,"marcusczh":2}},{"path":"src/main/java/longtimenosee/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"                getTagSet(\"friends\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"                new Birthday(\"2015-05-05\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"                new Income(\"100.0\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"                new RiskAppetite(\"H\")),","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"                getTagSet(\"colleagues\", \"friends\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"                new Birthday(\"2015-05-05\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"                new Income(\"100.0\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"                new RiskAppetite(\"H\")),","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"                getTagSet(\"neighbours\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"                new Birthday(\"2015-05-05\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"                new Income(\"100.0\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"                new RiskAppetite(\"H\")),","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"                getTagSet(\"family\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"                new Birthday(\"2015-05-05\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"                new Income(\"100.0\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"                new RiskAppetite(\"H\")),","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"                getTagSet(\"classmates\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"                new Birthday(\"2015-05-05\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"                new Income(\"100.0\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"                new RiskAppetite(\"H\")),","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"                getTagSet(\"colleagues\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"                new Birthday(\"2015-05-05\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"                new Income(\"100.0\"),","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"                new RiskAppetite(\"H\")),","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"cowlinn":27,"-":45,"marcusczh":9}},{"path":"src/main/java/longtimenosee/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":" * Represents a storage for {@link AddressBook}.","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":41,"marcusczh":5}},{"path":"src/main/java/longtimenosee/storage/JsonAdaptedAssignedPolicy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.PolicyDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.Premium;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":" * Jackson-friendly version of {@link Policy}.","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"class JsonAdaptedAssignedPolicy {","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"AssignedPolicy\u0027s %s field is missing!\";","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    public final JsonAdaptedPolicy assigned;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"    public final String premium;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    public final String startDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    public final String endDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    public JsonAdaptedAssignedPolicy(@JsonProperty(\"assigned\") JsonAdaptedPolicy assigned,","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"                                     @JsonProperty(\"premium\") String premium,","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"                                     @JsonProperty(\"startDate\") String startDate,","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"                                     @JsonProperty(\"endDate\") String endDate) {","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"        this.assigned \u003d assigned;","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        this.premium \u003d premium;","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"     * Converts a given {@code Policy} into this class for Jackson use.","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    public JsonAdaptedAssignedPolicy(AssignedPolicy source) {","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"        assigned \u003d new JsonAdaptedPolicy(source.getPolicy());","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"        premium \u003d source.getPremium().toString();","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        startDate \u003d source.getStartDate().value;","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        endDate \u003d source.getEndDate().value;","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Policy} object.","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"    public AssignedPolicy toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"        final Policy modelPolicy \u003d assigned.toModelType();","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"        if (premium \u003d\u003d null) {","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Premium.class.getSimpleName()));","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"        if (!Premium.isValidPremium(premium)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(Premium.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"        final Premium modelPremium \u003d new Premium(premium);","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"        if (startDate \u003d\u003d null) {","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"                    PolicyDate.class.getSimpleName()));","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"        if (!PolicyDate.isValidDate(startDate)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(PolicyDate.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"        final PolicyDate modelStartDate \u003d new PolicyDate(startDate);","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"        if (endDate \u003d\u003d null) {","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"                    PolicyDate.class.getSimpleName()));","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        if (!PolicyDate.isValidDate(endDate)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(PolicyDate.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"        final PolicyDate modelEndDate \u003d new PolicyDate(endDate);","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"        return new AssignedPolicy(modelPolicy, modelPremium, modelStartDate, modelEndDate);","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"Ssatu":85}},{"path":"src/main/java/longtimenosee/storage/JsonAdaptedCoverage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":" * Jackson-friendly version of {@link Coverage}.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"public class JsonAdaptedCoverage {","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"    private final String coverageName;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"     * Constructs a {@code JsonAdaptedCoverage} with the given {@code coverageName}.","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"    public JsonAdaptedCoverage(String coverageName) {","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"        this.coverageName \u003d coverageName;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     * Converts a given {@code coverageName} into this class for Jackson use.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    public JsonAdaptedCoverage(Coverage coverage) {","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"        coverageName \u003d coverage.coverageType;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    @JsonValue","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"    public String getCoverageName() {","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"        return coverageName;","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    public Coverage toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"        if (!Coverage.isValidCoverageName(coverageName)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"        return new Coverage(coverageName);","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":44,"marcusczh":3}},{"path":"src/main/java/longtimenosee/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Date;","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Description;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Duration;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-22"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":" * Constructs a {@code JsonAdaptedEvent} with the given person details.","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"public class JsonAdaptedEvent {","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    private final String description;","lastModifiedDate":"2022-10-16"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"    private final String personName;","lastModifiedDate":"2022-10-16"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"    private final String date;","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    private final String duration; //Notice that the duration includes both start and end time","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"    //duration \u003d hh:mm__hh:mm, (start)__(end)","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given event details.","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"description\") String description,","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"                            @JsonProperty(\"personName\") String personName,","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"                            @JsonProperty(\"date\") String date,","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"                            @JsonProperty(\"duration\") String duration) {","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"        this.personName \u003d personName;","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"        this.date \u003d date;","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"    public JsonAdaptedEvent(Event source) {","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"        description \u003d source.getDescription().retrieveDescription();","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"        personName \u003d source.getPersonName().fullName;","lastModifiedDate":"2022-10-22"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"        date \u003d source.getDate().value;","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"        duration \u003d source.getDuration().value;","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object.","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event.","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"    public Event toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"                    Description.class.getSimpleName()));","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"cowlinn"},"content":"        if (!Description.isValidDescription(description)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":57,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":60,"author":{"gitId":"cowlinn"},"content":"        if (personName \u003d\u003d null) {","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-16"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"                    Name.class.getSimpleName()));","lastModifiedDate":"2022-10-22"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"        if (!Description.isValidDescription(personName)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-22"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"        final Name modelName \u003d new Name(personName);","lastModifiedDate":"2022-10-22"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":72,"author":{"gitId":"cowlinn"},"content":"        if (!Date.isValidFormat(date)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Date.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"        if (!Date.isValidRange(date)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Date.RANGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        if (!Date.isValidYear(date)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Date.YEAR_RANGE_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"        final Date modelDate \u003d new Date(date);","lastModifiedDate":"2022-10-16"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"        if (duration \u003d\u003d null) {","lastModifiedDate":"2022-10-16"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-16"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"                    Duration.class.getSimpleName()));","lastModifiedDate":"2022-10-16"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"        if (!Duration.isValidStartAndEnd(duration)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-16"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"        final Duration modelDuration \u003d new Duration(duration);","lastModifiedDate":"2022-10-16"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"        return new Event(modelDescription, modelName, modelDate, modelDuration);","lastModifiedDate":"2022-10-22"},{"lineNumber":92,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":93,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"cowlinn":94}},{"path":"src/main/java/longtimenosee/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"import longtimenosee.model.policy.AssignedPolicy;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    private final String birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"    private final String income;","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"    private final String riskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"    private final List\u003cJsonAdaptedAssignedPolicy\u003e assignedPolicies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"    private final boolean pinned;","lastModifiedDate":"2022-10-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"birthday\") String birthday,","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"                             @JsonProperty(\"income\") String income, @JsonProperty(\"riskAppetite\") String riskAppetite,","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"                                 @JsonProperty(\"pinned\") boolean pinned,","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"                             @JsonProperty(\"assignedPolicies\") List\u003cJsonAdaptedAssignedPolicy\u003e assignedPolicies) {","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"loyhongshenggg"},"content":"        this.pinned \u003d pinned;","lastModifiedDate":"2022-10-09"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"        this.birthday \u003d birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"        this.income \u003d income;","lastModifiedDate":"2022-10-12"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"        this.riskAppetite \u003d riskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"        if (assignedPolicies !\u003d null) {","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"            this.assignedPolicies.addAll(assignedPolicies);","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"loyhongshenggg"},"content":"        pinned \u003d source.getPin();","lastModifiedDate":"2022-10-09"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"        birthday \u003d source.getBirthday().value;","lastModifiedDate":"2022-10-17"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"        income \u003d source.getIncome().value;","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"cowlinn"},"content":"        riskAppetite \u003d source.getRiskAppetite().value;","lastModifiedDate":"2022-10-17"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"        assignedPolicies.addAll(source.getAssignedPolicies().stream()","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"                .map(JsonAdaptedAssignedPolicy::new)","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"Ssatu"},"content":"        final List\u003cAssignedPolicy\u003e personPolicies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-18"},{"lineNumber":101,"author":{"gitId":"Ssatu"},"content":"        for (JsonAdaptedAssignedPolicy assignedPolicy : assignedPolicies) {","lastModifiedDate":"2022-10-18"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"            personPolicies.add(assignedPolicy.toModelType());","lastModifiedDate":"2022-10-18"},{"lineNumber":103,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":104,"author":{"gitId":"Ssatu"},"content":"        final Set\u003cAssignedPolicy\u003e modelPolicies \u003d new HashSet\u003c\u003e(personPolicies);","lastModifiedDate":"2022-10-18"},{"lineNumber":105,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"        if (!Name.isValidLength(name)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Name.LENGTH_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"        if (birthday \u003d\u003d null) {","lastModifiedDate":"2022-10-12"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-12"},{"lineNumber":144,"author":{"gitId":"cowlinn"},"content":"                    Birthday.class.getSimpleName()));","lastModifiedDate":"2022-10-12"},{"lineNumber":145,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":146,"author":{"gitId":"cowlinn"},"content":"        //Check for valid YYYY-MM-DD format","lastModifiedDate":"2022-10-26"},{"lineNumber":147,"author":{"gitId":"cowlinn"},"content":"        if (!Birthday.isValidFormat(birthday)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":148,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(Birthday.MESSAGE_FORMAT_CONSTRAINTS,","lastModifiedDate":"2022-10-26"},{"lineNumber":149,"author":{"gitId":"cowlinn"},"content":"                    Birthday.class.getSimpleName()));","lastModifiedDate":"2022-10-26"},{"lineNumber":150,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":151,"author":{"gitId":"cowlinn"},"content":"        //Check for whether the date is a valid Date","lastModifiedDate":"2022-10-26"},{"lineNumber":152,"author":{"gitId":"cowlinn"},"content":"        if (!Birthday.isValidDate(birthday)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":153,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(Birthday.RANGE_FORMAT_CONSTRAINTS,","lastModifiedDate":"2022-10-26"},{"lineNumber":154,"author":{"gitId":"cowlinn"},"content":"                    Birthday.class.getSimpleName()));","lastModifiedDate":"2022-10-26"},{"lineNumber":155,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":156,"author":{"gitId":"cowlinn"},"content":"        //Check whether the date (specifically the year) is reasonable","lastModifiedDate":"2022-10-26"},{"lineNumber":157,"author":{"gitId":"cowlinn"},"content":"        if (!Birthday.isReasonableBirthday(birthday)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":158,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(Birthday.MESSAGE_DATE_CONSTRAINTS,","lastModifiedDate":"2022-10-26"},{"lineNumber":159,"author":{"gitId":"cowlinn"},"content":"                    Birthday.class.getSimpleName()));","lastModifiedDate":"2022-10-26"},{"lineNumber":160,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":161,"author":{"gitId":"cowlinn"},"content":"        final Birthday modelBirthday \u003d new Birthday(birthday);","lastModifiedDate":"2022-10-12"},{"lineNumber":162,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":163,"author":{"gitId":"cowlinn"},"content":"        if (income \u003d\u003d null) {","lastModifiedDate":"2022-10-12"},{"lineNumber":164,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Income.class.getSimpleName()));","lastModifiedDate":"2022-10-12"},{"lineNumber":165,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":166,"author":{"gitId":"cowlinn"},"content":"        if (!Income.isValidFormat(income)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":167,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Income.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":168,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":169,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":170,"author":{"gitId":"cowlinn"},"content":"        if (!Income.isPositiveIncome(income)) {","lastModifiedDate":"2022-10-30"},{"lineNumber":171,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(Income.VALUE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-30"},{"lineNumber":172,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-30"},{"lineNumber":173,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":174,"author":{"gitId":"cowlinn"},"content":"        final Income modelIncome \u003d new Income(income);","lastModifiedDate":"2022-10-12"},{"lineNumber":175,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":176,"author":{"gitId":"cowlinn"},"content":"        if (riskAppetite \u003d\u003d null) {","lastModifiedDate":"2022-10-12"},{"lineNumber":177,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-12"},{"lineNumber":178,"author":{"gitId":"cowlinn"},"content":"                    RiskAppetite.class.getSimpleName()));","lastModifiedDate":"2022-10-12"},{"lineNumber":179,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":180,"author":{"gitId":"cowlinn"},"content":"        if (!RiskAppetite.isValidFormat(riskAppetite)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":181,"author":{"gitId":"cowlinn"},"content":"            throw new IllegalValueException(RiskAppetite.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-26"},{"lineNumber":182,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":183,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":184,"author":{"gitId":"cowlinn"},"content":"        final RiskAppetite modelRiskAppetite \u003d new RiskAppetite(riskAppetite);","lastModifiedDate":"2022-10-12"},{"lineNumber":185,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":186,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":187,"author":{"gitId":"cowlinn"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags,","lastModifiedDate":"2022-10-12"},{"lineNumber":188,"author":{"gitId":"Ssatu"},"content":"                modelBirthday, modelIncome, modelRiskAppetite, modelPolicies, pinned);","lastModifiedDate":"2022-10-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"loyhongshenggg":3,"Ssatu":17,"cowlinn":64,"-":99,"marcusczh":8}},{"path":"src/main/java/longtimenosee/storage/JsonAdaptedPolicy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Commission;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Company;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Title;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":" * Jackson-friendly version of {@link Policy}.","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"class JsonAdaptedPolicy {","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Policy\u0027s %s field is missing!\";","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"    private final String title;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    private final String company;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"    private final String commission;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    private final List\u003cJsonAdaptedCoverage\u003e covered \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    public JsonAdaptedPolicy(@JsonProperty(\"title\") String title, @JsonProperty(\"company\") String company,","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"                             @JsonProperty(\"commission\") String commission,","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"                             @JsonProperty(\"covered\") List\u003cJsonAdaptedCoverage\u003e covered) {","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"        this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"        this.company \u003d company;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"        this.commission \u003d commission;","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"        if (covered !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"            this.covered.addAll(covered);","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"     * Converts a given {@code Policy} into this class for Jackson use.","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"    public JsonAdaptedPolicy(Policy source) {","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"        title \u003d source.getTitle().fullTitle;","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"        company \u003d source.getCompany().value;","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"        commission \u003d source.getCommission().value;","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"        covered.addAll(source.getCoverages().stream()","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"                .map(JsonAdaptedCoverage::new)","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Policy} object.","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"    public Policy toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"        final List\u003cCoverage\u003e policyCoverage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"        for (JsonAdaptedCoverage coverage : covered) {","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"            policyCoverage.add(coverage.toModelType());","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"        if (title \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"        if (!Title.isValidTitle(title)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(Title.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"        final Title modelTitle \u003d new Title(title);","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"Ssatu"},"content":"        if (company \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"Ssatu"},"content":"                    Company.class.getSimpleName()));","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"        if (!Company.isValidCompany(company)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"Ssatu"},"content":"        final Company modelCompany \u003d new Company(company);","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"Ssatu"},"content":"        if (commission \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"Ssatu"},"content":"                    Commission.class.getSimpleName()));","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"        if (!Commission.isValidCommission(commission)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"Ssatu"},"content":"            throw new IllegalValueException(Commission.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"Ssatu"},"content":"        final Commission modelCommission \u003d new Commission(commission);","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"Ssatu"},"content":"        final Set\u003cCoverage\u003e modelCoverages \u003d new HashSet\u003c\u003e(policyCoverage);","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"        return new Policy(modelTitle, modelCompany, modelCommission, modelCoverages);","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":92,"marcusczh":7}},{"path":"src/main/java/longtimenosee/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":45,"marcusczh":3}},{"path":"src/main/java/longtimenosee/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.FileUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.JsonUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":73,"marcusczh":7}},{"path":"src/main/java/longtimenosee/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"    public static final String MESSAGE_DUPLICATE_POLICY \u003d \"Policies list contains duplicate policy(s).\";","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Event list contains duplicate event(s).\";","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    private final List\u003cJsonAdaptedPolicy\u003e policies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2022-09-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"        policies.addAll(source.getPolicyList().stream().map(JsonAdaptedPolicy::new).collect(Collectors.toList()));","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"        for (JsonAdaptedPolicy jsonAdaptedPolicy : policies) {","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"            Policy policy \u003d jsonAdaptedPolicy.toModelType();","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"            if (addressBook.hasPolicy(policy)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_POLICY);","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"            addressBook.addPolicy(policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"cowlinn"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2022-10-16"},{"lineNumber":76,"author":{"gitId":"cowlinn"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2022-10-16"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"            if (addressBook.hasEvent(event)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2022-10-16"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-16"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"            addressBook.addEvent(event);","lastModifiedDate":"2022-10-16"},{"lineNumber":81,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":82,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Ssatu":11,"cowlinn":12,"-":57,"marcusczh":6}},{"path":"src/main/java/longtimenosee/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.JsonUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":42,"marcusczh":5}},{"path":"src/main/java/longtimenosee/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":27,"marcusczh":5}},{"path":"src/main/java/longtimenosee/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":72,"marcusczh":6}},{"path":"src/main/java/longtimenosee/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":30,"marcusczh":6}},{"path":"src/main/java/longtimenosee/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.Logic;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.CommandResult;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"marcusczh"},"content":"         * @see Logic#execute(String)","lastModifiedDate":"2022-10-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"-":80,"marcusczh":6}},{"path":"src/main/java/longtimenosee/ui/EventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"     *","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"    public final Event event;","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"    private Label description;","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"    private Label id;","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"    private Label date;","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"    private Label duration;","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"    private Label personName;","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"     * Creates a {@code EventCode} with the given {@code Event} and index to display.","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"    public EventCard(Event event, int displayedIndex) {","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"        super(FXML);","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        this.event \u003d event;","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"        description.setText(event.getDescription().retrieveDescription());","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"        date.setText(event.getDate().toString());","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"        duration.setText(event.getDuration().toString());","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"        personName.setText(\"With client: \" + event.getPersonName().fullName);","lastModifiedDate":"2022-10-22"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"            return true;","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"        if (!(other instanceof EventCard)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"            return false;","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"        // state check","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"        EventCard card \u003d (EventCard) other;","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"                \u0026\u0026 event.equals(card.event);","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"ReubenChay":71,"cowlinn":1}},{"path":"src/main/java/longtimenosee/ui/EventListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"    private ListView\u003cEvent\u003e eventListView;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"        super(FXML);","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"        eventListView.setItems(eventList);","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"    class EventListViewCell extends ListCell\u003cEvent\u003e {","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        protected void updateItem(Event event, boolean empty) {","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"            super.updateItem(event, empty);","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"            if (empty || event \u003d\u003d null) {","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"                setGraphic(null);","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"                setText(null);","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"            } else {","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"                setGraphic(new EventCard(event, getIndex() + 1).getRoot());","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"ReubenChay":49}},{"path":"src/main/java/longtimenosee/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2223s1-cs2103t-w13-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2022-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":99,"marcusczh":3}},{"path":"src/main/java/longtimenosee/ui/IncomeChart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.chart.CategoryAxis;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.chart.LineChart;","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.chart.NumberAxis;","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.chart.XYChart;","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"/**","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":" * Controller for income chart","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":" */","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"public class IncomeChart extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"loyhongshenggg"},"content":"    private static final String FXML \u003d \"LineGraph.fxml\";","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"    final CategoryAxis xAxis \u003d new CategoryAxis();","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"loyhongshenggg"},"content":"    final NumberAxis yAxis \u003d new NumberAxis();","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"    @FXML","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"loyhongshenggg"},"content":"    final LineChart\u003c?, ?\u003e lineChart \u003d","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"            new LineChart\u003c\u003e(xAxis, yAxis);","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"loyhongshenggg"},"content":"     * Creates an income chart","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"    @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"    public IncomeChart(FinancialAdvisorIncome income) {","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"loyhongshenggg"},"content":"        super(FXML);","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"        XYChart.Series series \u003d new XYChart.Series();","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"        series.setName(\"3 Year Income\");","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"loyhongshenggg"},"content":"        xAxis.setLabel(\"Year\");","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"loyhongshenggg"},"content":"        yAxis.setLabel(\"Income\");","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"        if (income \u003d\u003d null || income.getYear() \u003d\u003d null) {","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"            series.getData().add(new XYChart.Data\u003c\u003e(\"2000\", 10000));","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"            series.getData().add(new XYChart.Data\u003c\u003e(\"2001\", 20000));","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"loyhongshenggg"},"content":"            series.getData().add(new XYChart.Data\u003c\u003e(\"2002\", 9000));","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"        } else {","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"            LocalDate targetYear \u003d income.getYear();","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"            series.getData().add(new XYChart.Data\u003c\u003e(String.valueOf(targetYear.getYear()), income.getFirstYearIncome()));","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"loyhongshenggg"},"content":"            series.getData().add(new XYChart.Data\u003c\u003e(String.valueOf(targetYear.plusYears(1).getYear()),","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"                    income.getSecondYearIncome()));","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"loyhongshenggg"},"content":"            series.getData().add(new XYChart.Data\u003c\u003e(String.valueOf(targetYear.plusYears(2).getYear()),","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"loyhongshenggg"},"content":"                    income.getThirdYearIncome()));","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":52,"author":{"gitId":"loyhongshenggg"},"content":"        lineChart.getData().add(series);","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"loyhongshenggg"},"content":"        lineChart.setBackground(new Background(new BackgroundFill(Color.WHITE, null, null)));","lastModifiedDate":"2022-10-20"},{"lineNumber":54,"author":{"gitId":"loyhongshenggg"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":55,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":56}},{"path":"src/main/java/longtimenosee/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.Logic;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.CommandResult;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    private PolicyListPanel policyListPanel;","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    private EventListPanel eventListPanel;","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"    private IncomeChart incomeChart;","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"Ssatu"},"content":"    private StackPane policyListPanelPlaceholder;","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"loyhongshenggg"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"loyhongshenggg"},"content":"    private StackPane lineChart;","lastModifiedDate":"2022-10-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"Ssatu"},"content":"    void fillInnerParts(String tab) {","lastModifiedDate":"2022-10-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"Ssatu"},"content":"        updateInnerContent(tab);","lastModifiedDate":"2022-10-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":137,"author":{"gitId":"Ssatu"},"content":"     * Updates the content placeholders to display either policies or persons.","lastModifiedDate":"2022-10-11"},{"lineNumber":138,"author":{"gitId":"ReubenChay"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":139,"author":{"gitId":"Ssatu"},"content":"     * @param tab The specified tab type. Either \"policy\" or \"client\".","lastModifiedDate":"2022-10-11"},{"lineNumber":140,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":141,"author":{"gitId":"Ssatu"},"content":"    void updateInnerContent(String tab) {","lastModifiedDate":"2022-10-11"},{"lineNumber":142,"author":{"gitId":"Ssatu"},"content":"        policyListPanel \u003d new PolicyListPanel(logic.getFilteredPolicyList());","lastModifiedDate":"2022-10-11"},{"lineNumber":143,"author":{"gitId":"Ssatu"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2022-10-11"},{"lineNumber":144,"author":{"gitId":"cowlinn"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());","lastModifiedDate":"2022-10-18"},{"lineNumber":145,"author":{"gitId":"Ssatu"},"content":"        personListPanelPlaceholder.getChildren().removeAll();","lastModifiedDate":"2022-10-11"},{"lineNumber":146,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":147,"author":{"gitId":"loyhongshenggg"},"content":"        incomeChart \u003d new IncomeChart(logic.getIncome());","lastModifiedDate":"2022-10-20"},{"lineNumber":148,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":149,"author":{"gitId":"Ssatu"},"content":"        switch (tab) {","lastModifiedDate":"2022-10-11"},{"lineNumber":150,"author":{"gitId":"Ssatu"},"content":"        case \"policy\":","lastModifiedDate":"2022-10-11"},{"lineNumber":151,"author":{"gitId":"Ssatu"},"content":"            personListPanelPlaceholder.getChildren().add(policyListPanel.getRoot());","lastModifiedDate":"2022-10-11"},{"lineNumber":152,"author":{"gitId":"Ssatu"},"content":"            break;","lastModifiedDate":"2022-10-11"},{"lineNumber":153,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":154,"author":{"gitId":"cowlinn"},"content":"        case \"event\":","lastModifiedDate":"2022-10-18"},{"lineNumber":155,"author":{"gitId":"cowlinn"},"content":"            personListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());","lastModifiedDate":"2022-10-18"},{"lineNumber":156,"author":{"gitId":"cowlinn"},"content":"            break;","lastModifiedDate":"2022-10-21"},{"lineNumber":157,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":158,"author":{"gitId":"loyhongshenggg"},"content":"        case \"income\":","lastModifiedDate":"2022-10-20"},{"lineNumber":159,"author":{"gitId":"loyhongshenggg"},"content":"            personListPanelPlaceholder.getChildren().add(incomeChart.lineChart);","lastModifiedDate":"2022-10-20"},{"lineNumber":160,"author":{"gitId":"cowlinn"},"content":"            break;","lastModifiedDate":"2022-10-18"},{"lineNumber":161,"author":{"gitId":"Ssatu"},"content":"        default:","lastModifiedDate":"2022-10-11"},{"lineNumber":162,"author":{"gitId":"Ssatu"},"content":"            //Default case is to display clients","lastModifiedDate":"2022-10-11"},{"lineNumber":163,"author":{"gitId":"Ssatu"},"content":"            personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2022-10-11"},{"lineNumber":164,"author":{"gitId":"Ssatu"},"content":"            break;","lastModifiedDate":"2022-10-11"},{"lineNumber":165,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":166,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":167,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":172,"author":{"gitId":"loyhongshenggg"},"content":"        primaryStage.setHeight(650);","lastModifiedDate":"2022-10-18"},{"lineNumber":173,"author":{"gitId":"loyhongshenggg"},"content":"        primaryStage.setWidth(900);","lastModifiedDate":"2022-10-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"loyhongshenggg"},"content":"        primaryStage.setResizable(false);","lastModifiedDate":"2022-10-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"marcusczh"},"content":"     * @see Logic#execute(String)","lastModifiedDate":"2022-10-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"Ssatu"},"content":"            if (commandResult.isShowPerson()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":233,"author":{"gitId":"Ssatu"},"content":"                updateInnerContent(\"client\");","lastModifiedDate":"2022-10-11"},{"lineNumber":234,"author":{"gitId":"Ssatu"},"content":"            }","lastModifiedDate":"2022-10-11"},{"lineNumber":235,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":236,"author":{"gitId":"Ssatu"},"content":"            if (commandResult.isShowPolicy()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":237,"author":{"gitId":"Ssatu"},"content":"                updateInnerContent(\"policy\");","lastModifiedDate":"2022-10-11"},{"lineNumber":238,"author":{"gitId":"Ssatu"},"content":"            }","lastModifiedDate":"2022-10-11"},{"lineNumber":239,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":240,"author":{"gitId":"cowlinn"},"content":"            if (commandResult.isShowEvent()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":241,"author":{"gitId":"cowlinn"},"content":"                updateInnerContent(\"event\");","lastModifiedDate":"2022-10-18"},{"lineNumber":242,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":243,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":244,"author":{"gitId":"loyhongshenggg"},"content":"            if (commandResult.isShowIncome()) {","lastModifiedDate":"2022-10-20"},{"lineNumber":245,"author":{"gitId":"loyhongshenggg"},"content":"                updateInnerContent(\"income\");","lastModifiedDate":"2022-10-20"},{"lineNumber":246,"author":{"gitId":"cowlinn"},"content":"            }","lastModifiedDate":"2022-10-18"},{"lineNumber":247,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":249,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":257,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"ReubenChay":8,"loyhongshenggg":13,"Ssatu":34,"cowlinn":10,"-":184,"marcusczh":8}},{"path":"src/main/java/longtimenosee/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":" * A UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"    @FXML","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"    private Label birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"    @FXML","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"    private Label income;","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"    @FXML","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"    private Label riskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"        birthday.setText(\"Birthday: \" + person.getBirthday().toString());","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"        income.setText(person.getIncome().toString());","lastModifiedDate":"2022-10-13"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"        riskAppetite.setText(\"Risk Appetite: \" + person.getRiskAppetite().toString());","lastModifiedDate":"2022-10-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"loyhongshenggg":1,"cowlinn":14,"-":74,"marcusczh":2}},{"path":"src/main/java/longtimenosee/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":46,"marcusczh":3}},{"path":"src/main/java/longtimenosee/ui/PolicyCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"public class PolicyCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    private static final String FXML \u003d \"PolicyListCard.fxml\";","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"    public final Policy policy;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"    private Label id;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"    private Label title;","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"    private Label company;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"    private Label commission;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    private FlowPane coverages;","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"    public PolicyCard(Policy policy, int displayedIndex) {","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"        super(FXML);","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"        this.policy \u003d policy;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"Ssatu"},"content":"        title.setText(policy.getTitle().fullTitle);","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        company.setText(String.format(\"%s (%s)\", policy.getCompany().getCompanyName(), policy.getCompany().value));","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"Ssatu"},"content":"        commission.setText(policy.getCommission().value);","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"Ssatu"},"content":"        policy.getCoverages().stream()","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"                .sorted(Comparator.comparing(coverage -\u003e coverage.getCoverageType()))","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"                .forEach(coverage -\u003e coverages.getChildren().add(new Label(coverage.getCoverageType())));","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"Ssatu"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"Ssatu"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"Ssatu"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"            return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"Ssatu"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"Ssatu"},"content":"        if (!(other instanceof PolicyCard)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"Ssatu"},"content":"            return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"Ssatu"},"content":"        // state check","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"Ssatu"},"content":"        PolicyCard card \u003d (PolicyCard) other;","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"Ssatu"},"content":"                \u0026\u0026 policy.equals(card.policy);","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":72,"marcusczh":3}},{"path":"src/main/java/longtimenosee/ui/PolicyListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"public class PolicyListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    private static final String FXML \u003d \"PolicyListPanel.fxml\";","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PolicyListPanel.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"    @FXML","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"    private ListView\u003cPolicy\u003e policyListView;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"    public PolicyListPanel(ObservableList\u003cPolicy\u003e policyList) {","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"        super(FXML);","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"        policyListView.setItems(policyList);","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"        policyListView.setCellFactory(listView -\u003e new PolicyListViewCell());","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"    class PolicyListViewCell extends ListCell\u003cPolicy\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"Ssatu"},"content":"        protected void updateItem(Policy policy, boolean empty) {","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"Ssatu"},"content":"            super.updateItem(policy, empty);","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"            if (empty || policy \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"                setGraphic(null);","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"                setText(null);","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"            } else {","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"Ssatu"},"content":"                setGraphic(new PolicyCard(policy, getIndex() + 1).getRoot());","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"Ssatu"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":46,"marcusczh":3}},{"path":"src/main/java/longtimenosee/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"loyhongshenggg"},"content":"        resultDisplay.setMinHeight(180);","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"loyhongshenggg":1,"-":26,"marcusczh":1}},{"path":"src/main/java/longtimenosee/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":27,"marcusczh":1}},{"path":"src/main/java/longtimenosee/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":12,"marcusczh":1}},{"path":"src/main/java/longtimenosee/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.MainApp;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.LogsCenter;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.StringUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.Logic;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"loyhongshenggg"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/LTNSlogo.png\";","lastModifiedDate":"2022-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"Ssatu"},"content":"            mainWindow.fillInnerParts(\"client\");","lastModifiedDate":"2022-10-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"loyhongshenggg":2,"Ssatu":1,"-":81,"marcusczh":5}},{"path":"src/main/java/longtimenosee/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.MainApp;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":86,"marcusczh":2}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"\u003cStackPane style\u003d\"-fx-background-color: FFCFC0; -fx-max-width: 500;\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" prefHeight\u003d\"41.0\" prefWidth\u003d\"343.0\" promptText\u003d\"Write something~\" style\u003d\" -fx-background-color: FFCFC0;\" /\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"loyhongshenggg":2,"-":7}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-09"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"    background-color: white; /* Used in the default.html file */","lastModifiedDate":"2022-10-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-alignment: \"center\";","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":31,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-radius: 10 10 0 0;","lastModifiedDate":"2022-09-30"},{"lineNumber":32,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-radius: 10 10 0 0;","lastModifiedDate":"2022-09-30"},{"lineNumber":33,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-color: \"black\"","lastModifiedDate":"2022-09-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":48,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-control-inner-background: white;","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":85,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-color: transparent transparent transparent transparent;","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":97,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":100,"author":{"gitId":"loyhongshenggg"},"content":".list-cell { /* background of cards */","lastModifiedDate":"2022-10-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-padding: 20 60 0 60;","lastModifiedDate":"2022-09-30"},{"lineNumber":104,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-09"},{"lineNumber":105,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: WHITE;","lastModifiedDate":"2022-10-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: WHITE","lastModifiedDate":"2022-10-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2022-09-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"loyhongshenggg"},"content":".graph {","lastModifiedDate":"2022-10-20"},{"lineNumber":121,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-10-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":124,"author":{"gitId":"loyhongshenggg"},"content":"/*.list-cell:filled:selected #cardPane {*/","lastModifiedDate":"2022-09-30"},{"lineNumber":125,"author":{"gitId":"loyhongshenggg"},"content":"/*    !* when selected, what\u0027s the color *!*/","lastModifiedDate":"2022-09-30"},{"lineNumber":126,"author":{"gitId":"loyhongshenggg"},"content":"/*    -fx-background-color: #FFFFE0;*/","lastModifiedDate":"2022-09-30"},{"lineNumber":127,"author":{"gitId":"loyhongshenggg"},"content":"/*    -fx-border-width: 1;*/","lastModifiedDate":"2022-09-30"},{"lineNumber":128,"author":{"gitId":"loyhongshenggg"},"content":"/*}*/","lastModifiedDate":"2022-09-30"},{"lineNumber":129,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":130,"author":{"gitId":"loyhongshenggg"},"content":"/*.list-cell:filled:hover #cardPane {*/","lastModifiedDate":"2022-10-01"},{"lineNumber":131,"author":{"gitId":"loyhongshenggg"},"content":"/*    !* when selected, what\u0027s the color *!*/","lastModifiedDate":"2022-10-01"},{"lineNumber":132,"author":{"gitId":"loyhongshenggg"},"content":"/*    -fx-background-color: #FFFFE0;*/","lastModifiedDate":"2022-10-01"},{"lineNumber":133,"author":{"gitId":"loyhongshenggg"},"content":"/*    -fx-border-width: 1;*/","lastModifiedDate":"2022-10-01"},{"lineNumber":134,"author":{"gitId":"loyhongshenggg"},"content":"/*}*/","lastModifiedDate":"2022-10-01"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-text-fill: black; /* text color */","lastModifiedDate":"2022-10-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":154,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"loyhongshenggg"},"content":".pane-with-border { /* command output alter*/","lastModifiedDate":"2022-09-30"},{"lineNumber":158,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-09-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":161,"author":{"gitId":"loyhongshenggg"},"content":".command-box { /* TODO explore how to make it smaller align center*/","lastModifiedDate":"2022-09-30"},{"lineNumber":162,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: #FFCFC0;","lastModifiedDate":"2022-09-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":164,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-radius: 20 20 0 0;","lastModifiedDate":"2022-09-30"},{"lineNumber":165,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-radius: 20 20 0 0;","lastModifiedDate":"2022-09-30"},{"lineNumber":166,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-min-height: 60;","lastModifiedDate":"2022-09-30"},{"lineNumber":167,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":174,"author":{"gitId":"loyhongshenggg"},"content":".result-display { /* controls text in result display*/","lastModifiedDate":"2022-09-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":176,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-font-family: \"Inter\";","lastModifiedDate":"2022-09-30"},{"lineNumber":177,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2022-09-30"},{"lineNumber":178,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2022-09-30"},{"lineNumber":179,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-padding:  20 20 20 20;","lastModifiedDate":"2022-09-30"},{"lineNumber":180,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":184,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-text-fill: transparent !important;","lastModifiedDate":"2022-09-30"},{"lineNumber":185,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2022-09-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-font-family: \"Inter\"; /* status bar*/","lastModifiedDate":"2022-09-30"},{"lineNumber":190,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2022-09-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":230,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2022-09-30"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-09-30"},{"lineNumber":303,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-09-30"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":316,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":317,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: grey;","lastModifiedDate":"2022-09-30"},{"lineNumber":318,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-insets: 4;","lastModifiedDate":"2022-09-30"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":321,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":326,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":330,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":334,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":338,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: #EEEEEE; /* list panel color*/","lastModifiedDate":"2022-10-18"},{"lineNumber":340,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2022-09-30"},{"lineNumber":341,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2022-09-30"},{"lineNumber":342,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2022-09-30"},{"lineNumber":343,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-padding: 0 0 0 50; /* to fit text into each card*/","lastModifiedDate":"2022-09-30"},{"lineNumber":344,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":346,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":351,"author":{"gitId":"loyhongshenggg"},"content":"#commandTextField { /* handles wording inside command text*/","lastModifiedDate":"2022-09-30"},{"lineNumber":352,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: transparent transparent transparent transparent;","lastModifiedDate":"2022-09-30"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":355,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2022-09-30"},{"lineNumber":356,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-color: black;","lastModifiedDate":"2022-09-30"},{"lineNumber":357,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-font-family: \"Inter\";","lastModifiedDate":"2022-09-30"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":359,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2022-09-30"},{"lineNumber":360,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":361,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":363,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":367,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":368,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-09-30"},{"lineNumber":369,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-color: black;","lastModifiedDate":"2022-09-30"},{"lineNumber":370,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-border-width: 0 0 0 0;","lastModifiedDate":"2022-09-30"},{"lineNumber":371,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":373,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":376,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":378,"author":{"gitId":"loyhongshenggg"},"content":"#tags .label { /* handles tagging in result */","lastModifiedDate":"2022-09-30"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":385,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":386,"author":{"gitId":"loyhongshenggg"},"content":".graph {","lastModifiedDate":"2022-10-18"},{"lineNumber":387,"author":{"gitId":"loyhongshenggg"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-18"},{"lineNumber":388,"author":{"gitId":"loyhongshenggg"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":389,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":390,"author":{"gitId":"Ssatu"},"content":"#coverages {","lastModifiedDate":"2022-10-28"},{"lineNumber":391,"author":{"gitId":"Ssatu"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2022-10-28"},{"lineNumber":392,"author":{"gitId":"Ssatu"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2022-10-28"},{"lineNumber":393,"author":{"gitId":"Ssatu"},"content":"}","lastModifiedDate":"2022-10-28"},{"lineNumber":394,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":395,"author":{"gitId":"Ssatu"},"content":"#coverages .label { /* handles coverages in result */","lastModifiedDate":"2022-10-28"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-10-28"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2022-10-28"},{"lineNumber":398,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2022-10-28"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2022-10-28"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2022-10-28"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2022-10-28"},{"lineNumber":402,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-10-28"}],"authorContributionMap":{"loyhongshenggg":74,"Ssatu":7,"-":321}},{"path":"src/main/resources/view/EventListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"            \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$duration\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"            \u003cLabel fx:id\u003d\"personName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$personName\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"ReubenChay":32,"cowlinn":3}},{"path":"src/main/resources/view/EventListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" style\u003d\"-fx-background-color: white;\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"    \u003cListView fx:id\u003d\"eventListView\" style\u003d\"-fx-background-color: white;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"ReubenChay":9}},{"path":"src/main/resources/view/LineGraph.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?import javafx.scene.chart.CategoryAxis?\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?import javafx.scene.chart.LineChart?\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?import javafx.scene.chart.NumberAxis?\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"\u003cAnchorPane styleClass\u003d\"graph\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"loyhongshenggg"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"   \u003cLineChart fx:id\u003d\"lineChart\" layoutX\u003d\"63.0\" layoutY\u003d\"21.0\" prefHeight\u003d\"358.0\" prefWidth\u003d\"475.0\" style\u003d\"-fx-background-color: white;\" title\u003d\"3 YEAR INCOME\"\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"loyhongshenggg"},"content":"     \u003cxAxis\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"       \u003cCategoryAxis label\u003d\"Year\" layoutX\u003d\"2000.0\" side\u003d\"BOTTOM\" /\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"     \u003c/xAxis\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"     \u003cyAxis\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"       \u003cNumberAxis label\u003d\"Total Income\" layoutY\u003d\"1000000\" side\u003d\"LEFT\" /\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"loyhongshenggg"},"content":"     \u003c/yAxis\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"   \u003c/LineChart\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"   \u003c/children\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"loyhongshenggg"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"loyhongshenggg":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Long Time No See (LTNS)\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"loyhongshenggg"},"content":"    \u003cImage url\u003d\"@/images/LTNSlogo.png\" /\u003e","lastModifiedDate":"2022-09-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"        \u003cMenuBar style \u003d \"-fx-background-color: #F78361\" fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"        \u003cStackPane style\u003d\"-fx-background-color: white;\" fx:id\u003d\"resultDisplayPlaceholder\" mouseTransparent\u003d\"false\" minHeight\u003d\"150\" prefHeight\u003d\"120\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"        \u003cVBox fx:id\u003d\"personList\"  prefWidth\u003d\"540\" style\u003d\"-fx-background-color: white;\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"          \u003cStackPane style\u003d\"-fx-background-color: black;\" fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":42,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"\u003c!--        \\\\\\\\\\\\\\\\\\\\\\\\ Commented out attempt at Policy list panel \\\\\\\\\\\\\\\\\\\\\\--\u003e","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"loyhongshenggg"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"        \u003cStackPane fx:id\u003d\"eventList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"          \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"loyhongshenggg"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" style\u003d\"-fx-background-color: FFCFC0; -fx-min-width: 300\" styleClass\u003d\"command-box\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":55,"author":{"gitId":"loyhongshenggg"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":57,"author":{"gitId":"loyhongshenggg"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"ReubenChay":3,"loyhongshenggg":15,"Ssatu":2,"-":43}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"loyhongshenggg"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"loyhongshenggg"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"loyhongshenggg"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" style\u003d\"-fx-text-fill: red; -fx-font-size: 18\" /\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"      \u003cLabel fx:id\u003d\"income\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$income\" /\u003e","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"      \u003cLabel fx:id\u003d\"riskAppetite\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$riskAppetite\" /\u003e","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"loyhongshenggg"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":40,"author":{"gitId":"loyhongshenggg"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":41,"author":{"gitId":"loyhongshenggg"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"loyhongshenggg":8,"cowlinn":3,"-":32}},{"path":"src/main/resources/view/PersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"loyhongshenggg"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-background-color: white;\"\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"  \u003cListView fx:id\u003d\"personListView\" style\u003d\"-fx-background-color: white;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"loyhongshenggg":2,"Ssatu":2,"-":6}},{"path":"src/main/resources/view/PolicyListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"Ssatu"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"Ssatu"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"Ssatu"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"Ssatu"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"Ssatu"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"Ssatu"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"Ssatu"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"Ssatu"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"Ssatu"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"Ssatu"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"Ssatu"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"Ssatu"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"Ssatu"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"Ssatu"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"Ssatu"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"Ssatu"},"content":"        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"Ssatu"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"Ssatu"},"content":"      \u003cFlowPane fx:id\u003d\"coverages\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"Ssatu"},"content":"      \u003cLabel fx:id\u003d\"company\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$company\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"Ssatu"},"content":"      \u003cLabel fx:id\u003d\"commission\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$commission\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"Ssatu"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"Ssatu"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"Ssatu"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":35}},{"path":"src/main/resources/view/PolicyListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Ssatu"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"Ssatu"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"Ssatu"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"Ssatu"},"content":"  \u003cListView fx:id\u003d\"policyListView\"  VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"Ssatu"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"Ssatu":8}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" style\u003d\"-fx-background-color: white; -fx-min-height: 150;\"  styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-27"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"                    \u003cTextArea fx:id\u003d\"resultDisplay\" style\u003d\"-fx-min-height: 150; -fx-font-size: 22\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e","lastModifiedDate":"2022-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"cowlinn":2,"-":6}},{"path":"src/main/resources/view/StatusBarFooter.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"loyhongshenggg"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"loyhongshenggg"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":13,"author":{"gitId":"loyhongshenggg"},"content":"   \u003crowConstraints\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":14,"author":{"gitId":"loyhongshenggg"},"content":"      \u003cRowConstraints /\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":15,"author":{"gitId":"loyhongshenggg"},"content":"   \u003c/rowConstraints\u003e","lastModifiedDate":"2022-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c/GridPane\u003e","lastModifiedDate":"2016-08-26"}],"authorContributionMap":{"loyhongshenggg":5,"-":11}},{"path":"src/test/java/longtimenosee/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"-":57,"marcusczh":1}},{"path":"src/test/java/longtimenosee/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"-":26,"marcusczh":1}},{"path":"src/test/java/longtimenosee/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":133,"marcusczh":2}},{"path":"src/test/java/longtimenosee/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.core.index;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"-":58,"marcusczh":2}},{"path":"src/test/java/longtimenosee/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"loyhongshenggg"},"content":"        assertNotNull(AppUtil.getImage(\"/images/LTNSlogo.png\"));","lastModifiedDate":"2022-09-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"loyhongshenggg":1,"-":33,"marcusczh":2}},{"path":"src/test/java/longtimenosee/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"-":105,"marcusczh":3}},{"path":"src/test/java/longtimenosee/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Config;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":112,"marcusczh":4}},{"path":"src/test/java/longtimenosee/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":21,"marcusczh":2}},{"path":"src/test/java/longtimenosee/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.SerializableTestClass;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.TestUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":42,"marcusczh":3}},{"path":"src/test/java/longtimenosee/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.commons.util;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"-":141,"marcusczh":2}},{"path":"src/test/java/longtimenosee/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INCOME_DESC_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.RISK_APPETITE_DESC_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"//import static longtimenosee.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.AddCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.CommandResult;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ListCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.JsonAddressBookStorage;","lastModifiedDate":"2022-10-05"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.JsonUserPrefsStorage;","lastModifiedDate":"2022-10-05"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.storage.StorageManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"        String deleteCommand \u003d \"deleteClient 9\";","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + INCOME_DESC_AMY + RISK_APPETITE_DESC_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"cowlinn":6,"-":137,"marcusczh":23}},{"path":"src/test/java/longtimenosee/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"-":36,"marcusczh":9}},{"path":"src/test/java/longtimenosee/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"import java.util.List;","lastModifiedDate":"2022-10-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"loyhongshenggg"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"loyhongshenggg"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2022-10-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"loyhongshenggg"},"content":"        public FinancialAdvisorIncome getIncome() {","lastModifiedDate":"2022-10-20"},{"lineNumber":93,"author":{"gitId":"loyhongshenggg"},"content":"            return new FinancialAdvisorIncome();","lastModifiedDate":"2022-10-20"},{"lineNumber":94,"author":{"gitId":"loyhongshenggg"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"ReubenChay"},"content":"        public void sort(Comparator comparator) {","lastModifiedDate":"2022-10-01"},{"lineNumber":126,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2022-10-01"},{"lineNumber":127,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":128,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2022-09-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"Ssatu"},"content":"        public boolean hasPolicy(Policy toAdd) {","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"Ssatu"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"Ssatu"},"content":"        public void addPolicy(Policy toAdd) {","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"Ssatu"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"Ssatu"},"content":"        public void deletePolicy(Policy toDelete) {","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"Ssatu"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"Ssatu"},"content":"        public void setPolicy(Policy target, Policy editedPolicy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"Ssatu"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"Ssatu"},"content":"        public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"Ssatu"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"Ssatu"},"content":"        public void updateFilteredPolicyList(Predicate\u003cPolicy\u003e predicate) {","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"Ssatu"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":191,"author":{"gitId":"cowlinn"},"content":"        public void addEvent(Event toAdd, String personName) {","lastModifiedDate":"2022-10-19"},{"lineNumber":192,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":193,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":194,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":195,"author":{"gitId":"cowlinn"},"content":"        public boolean hasEventOverlap(Event toAdd) {","lastModifiedDate":"2022-10-19"},{"lineNumber":196,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":197,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":198,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":199,"author":{"gitId":"cowlinn"},"content":"        public List\u003cEvent\u003e listEventsOverlap(Event toAdd) {","lastModifiedDate":"2022-10-19"},{"lineNumber":200,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":201,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":202,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":203,"author":{"gitId":"cowlinn"},"content":"        public boolean hasEvent(Event toAdd) {","lastModifiedDate":"2022-10-19"},{"lineNumber":204,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":205,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":206,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":207,"author":{"gitId":"cowlinn"},"content":"        public void deleteEvent(Event toDelete) {","lastModifiedDate":"2022-10-19"},{"lineNumber":208,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":209,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":210,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":211,"author":{"gitId":"cowlinn"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2022-10-19"},{"lineNumber":212,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":213,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":214,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":215,"author":{"gitId":"cowlinn"},"content":"        public List\u003cEvent\u003e listEventsSameDay(Event toAdd) {","lastModifiedDate":"2022-10-19"},{"lineNumber":216,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":217,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":218,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":219,"author":{"gitId":"cowlinn"},"content":"        /**","lastModifiedDate":"2022-10-19"},{"lineNumber":220,"author":{"gitId":"cowlinn"},"content":"         * @return","lastModifiedDate":"2022-10-19"},{"lineNumber":221,"author":{"gitId":"cowlinn"},"content":"         */","lastModifiedDate":"2022-10-19"},{"lineNumber":222,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":223,"author":{"gitId":"cowlinn"},"content":"        public List\u003cEvent\u003e calendarView() {","lastModifiedDate":"2022-10-19"},{"lineNumber":224,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":225,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":226,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":227,"author":{"gitId":"cowlinn"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2022-10-19"},{"lineNumber":228,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-19"},{"lineNumber":229,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":230,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-20"},{"lineNumber":231,"author":{"gitId":"cowlinn"},"content":"        public void removeEventsUnderPerson(Person personToDelete) {","lastModifiedDate":"2022-10-20"},{"lineNumber":232,"author":{"gitId":"cowlinn"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-20"},{"lineNumber":233,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":278,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"ReubenChay":6,"loyhongshenggg":5,"Ssatu":30,"cowlinn":45,"-":181,"marcusczh":11}},{"path":"src/test/java/longtimenosee/logic/commands/AddEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"import java.util.List;","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.ReadOnlyUserPrefs;","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Date;","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Description;","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Duration;","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.policy.FinancialAdvisorIncome;","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.testutil.EventBuilder;","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"public class AddEventCommandTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"    public void execute_duplicateEvent_throwsCommandException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"        Event validEvent \u003d new Event(new Description(\"Lunch with Amy\"), new Name(\"Amy Bee\"),","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"                new Date(\"2020-10-10\"), new Duration(\"10:00__11:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"        AddEventCommandTest.ModelStub modelStub \u003d new AddEventCommandTest.SingleModelStub(validPerson, validEvent);","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(CommandException.class, AddEventCommand.MESSAGE_DUPLICATE_EVENT, () -\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"                addEventCommand.execute(modelStub));","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"    public void equals() {","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"        Event withAlice \u003d new EventBuilder().build();","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        Event withBenson \u003d new EventBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-11-11\")","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Coffee with Benson\")","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"15:00__16:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"        AddEventCommand addAliceEventCommand \u003d new AddEventCommand(withAlice);","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"        AddEventCommand addBensonEventCommand \u003d new AddEventCommand(withBenson);","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(addAliceEventCommand.equals(addAliceEventCommand));","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"        AddEventCommand addAliceCommandCopy \u003d new AddEventCommand(withAlice);","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(addAliceEventCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(addAliceEventCommand.equals(1));","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(addAliceEventCommand.equals(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(addAliceEventCommand.equals(addBensonEventCommand));","lastModifiedDate":"2022-11-01"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2022-11-01"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2022-11-01"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2022-11-01"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":91,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":92,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"        public FinancialAdvisorIncome getIncome() {","lastModifiedDate":"2022-11-01"},{"lineNumber":94,"author":{"gitId":"ReubenChay"},"content":"            return new FinancialAdvisorIncome();","lastModifiedDate":"2022-11-01"},{"lineNumber":95,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":96,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":97,"author":{"gitId":"ReubenChay"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2022-11-01"},{"lineNumber":98,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":99,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":100,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":101,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":102,"author":{"gitId":"ReubenChay"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2022-11-01"},{"lineNumber":103,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":104,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":105,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":106,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":107,"author":{"gitId":"ReubenChay"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2022-11-01"},{"lineNumber":108,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":109,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":110,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":111,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":112,"author":{"gitId":"ReubenChay"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2022-11-01"},{"lineNumber":113,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":114,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":115,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":116,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":117,"author":{"gitId":"ReubenChay"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2022-11-01"},{"lineNumber":118,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":119,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":120,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":121,"author":{"gitId":"ReubenChay"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2022-11-01"},{"lineNumber":122,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":123,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":124,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":125,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":126,"author":{"gitId":"ReubenChay"},"content":"        public void sort(Comparator comparator) {","lastModifiedDate":"2022-11-01"},{"lineNumber":127,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2022-11-01"},{"lineNumber":128,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":129,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":130,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":131,"author":{"gitId":"ReubenChay"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2022-11-01"},{"lineNumber":132,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":133,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":134,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":135,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":136,"author":{"gitId":"ReubenChay"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2022-11-01"},{"lineNumber":137,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":138,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":139,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":140,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":141,"author":{"gitId":"ReubenChay"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2022-11-01"},{"lineNumber":142,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":143,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":144,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":145,"author":{"gitId":"ReubenChay"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2022-11-01"},{"lineNumber":146,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":147,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":148,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":149,"author":{"gitId":"ReubenChay"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2022-11-01"},{"lineNumber":150,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":151,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":152,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":153,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":154,"author":{"gitId":"ReubenChay"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2022-11-01"},{"lineNumber":155,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":156,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":157,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":158,"author":{"gitId":"ReubenChay"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-11-01"},{"lineNumber":159,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":160,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":161,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":162,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":163,"author":{"gitId":"ReubenChay"},"content":"        public boolean hasPolicy(Policy toAdd) {","lastModifiedDate":"2022-11-01"},{"lineNumber":164,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":165,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":166,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":167,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":168,"author":{"gitId":"ReubenChay"},"content":"        public void addPolicy(Policy toAdd) {","lastModifiedDate":"2022-11-01"},{"lineNumber":169,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":170,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":171,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":172,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":173,"author":{"gitId":"ReubenChay"},"content":"        public void deletePolicy(Policy toDelete) {","lastModifiedDate":"2022-11-01"},{"lineNumber":174,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":175,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":176,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":177,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":178,"author":{"gitId":"ReubenChay"},"content":"        public void setPolicy(Policy target, Policy editedPolicy) {","lastModifiedDate":"2022-11-01"},{"lineNumber":179,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":180,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":181,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":182,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":183,"author":{"gitId":"ReubenChay"},"content":"        public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2022-11-01"},{"lineNumber":184,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":185,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":186,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":187,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":188,"author":{"gitId":"ReubenChay"},"content":"        public void updateFilteredPolicyList(Predicate\u003cPolicy\u003e predicate) {","lastModifiedDate":"2022-11-01"},{"lineNumber":189,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":190,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":191,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":192,"author":{"gitId":"ReubenChay"},"content":"        public void addEvent(Event toAdd, String personName) {","lastModifiedDate":"2022-11-01"},{"lineNumber":193,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":194,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":195,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":196,"author":{"gitId":"ReubenChay"},"content":"        public boolean hasEventOverlap(Event toAdd) {","lastModifiedDate":"2022-11-01"},{"lineNumber":197,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":198,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":199,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":200,"author":{"gitId":"ReubenChay"},"content":"        public List\u003cEvent\u003e listEventsOverlap(Event toAdd) {","lastModifiedDate":"2022-11-01"},{"lineNumber":201,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":202,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":203,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":204,"author":{"gitId":"ReubenChay"},"content":"        public boolean hasEvent(Event toAdd) {","lastModifiedDate":"2022-11-01"},{"lineNumber":205,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":206,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":207,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":208,"author":{"gitId":"ReubenChay"},"content":"        public void deleteEvent(Event toDelete) {","lastModifiedDate":"2022-11-01"},{"lineNumber":209,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":210,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":211,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":212,"author":{"gitId":"ReubenChay"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {","lastModifiedDate":"2022-11-01"},{"lineNumber":213,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":214,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":215,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":216,"author":{"gitId":"ReubenChay"},"content":"        public List\u003cEvent\u003e listEventsSameDay(Event toAdd) {","lastModifiedDate":"2022-11-01"},{"lineNumber":217,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":218,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":219,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":220,"author":{"gitId":"ReubenChay"},"content":"        /**","lastModifiedDate":"2022-11-01"},{"lineNumber":221,"author":{"gitId":"ReubenChay"},"content":"         * @return","lastModifiedDate":"2022-11-01"},{"lineNumber":222,"author":{"gitId":"ReubenChay"},"content":"         */","lastModifiedDate":"2022-11-01"},{"lineNumber":223,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":224,"author":{"gitId":"ReubenChay"},"content":"        public List\u003cEvent\u003e calendarView() {","lastModifiedDate":"2022-11-01"},{"lineNumber":225,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":226,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":227,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":228,"author":{"gitId":"ReubenChay"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {","lastModifiedDate":"2022-11-01"},{"lineNumber":229,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":230,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":231,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":232,"author":{"gitId":"ReubenChay"},"content":"        public void removeEventsUnderPerson(Person personToDelete) {","lastModifiedDate":"2022-11-01"},{"lineNumber":233,"author":{"gitId":"ReubenChay"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-01"},{"lineNumber":234,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":235,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":236,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":237,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":238,"author":{"gitId":"ReubenChay"},"content":"     * A Model stub that contains a single person and event","lastModifiedDate":"2022-11-01"},{"lineNumber":239,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":240,"author":{"gitId":"ReubenChay"},"content":"    private class SingleModelStub extends AddEventCommandTest.ModelStub {","lastModifiedDate":"2022-11-01"},{"lineNumber":241,"author":{"gitId":"ReubenChay"},"content":"        private final Person person;","lastModifiedDate":"2022-11-01"},{"lineNumber":242,"author":{"gitId":"ReubenChay"},"content":"        private Event event;","lastModifiedDate":"2022-11-01"},{"lineNumber":243,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":244,"author":{"gitId":"ReubenChay"},"content":"        SingleModelStub(Person person, Event event) {","lastModifiedDate":"2022-11-01"},{"lineNumber":245,"author":{"gitId":"ReubenChay"},"content":"            requireNonNull(person);","lastModifiedDate":"2022-11-01"},{"lineNumber":246,"author":{"gitId":"ReubenChay"},"content":"            requireNonNull(event);","lastModifiedDate":"2022-11-01"},{"lineNumber":247,"author":{"gitId":"ReubenChay"},"content":"            this.person \u003d person;","lastModifiedDate":"2022-11-01"},{"lineNumber":248,"author":{"gitId":"ReubenChay"},"content":"            this.event \u003d event;","lastModifiedDate":"2022-11-01"},{"lineNumber":249,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":250,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":251,"author":{"gitId":"ReubenChay"},"content":"        SingleModelStub(Person person) {","lastModifiedDate":"2022-11-01"},{"lineNumber":252,"author":{"gitId":"ReubenChay"},"content":"            requireNonNull(person);","lastModifiedDate":"2022-11-01"},{"lineNumber":253,"author":{"gitId":"ReubenChay"},"content":"            this.person \u003d person;","lastModifiedDate":"2022-11-01"},{"lineNumber":254,"author":{"gitId":"ReubenChay"},"content":"            this.event \u003d null;","lastModifiedDate":"2022-11-01"},{"lineNumber":255,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":256,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":257,"author":{"gitId":"ReubenChay"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2022-11-01"},{"lineNumber":258,"author":{"gitId":"ReubenChay"},"content":"            requireNonNull(event);","lastModifiedDate":"2022-11-01"},{"lineNumber":259,"author":{"gitId":"ReubenChay"},"content":"            this.event \u003d event;","lastModifiedDate":"2022-11-01"},{"lineNumber":260,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":261,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":262,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":263,"author":{"gitId":"ReubenChay"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2022-11-01"},{"lineNumber":264,"author":{"gitId":"ReubenChay"},"content":"            requireNonNull(person);","lastModifiedDate":"2022-11-01"},{"lineNumber":265,"author":{"gitId":"ReubenChay"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2022-11-01"},{"lineNumber":266,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":267,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":268,"author":{"gitId":"ReubenChay"},"content":"        @Override","lastModifiedDate":"2022-11-01"},{"lineNumber":269,"author":{"gitId":"ReubenChay"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2022-11-01"},{"lineNumber":270,"author":{"gitId":"ReubenChay"},"content":"            requireNonNull(event);","lastModifiedDate":"2022-11-01"},{"lineNumber":271,"author":{"gitId":"ReubenChay"},"content":"            return this.event.isSameEvent(event);","lastModifiedDate":"2022-11-01"},{"lineNumber":272,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":273,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":274,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":274}},{"path":"src/test/java/longtimenosee/logic/commands/CalendarCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalEvents.getTypicalAddressBook;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import java.util.List;","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"public class CalendarCommandTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"    private Model model;","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"    @BeforeEach","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"    public void setUp() {","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"        assertCommandSuccess(new CalendarCommand(), model, CalendarCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        showEventAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"        assertCommandSuccess(new CalendarCommand(), model, CalendarCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"    public void execute_listProperlyFiltered() {","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"        List\u003cEvent\u003e list \u003d model.calendarView();","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"        assertEquals(2, list.size());","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"    public void execute_filteredListUnaffected() {","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"        model.calendarView();","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"        expectedModel.calendarView();","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"        assertEquals(7, model.getFilteredEventList().size());","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"        assertEquals(7, expectedModel.getFilteredEventList().size());","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":55}},{"path":"src/test/java/longtimenosee/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"-":25,"marcusczh":7}},{"path":"src/test/java/longtimenosee/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\", false, false, false);","lastModifiedDate":"2022-10-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"loyhongshenggg"},"content":"        assertTrue(commandResult.equals(","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"                new CommandResult(\"feedback\", false, false, false, false, false, false)));","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\", false, false, false)));","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"loyhongshenggg"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false,","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"                false, false, false)));","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"Ssatu"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"                false, false, false, false)));","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\", false, false, false);","lastModifiedDate":"2022-10-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, false).hashCode());","lastModifiedDate":"2022-10-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", false, false, false).hashCode());","lastModifiedDate":"2022-10-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"Ssatu"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false,","lastModifiedDate":"2022-10-11"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"                false, false, false, false).hashCode());","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"Ssatu"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true,","lastModifiedDate":"2022-10-11"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"                false, true, false, false).hashCode());","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"ReubenChay":9,"loyhongshenggg":2,"Ssatu":3,"cowlinn":6,"-":44,"marcusczh":1}},{"path":"src/test/java/longtimenosee/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2022-10-13"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_INCOME;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_RISK_APPETITE;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.predicate.NameInEventContainsKeywordsPredicate;","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"2020-01-01\";","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"2010-01-01\";","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"    public static final String VALID_INCOME_AMY \u003d \"100.0\";","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"    public static final String VALID_INCOME_BOB \u003d \"200.0\";","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"    public static final String VALID_RISK_APPETITE_AMY \u003d \"M\";","lastModifiedDate":"2022-10-13"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"    public static final String VALID_RISK_APPETITE_BOB \u003d \"M\";","lastModifiedDate":"2022-10-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;","lastModifiedDate":"2022-10-13"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"    public static final String INCOME_DESC_AMY \u003d \" \" + PREFIX_INCOME + VALID_INCOME_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"    public static final String INCOME_DESC_BOB \u003d \" \" + PREFIX_INCOME + VALID_INCOME_BOB;","lastModifiedDate":"2022-10-13"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"    public static final String RISK_APPETITE_DESC_AMY \u003d \" \" + PREFIX_RISK_APPETITE + VALID_RISK_APPETITE_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"    public static final String RISK_APPETITE_DESC_BOB \u003d \" \" + PREFIX_RISK_APPETITE + VALID_RISK_APPETITE_BOB;","lastModifiedDate":"2022-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"                .withTags(VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_AMY).withIncome(VALID_INCOME_AMY)","lastModifiedDate":"2022-10-13"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"                .withRiskAppetite(VALID_RISK_APPETITE_AMY).build();","lastModifiedDate":"2022-10-13"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_BOB)","lastModifiedDate":"2022-10-13"},{"lineNumber":90,"author":{"gitId":"cowlinn"},"content":"                .withIncome(VALID_INCOME_BOB)","lastModifiedDate":"2022-10-13"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"                .withRiskAppetite(VALID_RISK_APPETITE_BOB).build();","lastModifiedDate":"2022-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"            //added additional check for result and expectedCommandResult","lastModifiedDate":"2022-11-01"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"            assertEquals(result, expectedCommandResult);","lastModifiedDate":"2022-11-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"loyhongshenggg"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false);","lastModifiedDate":"2022-10-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":152,"author":{"gitId":"ReubenChay"},"content":"     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the","lastModifiedDate":"2022-11-01"},{"lineNumber":153,"author":{"gitId":"ReubenChay"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2022-11-01"},{"lineNumber":154,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":155,"author":{"gitId":"ReubenChay"},"content":"    public static void showEventAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2022-11-01"},{"lineNumber":156,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2022-11-01"},{"lineNumber":157,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":158,"author":{"gitId":"ReubenChay"},"content":"        Event event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-11-01"},{"lineNumber":159,"author":{"gitId":"ReubenChay"},"content":"        final String[] splitName \u003d event.getPersonName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2022-11-01"},{"lineNumber":160,"author":{"gitId":"ReubenChay"},"content":"        model.updateFilteredEventList(new NameInEventContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2022-11-01"},{"lineNumber":161,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":162,"author":{"gitId":"ReubenChay"},"content":"        assertEquals(1, model.getFilteredEventList().size());","lastModifiedDate":"2022-11-01"},{"lineNumber":163,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":164,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"ReubenChay":17,"loyhongshenggg":1,"cowlinn":23,"-":111,"marcusczh":13}},{"path":"src/test/java/longtimenosee/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"-":96,"marcusczh":13}},{"path":"src/test/java/longtimenosee/logic/commands/DeleteEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalEvents.getTypicalAddressBook;","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":" * {@code DeleteEventCommand}.","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"public class DeleteEventCommandTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"        expectedModel.deleteEvent(eventToDelete);","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundIndex);","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"        showEventAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"        expectedModel.deleteEvent(eventToDelete);","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"        showNoEvent(expectedModel);","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"        showEventAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());","lastModifiedDate":"2022-11-01"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundIndex);","lastModifiedDate":"2022-11-01"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-11-01"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"    public void equals() {","lastModifiedDate":"2022-11-01"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"        DeleteEventCommand deleteFirstCommand \u003d new DeleteEventCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"        DeleteEventCommand deleteSecondCommand \u003d new DeleteEventCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-11-01"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2022-11-01"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-11-01"},{"lineNumber":91,"author":{"gitId":"ReubenChay"},"content":"        DeleteEventCommand deleteFirstCommandCopy \u003d new DeleteEventCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":92,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2022-11-01"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":94,"author":{"gitId":"ReubenChay"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":95,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2022-11-01"},{"lineNumber":96,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":97,"author":{"gitId":"ReubenChay"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":98,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":99,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":100,"author":{"gitId":"ReubenChay"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":101,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2022-11-01"},{"lineNumber":102,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":103,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":104,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":105,"author":{"gitId":"ReubenChay"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2022-11-01"},{"lineNumber":106,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":107,"author":{"gitId":"ReubenChay"},"content":"    private void showNoEvent(Model model) {","lastModifiedDate":"2022-11-01"},{"lineNumber":108,"author":{"gitId":"ReubenChay"},"content":"        model.updateFilteredEventList(p -\u003e false);","lastModifiedDate":"2022-11-01"},{"lineNumber":109,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":110,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(model.getFilteredEventList().isEmpty());","lastModifiedDate":"2022-11-01"},{"lineNumber":111,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":112,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"},{"lineNumber":113,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":113}},{"path":"src/test/java/longtimenosee/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.Messages;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"ReubenChay":2,"-":149,"marcusczh":23}},{"path":"src/test/java/longtimenosee/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"-":47,"marcusczh":11}},{"path":"src/test/java/longtimenosee/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"Ssatu"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"                false, false, false, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"ReubenChay":1,"Ssatu":1,"-":14,"marcusczh":5}},{"path":"src/test/java/longtimenosee/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.RiskAppetiteMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(List.of(firstPredicate));","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(List.of(secondPredicate));","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(List.of(firstPredicate));","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"        FindCommand command \u003d new FindCommand(List.of(predicate));","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"        FindCommand command \u003d new FindCommand(List.of(predicate));","lastModifiedDate":"2022-10-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marcusczh"},"content":"    public void execute_multiplePredicates_onePersonFound() {","lastModifiedDate":"2022-11-01"},{"lineNumber":84,"author":{"gitId":"marcusczh"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marcusczh"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d prepareNamePredicate(\"Alice\");","lastModifiedDate":"2022-10-21"},{"lineNumber":86,"author":{"gitId":"marcusczh"},"content":"        RiskAppetiteMatchesInputPredicate secondPredicate \u003d prepareRiskAppetitePredicate(\"M\");","lastModifiedDate":"2022-10-22"},{"lineNumber":87,"author":{"gitId":"marcusczh"},"content":"        FindCommand command \u003d new FindCommand(List.of(firstPredicate, secondPredicate));","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marcusczh"},"content":"        Predicate\u003cPerson\u003e predicate \u003d firstPredicate.and(secondPredicate);","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"marcusczh"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"marcusczh"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marcusczh"},"content":"        assertEquals(Collections.singletonList(ALICE), model.getFilteredPersonList());","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":93,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":97,"author":{"gitId":"marcusczh"},"content":"    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":100,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":101,"author":{"gitId":"marcusczh"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":102,"author":{"gitId":"marcusczh"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2022-10-21"},{"lineNumber":103,"author":{"gitId":"marcusczh"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":104,"author":{"gitId":"marcusczh"},"content":"    private RiskAppetiteMatchesInputPredicate prepareRiskAppetitePredicate(String userInput) {","lastModifiedDate":"2022-10-21"},{"lineNumber":105,"author":{"gitId":"marcusczh"},"content":"        return new RiskAppetiteMatchesInputPredicate(userInput);","lastModifiedDate":"2022-10-21"},{"lineNumber":106,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":64,"marcusczh":43}},{"path":"src/test/java/longtimenosee/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"                false, false, false, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"cowlinn":2,"-":14,"marcusczh":5}},{"path":"src/test/java/longtimenosee/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":31,"marcusczh":8}},{"path":"src/test/java/longtimenosee/logic/commands/ListEventsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.showEventAtIndex;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalEvents.getTypicalAddressBook;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"public class ListEventsCommandTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"    private Model model;","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    @BeforeEach","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"    public void setUp() {","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"        assertCommandSuccess(new ListEventsCommand(), model, ListEventsCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"        showEventAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        assertCommandSuccess(new ListEventsCommand(), model, ListEventsCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":40}},{"path":"src/test/java/longtimenosee/logic/commands/SortCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.logic.commands;","lastModifiedDate":"2022-10-20"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Birthday.BIRTHDAY_COMPARATOR;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Email.EMAIL_COMPARATOR;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Income.INCOME_COMPARATOR;","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Name.NAME_COMPARATOR;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Person.DEFAULT_COMPARATOR;","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.Phone.PHONE_COMPARATOR;","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.model.person.RiskAppetite.RISK_APPETITE_COMPARATOR;","lastModifiedDate":"2022-10-20"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-20"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-20"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"import java.util.List;","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.ModelManager;","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"public class SortCommandTest {","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"    private AddressBook firstAddBook \u003d getTypicalAddressBook();","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    private AddressBook secondAddBook \u003d getTypicalAddressBook();","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e new SortCommand(null));","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"    public void equals() {","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"        SortCommand firstSortCommand \u003d new SortCommand(\"name\");","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"        SortCommand secondSortCommand \u003d new SortCommand(\"birthday\");","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"        SortCommand thirdSortCommand \u003d new SortCommand(\"name\");","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        SortCommand fourthSortCommand \u003d new SortCommand(\"risk appetite\");","lastModifiedDate":"2022-10-20"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(firstSortCommand.equals(firstSortCommand));","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"        // same sorting metric -\u003e returns true","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(firstSortCommand.equals(thirdSortCommand));","lastModifiedDate":"2022-10-20"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"        // different object -\u003e return false","lastModifiedDate":"2022-10-20"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(secondSortCommand.equals(fourthSortCommand));","lastModifiedDate":"2022-10-20"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"        // null -\u003e return false","lastModifiedDate":"2022-10-20"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(firstSortCommand.equals(null));","lastModifiedDate":"2022-10-20"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"        // same sorting metric -\u003e return true","lastModifiedDate":"2022-10-20"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(NAME_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"        secondAddBook.sort(NAME_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(firstAddBook.equals(secondAddBook));","lastModifiedDate":"2022-10-20"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"        // different sorting metric -\u003e return false","lastModifiedDate":"2022-10-20"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(BIRTHDAY_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"        secondAddBook.sort(DEFAULT_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(firstAddBook.equals(secondAddBook));","lastModifiedDate":"2022-10-20"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"    public void testSortName_sorted() {","lastModifiedDate":"2022-10-20"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(NAME_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"        boolean isSorted \u003d true;","lastModifiedDate":"2022-10-20"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"        List\u003cPerson\u003e listToTest \u003d firstAddBook.getPersonList();","lastModifiedDate":"2022-10-20"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"        for (int i \u003d 0; i \u003c listToTest.size() - 1; i++) {","lastModifiedDate":"2022-10-20"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"            Person before \u003d listToTest.get(i);","lastModifiedDate":"2022-10-20"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"            Person after \u003d listToTest.get(i + 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"            if (before.getName().fullName.compareTo(after.getName().fullName) !\u003d -1) {","lastModifiedDate":"2022-10-20"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"                isSorted \u003d false;","lastModifiedDate":"2022-10-20"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"                break;","lastModifiedDate":"2022-10-20"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(isSorted);","lastModifiedDate":"2022-10-20"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":91,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":92,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"    public void testSortPhone_sorted() {","lastModifiedDate":"2022-10-20"},{"lineNumber":94,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(PHONE_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":95,"author":{"gitId":"ReubenChay"},"content":"        boolean isSorted \u003d true;","lastModifiedDate":"2022-10-20"},{"lineNumber":96,"author":{"gitId":"ReubenChay"},"content":"        List\u003cPerson\u003e listToTest \u003d firstAddBook.getPersonList();","lastModifiedDate":"2022-10-20"},{"lineNumber":97,"author":{"gitId":"ReubenChay"},"content":"        for (int i \u003d 0; i \u003c listToTest.size() - 1; i++) {","lastModifiedDate":"2022-10-20"},{"lineNumber":98,"author":{"gitId":"ReubenChay"},"content":"            Person before \u003d listToTest.get(i);","lastModifiedDate":"2022-10-20"},{"lineNumber":99,"author":{"gitId":"ReubenChay"},"content":"            Person after \u003d listToTest.get(i + 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":100,"author":{"gitId":"ReubenChay"},"content":"            if (before.getPhone().value.compareTo(after.getPhone().value) \u003e 0) {","lastModifiedDate":"2022-10-20"},{"lineNumber":101,"author":{"gitId":"ReubenChay"},"content":"                isSorted \u003d false;","lastModifiedDate":"2022-10-20"},{"lineNumber":102,"author":{"gitId":"ReubenChay"},"content":"                break;","lastModifiedDate":"2022-10-20"},{"lineNumber":103,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":104,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":105,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(isSorted);","lastModifiedDate":"2022-10-20"},{"lineNumber":106,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":107,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":108,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":109,"author":{"gitId":"ReubenChay"},"content":"    public void testSortBirthday_sorted() {","lastModifiedDate":"2022-10-20"},{"lineNumber":110,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(BIRTHDAY_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":111,"author":{"gitId":"ReubenChay"},"content":"        boolean isSorted \u003d true;","lastModifiedDate":"2022-10-20"},{"lineNumber":112,"author":{"gitId":"ReubenChay"},"content":"        List\u003cPerson\u003e listToTest \u003d firstAddBook.getPersonList();","lastModifiedDate":"2022-10-20"},{"lineNumber":113,"author":{"gitId":"ReubenChay"},"content":"        for (int i \u003d 0; i \u003c listToTest.size() - 1; i++) {","lastModifiedDate":"2022-10-20"},{"lineNumber":114,"author":{"gitId":"ReubenChay"},"content":"            Person before \u003d listToTest.get(i);","lastModifiedDate":"2022-10-20"},{"lineNumber":115,"author":{"gitId":"ReubenChay"},"content":"            Person after \u003d listToTest.get(i + 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":116,"author":{"gitId":"ReubenChay"},"content":"            if (before.getBirthday().getBirthday().compareTo(after.getBirthday().getBirthday()) \u003e 0) {","lastModifiedDate":"2022-10-20"},{"lineNumber":117,"author":{"gitId":"ReubenChay"},"content":"                isSorted \u003d false;","lastModifiedDate":"2022-10-20"},{"lineNumber":118,"author":{"gitId":"ReubenChay"},"content":"                break;","lastModifiedDate":"2022-10-20"},{"lineNumber":119,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":120,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":121,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(isSorted);","lastModifiedDate":"2022-10-20"},{"lineNumber":122,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":123,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":124,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":125,"author":{"gitId":"ReubenChay"},"content":"    public void testSortIncome_sorted() {","lastModifiedDate":"2022-10-20"},{"lineNumber":126,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(INCOME_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":127,"author":{"gitId":"ReubenChay"},"content":"        boolean isSorted \u003d true;","lastModifiedDate":"2022-10-20"},{"lineNumber":128,"author":{"gitId":"ReubenChay"},"content":"        List\u003cPerson\u003e listToTest \u003d firstAddBook.getPersonList();","lastModifiedDate":"2022-10-20"},{"lineNumber":129,"author":{"gitId":"ReubenChay"},"content":"        for (int i \u003d 0; i \u003c listToTest.size() - 1; i++) {","lastModifiedDate":"2022-10-20"},{"lineNumber":130,"author":{"gitId":"ReubenChay"},"content":"            Person before \u003d listToTest.get(i);","lastModifiedDate":"2022-10-20"},{"lineNumber":131,"author":{"gitId":"ReubenChay"},"content":"            Person after \u003d listToTest.get(i + 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":132,"author":{"gitId":"ReubenChay"},"content":"            if (Double.compare(before.getIncome().getIncome(), after.getIncome().getIncome()) !\u003d -1) {","lastModifiedDate":"2022-10-20"},{"lineNumber":133,"author":{"gitId":"ReubenChay"},"content":"                isSorted \u003d false;","lastModifiedDate":"2022-10-20"},{"lineNumber":134,"author":{"gitId":"ReubenChay"},"content":"                break;","lastModifiedDate":"2022-10-20"},{"lineNumber":135,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":136,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":137,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(isSorted);","lastModifiedDate":"2022-10-20"},{"lineNumber":138,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":139,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":140,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":141,"author":{"gitId":"ReubenChay"},"content":"    public void testSortRiskAppetite_sorted() {","lastModifiedDate":"2022-10-20"},{"lineNumber":142,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(RISK_APPETITE_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":143,"author":{"gitId":"ReubenChay"},"content":"        boolean isSorted \u003d true;","lastModifiedDate":"2022-10-20"},{"lineNumber":144,"author":{"gitId":"ReubenChay"},"content":"        List\u003cPerson\u003e listToTest \u003d firstAddBook.getPersonList();","lastModifiedDate":"2022-10-20"},{"lineNumber":145,"author":{"gitId":"ReubenChay"},"content":"        for (int i \u003d 0; i \u003c listToTest.size() - 1; i++) {","lastModifiedDate":"2022-10-20"},{"lineNumber":146,"author":{"gitId":"ReubenChay"},"content":"            Person before \u003d listToTest.get(i);","lastModifiedDate":"2022-10-20"},{"lineNumber":147,"author":{"gitId":"ReubenChay"},"content":"            Person after \u003d listToTest.get(i + 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":148,"author":{"gitId":"ReubenChay"},"content":"            if (before.getRiskAppetite().toString().equals(\"M\")) {","lastModifiedDate":"2022-10-20"},{"lineNumber":149,"author":{"gitId":"ReubenChay"},"content":"                if (after.getRiskAppetite().toString().equals(\"L\")) {","lastModifiedDate":"2022-10-20"},{"lineNumber":150,"author":{"gitId":"ReubenChay"},"content":"                    isSorted \u003d false;","lastModifiedDate":"2022-10-20"},{"lineNumber":151,"author":{"gitId":"ReubenChay"},"content":"                    break;","lastModifiedDate":"2022-10-20"},{"lineNumber":152,"author":{"gitId":"ReubenChay"},"content":"                }","lastModifiedDate":"2022-10-20"},{"lineNumber":153,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":154,"author":{"gitId":"ReubenChay"},"content":"            if (before.getRiskAppetite().toString().equals(\"H\")) {","lastModifiedDate":"2022-10-20"},{"lineNumber":155,"author":{"gitId":"ReubenChay"},"content":"                if ((after.getRiskAppetite().toString().equals(\"M\"))","lastModifiedDate":"2022-10-20"},{"lineNumber":156,"author":{"gitId":"ReubenChay"},"content":"                        || after.getRiskAppetite().toString().equals(\"L\")) {","lastModifiedDate":"2022-10-20"},{"lineNumber":157,"author":{"gitId":"ReubenChay"},"content":"                    isSorted \u003d false;","lastModifiedDate":"2022-10-20"},{"lineNumber":158,"author":{"gitId":"ReubenChay"},"content":"                    break;","lastModifiedDate":"2022-10-20"},{"lineNumber":159,"author":{"gitId":"ReubenChay"},"content":"                }","lastModifiedDate":"2022-10-20"},{"lineNumber":160,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":161,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":162,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(isSorted);","lastModifiedDate":"2022-10-20"},{"lineNumber":163,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":164,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":165,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":166,"author":{"gitId":"ReubenChay"},"content":"    public void testEmailSort_notSorted() {","lastModifiedDate":"2022-10-20"},{"lineNumber":167,"author":{"gitId":"ReubenChay"},"content":"        firstAddBook.sort(EMAIL_COMPARATOR);","lastModifiedDate":"2022-10-20"},{"lineNumber":168,"author":{"gitId":"ReubenChay"},"content":"        boolean isSorted \u003d true;","lastModifiedDate":"2022-10-20"},{"lineNumber":169,"author":{"gitId":"ReubenChay"},"content":"        // testing if sorted by name order","lastModifiedDate":"2022-10-20"},{"lineNumber":170,"author":{"gitId":"ReubenChay"},"content":"        List\u003cPerson\u003e listToTest \u003d firstAddBook.getPersonList();","lastModifiedDate":"2022-10-20"},{"lineNumber":171,"author":{"gitId":"ReubenChay"},"content":"        for (int i \u003d 0; i \u003c listToTest.size() - 1; i++) {","lastModifiedDate":"2022-10-20"},{"lineNumber":172,"author":{"gitId":"ReubenChay"},"content":"            Person before \u003d listToTest.get(i);","lastModifiedDate":"2022-10-20"},{"lineNumber":173,"author":{"gitId":"ReubenChay"},"content":"            Person after \u003d listToTest.get(i + 1);","lastModifiedDate":"2022-10-20"},{"lineNumber":174,"author":{"gitId":"ReubenChay"},"content":"            if (before.getName().fullName.compareTo(after.getName().fullName) !\u003d -1) {","lastModifiedDate":"2022-10-20"},{"lineNumber":175,"author":{"gitId":"ReubenChay"},"content":"                isSorted \u003d false;","lastModifiedDate":"2022-10-20"},{"lineNumber":176,"author":{"gitId":"ReubenChay"},"content":"                break;","lastModifiedDate":"2022-10-20"},{"lineNumber":177,"author":{"gitId":"ReubenChay"},"content":"            }","lastModifiedDate":"2022-10-20"},{"lineNumber":178,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":179,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(isSorted);","lastModifiedDate":"2022-10-20"},{"lineNumber":180,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":181,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":182,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":183,"author":{"gitId":"ReubenChay"},"content":"    public void testInvalidCommandInput() {","lastModifiedDate":"2022-10-20"},{"lineNumber":184,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(CommandException.class, () -\u003e new SortCommand(\"aaa\").execute(model));","lastModifiedDate":"2022-10-20"},{"lineNumber":185,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":186,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":187,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-10-20"}],"authorContributionMap":{"ReubenChay":187}},{"path":"src/test/java/longtimenosee/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INCOME_DESC_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INCOME_DESC_BOB;","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.RISK_APPETITE_DESC_AMY;","lastModifiedDate":"2022-10-13"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.RISK_APPETITE_DESC_BOB;","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-10-05"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-05"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.AddCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB","lastModifiedDate":"2022-10-13"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"                + RISK_APPETITE_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"cowlinn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"                + RISK_APPETITE_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB","lastModifiedDate":"2022-10-13"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"                + RISK_APPETITE_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB","lastModifiedDate":"2022-10-13"},{"lineNumber":74,"author":{"gitId":"cowlinn"},"content":"                + RISK_APPETITE_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB","lastModifiedDate":"2022-10-13"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"                + RISK_APPETITE_DESC_BOB, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB","lastModifiedDate":"2022-10-13"},{"lineNumber":86,"author":{"gitId":"cowlinn"},"content":"                + RISK_APPETITE_DESC_BOB, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2022-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":93,"author":{"gitId":"cowlinn"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2022-10-13"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"                       + BIRTHDAY_DESC_AMY + INCOME_DESC_AMY + RISK_APPETITE_DESC_AMY,","lastModifiedDate":"2022-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"cowlinn"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB + RISK_APPETITE_DESC_BOB,","lastModifiedDate":"2022-10-13"},{"lineNumber":128,"author":{"gitId":"cowlinn"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":132,"author":{"gitId":"cowlinn"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB + RISK_APPETITE_DESC_BOB,","lastModifiedDate":"2022-10-13"},{"lineNumber":133,"author":{"gitId":"cowlinn"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"cowlinn"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB + RISK_APPETITE_DESC_BOB,","lastModifiedDate":"2022-10-13"},{"lineNumber":138,"author":{"gitId":"cowlinn"},"content":"                Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB + RISK_APPETITE_DESC_BOB,","lastModifiedDate":"2022-10-13"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"                Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":147,"author":{"gitId":"cowlinn"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB + RISK_APPETITE_DESC_BOB,","lastModifiedDate":"2022-10-13"},{"lineNumber":148,"author":{"gitId":"cowlinn"},"content":"                Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"cowlinn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2022-10-13"},{"lineNumber":152,"author":{"gitId":"cowlinn"},"content":"                        + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB + RISK_APPETITE_DESC_BOB,","lastModifiedDate":"2022-10-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":157,"author":{"gitId":"cowlinn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + INCOME_DESC_BOB","lastModifiedDate":"2022-10-13"},{"lineNumber":158,"author":{"gitId":"cowlinn"},"content":"                        + RISK_APPETITE_DESC_BOB,","lastModifiedDate":"2022-10-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"cowlinn":34,"-":89,"marcusczh":38}},{"path":"src/test/java/longtimenosee/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.AddCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ClearCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.DeleteCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"// import longtimenosee.logic.commands.EditCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"// import longtimenosee.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ExitCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.HelpCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.ListCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"// import longtimenosee.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"    /*","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2022-10-05"},{"lineNumber":78,"author":{"gitId":"marcusczh"},"content":"        assertEquals(new FindCommand(List.of(new NameContainsKeywordsPredicate(keywords))), command);","lastModifiedDate":"2022-10-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"ReubenChay":5,"-":79,"marcusczh":19}},{"path":"src/test/java/longtimenosee/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"-":149,"marcusczh":1}},{"path":"src/test/java/longtimenosee/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.Command;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"-":34,"marcusczh":4}},{"path":"src/test/java/longtimenosee/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.DeleteCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"-":26,"marcusczh":6}},{"path":"src/test/java/longtimenosee/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-05"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-05"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-05"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"cowlinn"},"content":"        // invalid prefix being parsed as preamble, changed from i since i is now valid","lastModifiedDate":"2022-10-13"},{"lineNumber":79,"author":{"gitId":"cowlinn"},"content":"        assertParseFailure(parser, \"1 la/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"cowlinn":2,"-":169,"marcusczh":40}},{"path":"src/test/java/longtimenosee/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.AddressContainsInputPredicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.BirthdayMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.EmailMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.IncomeMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PhoneContainsNumberPredicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PolicyCompanyMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PolicyCoverageMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.PolicyTitleContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.RiskAppetiteMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.TagContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Company;","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Title;","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"    public void parse_validNameArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"))));","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindCommand);","lastModifiedDate":"2022-10-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" n/ Alice  Bob  \", expectedFindCommand);","lastModifiedDate":"2022-10-05"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"        // alphanumeric input","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"        FindCommand alphanumericExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"123\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" n/ Alice 123 \", alphanumericExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidNameArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" n/\", Name.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"        // EP: non-alphanumeric input: symbols","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" n/!\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marcusczh"},"content":"    public void parse_validPhoneArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"marcusczh"},"content":"        // EP: valid numeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"marcusczh"},"content":"        // 8 digit number","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PhoneContainsNumberPredicate(\"87654321\")));","lastModifiedDate":"2022-10-29"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" p/87654321\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marcusczh"},"content":"        // 10 digit number","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marcusczh"},"content":"        FindCommand secondExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PhoneContainsNumberPredicate(\"8765432112\")));","lastModifiedDate":"2022-10-29"},{"lineNumber":81,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" p/8765432112\", secondExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marcusczh"},"content":"        // 3 digit number","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"marcusczh"},"content":"        FindCommand thirdExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PhoneContainsNumberPredicate(\"123\")));","lastModifiedDate":"2022-10-29"},{"lineNumber":86,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" p/123\", thirdExpectedFindCommand); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":87,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidPhoneArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marcusczh"},"content":"        // EP: less than minimum number of digits: 2 digit number","lastModifiedDate":"2022-11-01"},{"lineNumber":92,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" p/12\", Phone.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":93,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":95,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" p/\", Phone.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":96,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":97,"author":{"gitId":"marcusczh"},"content":"        // EP: non-integer input","lastModifiedDate":"2022-11-01"},{"lineNumber":98,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" p/1.1\", Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" p/abc\", Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":103,"author":{"gitId":"marcusczh"},"content":"    public void parse_validAddressArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":104,"author":{"gitId":"marcusczh"},"content":"        // EP: alphabet input","lastModifiedDate":"2022-11-01"},{"lineNumber":105,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":106,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new AddressContainsInputPredicate(\"Bedok\")));","lastModifiedDate":"2022-10-29"},{"lineNumber":107,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" a/Bedok\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":108,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":109,"author":{"gitId":"marcusczh"},"content":"        // EP: numeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":110,"author":{"gitId":"marcusczh"},"content":"        FindCommand secondExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":111,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new AddressContainsInputPredicate(\"55\")));","lastModifiedDate":"2022-10-29"},{"lineNumber":112,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" a/55\", secondExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":113,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":114,"author":{"gitId":"marcusczh"},"content":"        // EP: symbol input","lastModifiedDate":"2022-11-01"},{"lineNumber":115,"author":{"gitId":"marcusczh"},"content":"        FindCommand thirdExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":116,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new AddressContainsInputPredicate(\"#01\")));","lastModifiedDate":"2022-10-29"},{"lineNumber":117,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" a/#01\", thirdExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":118,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":119,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":120,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":121,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidAddressArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":122,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":123,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" a/\", Address.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":124,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":125,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":126,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":127,"author":{"gitId":"marcusczh"},"content":"    public void parse_validEmailArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":128,"author":{"gitId":"marcusczh"},"content":"        // EP: normal valid input","lastModifiedDate":"2022-11-01"},{"lineNumber":129,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":130,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new EmailMatchesInputPredicate(\"Alice@example.com\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":131,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" e/Alice@example.com\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":132,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":133,"author":{"gitId":"marcusczh"},"content":"        // EP: multiple domains","lastModifiedDate":"2022-11-01"},{"lineNumber":134,"author":{"gitId":"marcusczh"},"content":"        FindCommand secondExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":135,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new EmailMatchesInputPredicate(\"Bob@email.co.go\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":136,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" e/Bob@email.co.go\", secondExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":137,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":138,"author":{"gitId":"marcusczh"},"content":"        // EP: alphanumeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":139,"author":{"gitId":"marcusczh"},"content":"        FindCommand thirdExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":140,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new EmailMatchesInputPredicate(\"Carl_12@example1.co\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":141,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" e/Carl_12@example1.co\", thirdExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":142,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":143,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":144,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":145,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidEmailArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":146,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":147,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" e/\", Email.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":148,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":149,"author":{"gitId":"marcusczh"},"content":"        // EP: missing local part input","lastModifiedDate":"2022-11-01"},{"lineNumber":150,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" e/@example.com\", Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":151,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":152,"author":{"gitId":"marcusczh"},"content":"        // EP: missing domain input","lastModifiedDate":"2022-11-01"},{"lineNumber":153,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" e/alice@\", Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":154,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":155,"author":{"gitId":"marcusczh"},"content":"        // EP: end with period","lastModifiedDate":"2022-11-01"},{"lineNumber":156,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" e/a@example.\", Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":157,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":158,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":159,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":160,"author":{"gitId":"marcusczh"},"content":"    public void parse_validTagArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":161,"author":{"gitId":"marcusczh"},"content":"        // EP: single tag","lastModifiedDate":"2022-11-01"},{"lineNumber":162,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":163,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new TagContainsKeywordsPredicate(List.of(\"friends\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":164,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" t/friends\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":165,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":166,"author":{"gitId":"marcusczh"},"content":"        // EP: multiple tags","lastModifiedDate":"2022-11-01"},{"lineNumber":167,"author":{"gitId":"marcusczh"},"content":"        FindCommand secondExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":168,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new TagContainsKeywordsPredicate(List.of(\"friends\", \"family\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":169,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" t/friends t/family\", secondExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":170,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":171,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":172,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":173,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidTagArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":174,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":175,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" t/\", Tag.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":176,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":177,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":178,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":179,"author":{"gitId":"marcusczh"},"content":"    public void parse_validBirthdayArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":180,"author":{"gitId":"marcusczh"},"content":"        // EP: valid date input","lastModifiedDate":"2022-11-01"},{"lineNumber":181,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":182,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new BirthdayMatchesInputPredicate(\"2019-05-12\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":183,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" b/2019-05-12\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":184,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":185,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":186,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":187,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidBirthdayArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":188,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":189,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" b/\", Birthday.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":190,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":191,"author":{"gitId":"marcusczh"},"content":"        // EP: numeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":192,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" b/123\", Birthday.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":193,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":194,"author":{"gitId":"marcusczh"},"content":"        // EP: alphabet input","lastModifiedDate":"2022-11-01"},{"lineNumber":195,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" b/abc\", Birthday.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":196,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":197,"author":{"gitId":"marcusczh"},"content":"        // EP: incorrect date format","lastModifiedDate":"2022-11-01"},{"lineNumber":198,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" b/1980-123-20\", Birthday.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":199,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":200,"author":{"gitId":"marcusczh"},"content":"        // EP: valid future date","lastModifiedDate":"2022-11-01"},{"lineNumber":201,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" b/3000-12-12\", Birthday.MESSAGE_DATE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":202,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":203,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":204,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":205,"author":{"gitId":"marcusczh"},"content":"    public void parse_validIncomeArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":206,"author":{"gitId":"marcusczh"},"content":"        // EP: valid numeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":207,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":208,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new IncomeMatchesInputPredicate(\"2000\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":209,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" i/2000\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":210,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":211,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":212,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":213,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidIncomeArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":214,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":215,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" i/\", Income.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":216,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":217,"author":{"gitId":"marcusczh"},"content":"        // EP: alphabet input","lastModifiedDate":"2022-11-01"},{"lineNumber":218,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" i/abc\", Income.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":219,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":220,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":221,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":222,"author":{"gitId":"marcusczh"},"content":"    public void parse_validRiskAppetiteArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":223,"author":{"gitId":"marcusczh"},"content":"        // EP: high risk appetite","lastModifiedDate":"2022-11-01"},{"lineNumber":224,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":225,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new RiskAppetiteMatchesInputPredicate(\"H\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":226,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ra/H\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":227,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":228,"author":{"gitId":"marcusczh"},"content":"        // EP: medium risk appetite","lastModifiedDate":"2022-11-01"},{"lineNumber":229,"author":{"gitId":"marcusczh"},"content":"        FindCommand secondExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":230,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new RiskAppetiteMatchesInputPredicate(\"M\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":231,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ra/M\", secondExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":232,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":233,"author":{"gitId":"marcusczh"},"content":"        // EP: low risk appetite","lastModifiedDate":"2022-11-01"},{"lineNumber":234,"author":{"gitId":"marcusczh"},"content":"        FindCommand thirdExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":235,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new RiskAppetiteMatchesInputPredicate(\"L\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":236,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ra/L\", thirdExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":237,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":238,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":239,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":240,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidRiskAppetiteArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":241,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":242,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ra/\", RiskAppetite.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":243,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":244,"author":{"gitId":"marcusczh"},"content":"        // EP: invalid inputs, not one of the H,M,L options","lastModifiedDate":"2022-11-01"},{"lineNumber":245,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ra/abc\", RiskAppetite.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":246,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ra/HIGH\", RiskAppetite.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":247,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ra/High\", RiskAppetite.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":248,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":249,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":250,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":251,"author":{"gitId":"marcusczh"},"content":"    public void parse_validPolicyTitleArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":252,"author":{"gitId":"marcusczh"},"content":"        // EP: valid title input","lastModifiedDate":"2022-11-01"},{"lineNumber":253,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":254,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PolicyTitleContainsKeywordsPredicate(Arrays.asList(\"Health\", \"Plan\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":255,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ti/Health Plan\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":256,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":257,"author":{"gitId":"marcusczh"},"content":"        // EP: valid title input with whitespaces between keywords","lastModifiedDate":"2022-11-01"},{"lineNumber":258,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ti/ Health  Plan  \", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":259,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":260,"author":{"gitId":"marcusczh"},"content":"        // EP: valid alphanumeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":261,"author":{"gitId":"marcusczh"},"content":"        FindCommand alphanumericExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":262,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PolicyTitleContainsKeywordsPredicate(Arrays.asList(\"Life\", \"101\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":263,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ti/ Life 101 \", alphanumericExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":264,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":265,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":266,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":267,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidPolicyTitleArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":268,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":269,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ti/\", Title.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":270,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":271,"author":{"gitId":"marcusczh"},"content":"        // EP: non-alphanumeric input: symbols","lastModifiedDate":"2022-11-01"},{"lineNumber":272,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ti/!\", Title.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":273,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":274,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":275,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":276,"author":{"gitId":"marcusczh"},"content":"    public void parse_validPolicyCoverageArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":277,"author":{"gitId":"marcusczh"},"content":"        // EP: single coverage","lastModifiedDate":"2022-11-01"},{"lineNumber":278,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":279,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PolicyCoverageMatchesInputPredicate(List.of(\"LIFE\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":280,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cov/LIFE\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":281,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":282,"author":{"gitId":"marcusczh"},"content":"        // EP: multiple coverages","lastModifiedDate":"2022-11-01"},{"lineNumber":283,"author":{"gitId":"marcusczh"},"content":"        FindCommand secondExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":284,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PolicyCoverageMatchesInputPredicate(List.of(\"HEALTH\", \"TRAVEL\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":285,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cov/HEALTH cov/TRAVEL\", secondExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":286,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":287,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":288,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":289,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidPolicyCoverageArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":290,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":291,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/\", Coverage.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":292,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":293,"author":{"gitId":"marcusczh"},"content":"        // EP: invalid input, not one of the valid coverage types","lastModifiedDate":"2022-11-01"},{"lineNumber":294,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/life\", Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":295,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/L\", Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":296,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/123\", Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":297,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":298,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":299,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":300,"author":{"gitId":"marcusczh"},"content":"    public void parse_validPolicyCompanyArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":301,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input, one of the valid company options","lastModifiedDate":"2022-11-01"},{"lineNumber":302,"author":{"gitId":"marcusczh"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":303,"author":{"gitId":"marcusczh"},"content":"                new FindCommand(List.of(new PolicyCompanyMatchesInputPredicate(\"AIA\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":304,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cmp/AIA\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":305,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":306,"author":{"gitId":"marcusczh"},"content":"        // EP: additional white spaces around the company option","lastModifiedDate":"2022-11-01"},{"lineNumber":307,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cmp/ AIA\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":308,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":309,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":310,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":311,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidPolicyCompanyArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":312,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":313,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/\", Company.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":314,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":315,"author":{"gitId":"marcusczh"},"content":"        // EP: invalid input, not one of the valid company options","lastModifiedDate":"2022-11-01"},{"lineNumber":316,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/aia\", Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":317,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/Aviva\", Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":318,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/123\", Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":319,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"-":24,"marcusczh":296}},{"path":"src/test/java/longtimenosee/logic/parser/FindEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindEventCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.Date;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.Description;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.predicate.DescriptionContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.predicate.EventDateMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.event.predicate.NameInEventContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"public class FindEventCommandParserTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"    private final FindEventCommandParser parser \u003d new FindEventCommandParser();","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: empty arguments","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \"   \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"                FindEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    public void parse_validDescriptionArgs_returnsFindEventCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input no leading and trailing whitespaces","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"        FindEventCommand expectedFindEventCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                new FindEventCommand(List.of(new DescriptionContainsKeywordsPredicate(\"meeting to discuss plans\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" desc/meeting to discuss plans\", expectedFindEventCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input with whitespaces at edges","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" desc/ meeting to discuss plans  \", expectedFindEventCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        // EP: valid alphanumeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        FindEventCommand alphanumericExpectedFindEventCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"                new FindEventCommand(List.of(new DescriptionContainsKeywordsPredicate(\"5th meeting\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" desc/ 5th meeting \", alphanumericExpectedFindEventCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidDescriptionArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" desc/\", Description.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        // EP: non-alphanumeric input: symbols","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" desc/!\", Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"    public void parse_validDateArgs_returnsFindEventCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"        FindEventCommand expectedFindEventCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"                new FindEventCommand(List.of(new EventDateMatchesInputPredicate(\"2019-05-12\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" date/2019-05-12\", expectedFindEventCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidDateArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" date/\", Date.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"        // EP: non date input","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" date/123\", Date.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"marcusczh"},"content":"        // EP: non numeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" date/abc\", Date.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"marcusczh"},"content":"        // EP: improper date format","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" date/1980-123-20\", Date.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marcusczh"},"content":"    public void parse_validNameInEventArgs_returnsFindEventCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input no leading and trailing whitespaces","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"marcusczh"},"content":"        FindEventCommand expectedFindEventCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"marcusczh"},"content":"                new FindEventCommand(List.of(new NameInEventContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindEventCommand);","lastModifiedDate":"2022-10-24"},{"lineNumber":84,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input with multiple whitespaces between keywords","lastModifiedDate":"2022-11-01"},{"lineNumber":86,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" n/ Alice  Bob  \", expectedFindEventCommand);","lastModifiedDate":"2022-10-24"},{"lineNumber":87,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marcusczh"},"content":"        // EP: valid alphanumeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":89,"author":{"gitId":"marcusczh"},"content":"        FindEventCommand alphanumericExpectedFindEventCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"marcusczh"},"content":"                new FindEventCommand(List.of(new NameInEventContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"123\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" n/ Alice 123 \", alphanumericExpectedFindEventCommand);","lastModifiedDate":"2022-10-24"},{"lineNumber":92,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":93,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidNameArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":97,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" n/\", Name.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":98,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"marcusczh"},"content":"        // EP: non-alphanumeric input: symbols","lastModifiedDate":"2022-11-01"},{"lineNumber":100,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" n/!\", Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":101,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":102,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":102}},{"path":"src/test/java/longtimenosee/logic/parser/FindPolicyCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.FindPolicyCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Company;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Coverage;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Title;","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.predicate.CompanyMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.predicate.CoverageMatchesInputPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.predicate.TitleContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"public class FindPolicyCommandParserTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"    private final FindPolicyCommandParser parser \u003d new FindPolicyCommandParser();","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: empty arguments","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \"  \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"                FindPolicyCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    public void parse_validTitleArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        // EP: valid title input","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"        FindPolicyCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"                new FindPolicyCommand(List.of(new TitleContainsKeywordsPredicate(Arrays.asList(\"Health\", \"Plan\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ti/Health Plan\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        // EP: valid title input with multiple whitespaces between keywords","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ti/ Health  Plan  \", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        // EP: alphanumeric input","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        FindPolicyCommand alphanumericExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"                new FindPolicyCommand(List.of(new TitleContainsKeywordsPredicate(Arrays.asList(\"Life\", \"101\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" ti/ Life 101 \", alphanumericExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidTitleArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ti/\", Title.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        // EP: non-alphanumeric input: symbols","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" ti/!\", Title.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"    public void parse_validCoverageArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"        // EP: single tag","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"        FindPolicyCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"                new FindPolicyCommand(List.of(new CoverageMatchesInputPredicate(List.of(\"LIFE\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cov/LIFE\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"        // EP: multiple tags","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"        FindPolicyCommand secondExpectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"                new FindPolicyCommand(List.of(new CoverageMatchesInputPredicate(List.of(\"HEALTH\", \"TRAVEL\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cov/HEALTH cov/TRAVEL\", secondExpectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidCoverageArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/\", Coverage.MESSAGE_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"marcusczh"},"content":"        // EP: invalid input","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/life\", Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/L\", Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cov/123\", Coverage.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marcusczh"},"content":"    public void parse_validCompanyArgs_returnsFindCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"marcusczh"},"content":"        FindPolicyCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marcusczh"},"content":"                new FindPolicyCommand(List.of(new CompanyMatchesInputPredicate(\"AIA\")));","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cmp/AIA\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":86,"author":{"gitId":"marcusczh"},"content":"        // EP: valid input with additional white spaces","lastModifiedDate":"2022-11-01"},{"lineNumber":87,"author":{"gitId":"marcusczh"},"content":"        assertParseSuccess(parser, \" cmp/ AIA\", expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marcusczh"},"content":"    public void parse_invalidCompanyArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"marcusczh"},"content":"        // EP: empty input","lastModifiedDate":"2022-11-01"},{"lineNumber":93,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/\", Company.MESSAGE_FORMAT_CONSTRAINTS); // Boundary value","lastModifiedDate":"2022-11-01"},{"lineNumber":94,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"marcusczh"},"content":"        // EP: invalid input","lastModifiedDate":"2022-11-01"},{"lineNumber":96,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/aia\", Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":97,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/Aviva\", Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"marcusczh"},"content":"        assertParseFailure(parser, \" cmp/123\", Company.MESSAGE_FORMAT_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marcusczh":100}},{"path":"src/test/java/longtimenosee/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.logic.parser;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"-":186,"marcusczh":10}},{"path":"src/test/java/longtimenosee/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-10-19"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.policy.Policy;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"Ssatu"},"content":"        List\u003cPolicy\u003e newPolicies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newPolicies);","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"Ssatu"},"content":"        private final ObservableList\u003cPolicy\u003e policies \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cPolicy\u003e policies) {","lastModifiedDate":"2022-10-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"Ssatu"},"content":"            this.policies.setAll(policies);","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":110,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"Ssatu"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"Ssatu"},"content":"        public ObservableList\u003cPolicy\u003e getPolicyList() {","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"Ssatu"},"content":"            return policies;","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"Ssatu"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"        @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2022-10-19"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"            return events;","lastModifiedDate":"2022-10-19"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"ReubenChay":1,"Ssatu":8,"cowlinn":11,"-":92,"marcusczh":10}},{"path":"src/test/java/longtimenosee/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.predicate.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.AddressBookBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"-":124,"marcusczh":8}},{"path":"src/test/java/longtimenosee/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"-":19,"marcusczh":2}},{"path":"src/test/java/longtimenosee/model/event/DateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"public class DateTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Date(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"        String invalidDate \u003d \"\";","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    public void isValidDate() {","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"        // null values","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e Date.isValidFormat(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e Date.isValidRange(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e Date.isValidFormat(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"     * Tests if months/days are in a valid year, given that it is in the right format","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"    public void isValidRange() {","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidRange(\"2020-13-20\")); // valid date, invalid month","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidRange(\"2020-00-20\")); // valid date, invalid month","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidRange(\"2020-10-00\")); // valid month, invalid date","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidRange(\"2020-10-50\")); // valid month, invalid date","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidRange(\"2020-04-31\")); // April has no 31st","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidRange(\"2020-12-12\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidRange(\"2020-04-30\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidRange(\"2020-01-01\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"     * Tests if years are given between 1900 and 2100","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"    public void isValidYear() {","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidYear(\"1800-10-10\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidYear(\"1899-12-12\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidYear(\"2101-01-01\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidYear(\"2200-12-31\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidYear(\"1901-05-05\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidYear(\"2022-11-11\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidYear(\"2099-12-31\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"     * Tests if input String is a valid date format ie. YYYY-MM-DD","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"    public void isValidFormat() {","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"ABCD-GG-AA\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"2020-111-10\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"2020-11-005\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"12-12-12\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"121212-11-11\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"09-09-2020\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"03-2020-03\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"2020/10/10\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Date.isValidFormat(\"2020 10 10\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidFormat(\"2020-10-10\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Date.isValidFormat(\"2022-01-01\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":83}},{"path":"src/test/java/longtimenosee/model/event/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"public class DescriptionTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_invalidDescription_throwsIllegalArgumentException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"        String invalidDescription \u003d \"\";","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    public void isValidAddress() {","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"        // null address","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"        // invalid addresses","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Description.isValidDescription(\"++--\")); // non-alphanumeric characters","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Description.isValidDescription(\"  \")); // 2 spaces","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"        // valid addresses","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Description.isValidDescription(\"Lunch with Alice Pauline\")); // normal description","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Description.isValidDescription(\"Lunch and Dinner and \"","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"                + \"Breakfast at 123 Street with Alice\")); // long address","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Description.isValidDescription((\"ABC 123 DEF 456\"))); // alphanumeric","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":38}},{"path":"src/test/java/longtimenosee/model/event/DurationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"public class DurationTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Duration(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"        String invalidDuration \u003d \"\";","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    public void isValidDuration() {","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"        // null times","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e Duration.isValidStartAndEnd(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        assertThrows(NullPointerException.class, () -\u003e Duration.isValidTime(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"     * Tests if start time is before end time (in format HH:mm__HH:mm)","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"    public void isValidStartandEnd() {","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidStartAndEnd(\"13:00__12:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidStartAndEnd(\"13:01__13:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidStartAndEnd(\"13:00__13:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidStartAndEnd(\"23:00__01:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Duration.isValidStartAndEnd(\"13:00__13:01\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Duration.isValidStartAndEnd(\"20:00__21:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"     * Tests if input given is in HH:mm format","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"    public void isValidTime() {","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"        assertFalse((Duration.isValidTime(\"25:00\")));","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidTime(\"-10:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidTime(\"AB:CC\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidTime(\"20-00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(Duration.isValidTime(\"20 00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Duration.isValidTime(\"20:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Duration.isValidTime(\"01:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(Duration.isValidTime(\"00:00\"));","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"     * Tests if 2 different events have overlapping times, given that both are in the right format","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"    public void isOverlap() {","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"        Duration d1 \u003d new Duration(\"09:00__17:00\");","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"        Duration d2 \u003d new Duration(\"12:00__13:00\");","lastModifiedDate":"2022-11-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"        Duration d3 \u003d new Duration(\"09:00__09:01\");","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"        Duration d4 \u003d new Duration(\"19:00__21:00\");","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"        Duration d5 \u003d new Duration(\"15:00__17:00\");","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"        Duration d6 \u003d new Duration(\"20:00__21:00\");","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"        Duration d7 \u003d new Duration(\"21:00__22:00\");","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(d1.isOverlap(d6));","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(d6.isOverlap(d1));","lastModifiedDate":"2022-11-01"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(d2.isOverlap(d5));","lastModifiedDate":"2022-11-01"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(d5.isOverlap(d2));","lastModifiedDate":"2022-11-01"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(d4.isOverlap(d1));","lastModifiedDate":"2022-11-01"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(d6.isOverlap(d7)); // 8-9pm and 9-10pm considered overlap, stated in UG","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(d1.isOverlap(d2));","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(d2.isOverlap(d1));","lastModifiedDate":"2022-11-01"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(d1.isOverlap(d3));","lastModifiedDate":"2022-11-01"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(d3.isOverlap(d1));","lastModifiedDate":"2022-11-01"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":89}},{"path":"src/test/java/longtimenosee/model/event/EventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.model.event;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalEvents.WITH_ALICE;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalEvents.WITH_BENSON;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import static longtimenosee.testutil.TypicalEvents.WITH_ELLE;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.testutil.EventBuilder;","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"public class EventTest {","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"    public void isSameEvent() {","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(WITH_ALICE.isSameEvent(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(WITH_ALICE.isSameEvent(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"        // not same object -\u003e return false","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(WITH_ALICE.isSameEvent(WITH_BENSON));","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"        // same object except duration different","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"        Event editedAlice \u003d new EventBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-12\")","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Lunch with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"12:00__13:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.isSameEvent(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"        // same object except different name","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"        editedAlice \u003d new EventBuilder().withName(\"Alice Tan\")","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-12\")","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Lunch with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"10:00__12:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.isSameEvent(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"        // same object except different description","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        editedAlice \u003d new EventBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-12\")","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Dinner with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"10:00__12:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.isSameEvent(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"        // same object, different date","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"        editedAlice \u003d new EventBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-13\")","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Lunch with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"10:00__12:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.isSameEvent(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"    @Test","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"    public void equals() {","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"        Event aliceCopy \u003d new EventBuilder(WITH_ALICE).build();","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(WITH_ALICE.equals(aliceCopy));","lastModifiedDate":"2022-11-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"        assertTrue(WITH_ALICE.equals(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(WITH_ALICE.equals(null));","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(WITH_ALICE.equals(5));","lastModifiedDate":"2022-11-01"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-11-01"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(WITH_ALICE.equals(WITH_ELLE));","lastModifiedDate":"2022-11-01"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"        // same object except duration different","lastModifiedDate":"2022-11-01"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"        Event editedAlice \u003d new EventBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-12\")","lastModifiedDate":"2022-11-01"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Lunch with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"12:00__13:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":88,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.equals(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"        // same object except different name","lastModifiedDate":"2022-11-01"},{"lineNumber":91,"author":{"gitId":"ReubenChay"},"content":"        editedAlice \u003d new EventBuilder().withName(\"Alice Tan\")","lastModifiedDate":"2022-11-01"},{"lineNumber":92,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-12\")","lastModifiedDate":"2022-11-01"},{"lineNumber":93,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Lunch with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":94,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"10:00__12:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":95,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":96,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.equals(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":97,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":98,"author":{"gitId":"ReubenChay"},"content":"        // same object except different description","lastModifiedDate":"2022-11-01"},{"lineNumber":99,"author":{"gitId":"ReubenChay"},"content":"        editedAlice \u003d new EventBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":100,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-12\")","lastModifiedDate":"2022-11-01"},{"lineNumber":101,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Dinner with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":102,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"10:00__12:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":103,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":104,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.equals(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":105,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":106,"author":{"gitId":"ReubenChay"},"content":"        // same object, different date","lastModifiedDate":"2022-11-01"},{"lineNumber":107,"author":{"gitId":"ReubenChay"},"content":"        editedAlice \u003d new EventBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":108,"author":{"gitId":"ReubenChay"},"content":"                .withDate(\"2022-12-13\")","lastModifiedDate":"2022-11-01"},{"lineNumber":109,"author":{"gitId":"ReubenChay"},"content":"                .withDescription(\"Lunch with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":110,"author":{"gitId":"ReubenChay"},"content":"                .withDuration(\"10:00__12:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":111,"author":{"gitId":"ReubenChay"},"content":"                .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":112,"author":{"gitId":"ReubenChay"},"content":"        assertFalse(editedAlice.equals(WITH_ALICE));","lastModifiedDate":"2022-11-01"},{"lineNumber":113,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":114,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":115,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":116,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"},{"lineNumber":117,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":117}},{"path":"src/test/java/longtimenosee/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"-":34,"marcusczh":2}},{"path":"src/test/java/longtimenosee/model/person/BirthdayTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-30"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-30"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-30"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-30"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-30"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"public class BirthdayTest {","lastModifiedDate":"2022-10-30"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-10-30"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2022-10-30"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"    public void isValidFormat() {","lastModifiedDate":"2022-10-30"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"        // EP: null","lastModifiedDate":"2022-10-30"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidFormat(null));","lastModifiedDate":"2022-10-30"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"        //EP: All alphabets","lastModifiedDate":"2022-10-30"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Birthday.isValidFormat(\"YYYY-MM-DD\"));","lastModifiedDate":"2022-10-30"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"        //EP: Invalid Year, Valid Month and Day","lastModifiedDate":"2022-10-30"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Birthday.isValidFormat(\"199-01-01\"));","lastModifiedDate":"2022-10-30"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"        //EP: Valid Year, Invalid Month, Valid Day","lastModifiedDate":"2022-10-30"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Birthday.isValidFormat(\"1990-1-01\"));","lastModifiedDate":"2022-10-30"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"        //EP: Valid Year, Valid Month, Invalid Day","lastModifiedDate":"2022-10-30"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Birthday.isValidFormat(\"1990-01-1\"));","lastModifiedDate":"2022-10-30"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-30"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"     * Tests for non format issues, but invalid dates","lastModifiedDate":"2022-10-30"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-30"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"    public void isValidValues() {","lastModifiedDate":"2022-10-30"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"        //EP: Invalid dates with correct format (invalid values)","lastModifiedDate":"2022-10-30"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Birthday.isValidDate(\"2019-02-29\")); //Leap year day on non leap-year","lastModifiedDate":"2022-10-30"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Birthday.isValidDate(\"2000-13-01\")); //Invalid month","lastModifiedDate":"2022-10-30"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Birthday.isValidDate(\"2000-13-31\")); //Invalid day","lastModifiedDate":"2022-10-30"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"        //Edge Case: Valid leap years","lastModifiedDate":"2022-10-30"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"        assertTrue(Birthday.isValidDate(\"2020-02-29\")); //Leap year day on non leap-year","lastModifiedDate":"2022-10-30"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-30"}],"authorContributionMap":{"cowlinn":43}},{"path":"src/test/java/longtimenosee/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"-":66,"marcusczh":2}},{"path":"src/test/java/longtimenosee/model/person/IncomeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-30"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-30"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-30"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-30"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-30"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"public class IncomeTest {","lastModifiedDate":"2022-10-30"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"    //EP: null income","lastModifiedDate":"2022-10-30"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-10-30"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Income(null));","lastModifiedDate":"2022-10-30"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public void constructor_invalidIncome_throwsIllegalArgumentException() {","lastModifiedDate":"2022-10-30"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"        String invalidIncome \u003d \"\";","lastModifiedDate":"2022-10-30"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Income(invalidIncome));","lastModifiedDate":"2022-10-30"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"    public void income_isValidFormat() {","lastModifiedDate":"2022-10-30"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"        // invalid income","lastModifiedDate":"2022-10-30"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isValidFormat(\"\")); // empty string","lastModifiedDate":"2022-10-30"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isValidFormat(\" \")); // spaces only","lastModifiedDate":"2022-10-30"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isValidFormat(\"IEarnOneMillionBucks\")); // non-numeric","lastModifiedDate":"2022-10-30"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isValidFormat(\"0neHundredD0llars\")); // alphabets within digits","lastModifiedDate":"2022-10-30"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isValidFormat(\"600 000\")); // income values seperated with whitespace","lastModifiedDate":"2022-10-30"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isValidFormat(\"100.0.000\")); // not an appropriate decimal value","lastModifiedDate":"2022-10-30"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"        // valid income","lastModifiedDate":"2022-10-30"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"        assertTrue(Income.isValidFormat(\"100\")); // small yearly income","lastModifiedDate":"2022-10-30"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"        assertTrue(Income.isValidFormat(\"100.00\")); //same yearly income with decimal","lastModifiedDate":"2022-10-30"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"        assertTrue(Income.isValidFormat(\"10000000.00\")); // longer income value","lastModifiedDate":"2022-10-30"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"    //EP: negative values","lastModifiedDate":"2022-10-30"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":41,"author":{"gitId":"cowlinn"},"content":"    public void income_isValidValue() {","lastModifiedDate":"2022-10-30"},{"lineNumber":42,"author":{"gitId":"cowlinn"},"content":"        //valid values","lastModifiedDate":"2022-10-30"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"        assertTrue(Income.isPositiveIncome(\"0\")); //0 is a valid income, possibly for unemployed clients","lastModifiedDate":"2022-10-30"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"        //invalid values","lastModifiedDate":"2022-10-30"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isPositiveIncome(\"-0.0001\")); //Small negative values","lastModifiedDate":"2022-10-30"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Income.isPositiveIncome(\"-110191910290909900.00\")); //Large negative Values","lastModifiedDate":"2022-10-30"},{"lineNumber":48,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":49,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-30"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"}],"authorContributionMap":{"cowlinn":51}},{"path":"src/test/java/longtimenosee/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"-":38,"marcusczh":2}},{"path":"src/test/java/longtimenosee/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"-":79,"marcusczh":11}},{"path":"src/test/java/longtimenosee/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"        // EP: null","lastModifiedDate":"2022-10-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"        assertFalse(Phone.isValidPhone(\"10000000000000000000000000000000000000000000000\"","lastModifiedDate":"2022-10-30"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"                + \"00000000000000\")); // phone number that exceeds max length","lastModifiedDate":"2022-10-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"cowlinn":3,"-":37,"marcusczh":2}},{"path":"src/test/java/longtimenosee/model/person/RiskAppetiteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cowlinn"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-30"},{"lineNumber":2,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-30"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-30"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-30"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-30"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"public class RiskAppetiteTest {","lastModifiedDate":"2022-10-30"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":12,"author":{"gitId":"cowlinn"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-10-30"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"        assertThrows(NullPointerException.class, () -\u003e new RiskAppetite(null));","lastModifiedDate":"2022-10-30"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":17,"author":{"gitId":"cowlinn"},"content":"    @Test","lastModifiedDate":"2022-10-30"},{"lineNumber":18,"author":{"gitId":"cowlinn"},"content":"    public void isValidRiskAppetite() {","lastModifiedDate":"2022-10-30"},{"lineNumber":19,"author":{"gitId":"cowlinn"},"content":"        // EP: null","lastModifiedDate":"2022-10-30"},{"lineNumber":20,"author":{"gitId":"cowlinn"},"content":"        assertThrows(NullPointerException.class, () -\u003e RiskAppetite.isValidFormat(null));","lastModifiedDate":"2022-10-30"},{"lineNumber":21,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":22,"author":{"gitId":"cowlinn"},"content":"        //invalid risk appetites","lastModifiedDate":"2022-10-30"},{"lineNumber":23,"author":{"gitId":"cowlinn"},"content":"        assertFalse(RiskAppetite.isValidFormat(\"\")); //Empty string","lastModifiedDate":"2022-10-30"},{"lineNumber":24,"author":{"gitId":"cowlinn"},"content":"        assertFalse(RiskAppetite.isValidFormat(\"  \")); //Spaces","lastModifiedDate":"2022-10-30"},{"lineNumber":25,"author":{"gitId":"cowlinn"},"content":"        assertFalse(RiskAppetite.isValidFormat(\"0\")); //Integer values","lastModifiedDate":"2022-10-30"},{"lineNumber":26,"author":{"gitId":"cowlinn"},"content":"        assertFalse(RiskAppetite.isValidFormat(\"0.00\")); //Decimal values","lastModifiedDate":"2022-10-30"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"        assertFalse(RiskAppetite.isValidFormat(\"A\")); //Uppercase invalid characters","lastModifiedDate":"2022-10-30"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"        assertFalse(RiskAppetite.isValidFormat(\"l\")); //Lowercase valid characters","lastModifiedDate":"2022-10-30"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"        assertFalse(RiskAppetite.isValidFormat(\"High\")); //Valid first character, invalid padding","lastModifiedDate":"2022-10-30"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"        //Valid risk appetites","lastModifiedDate":"2022-10-30"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"        assertTrue(RiskAppetite.isValidFormat(\"H\")); //High","lastModifiedDate":"2022-10-30"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"        assertTrue(RiskAppetite.isValidFormat(\"M\")); //Medium","lastModifiedDate":"2022-10-30"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"        assertTrue(RiskAppetite.isValidFormat(\"L\")); //Low","lastModifiedDate":"2022-10-30"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-30"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"}","lastModifiedDate":"2022-10-30"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-30"}],"authorContributionMap":{"cowlinn":38}},{"path":"src/test/java/longtimenosee/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"-":161,"marcusczh":9}},{"path":"src/test/java/longtimenosee/model/person/predicate/AddressMatchesInputPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-29"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-29"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-29"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class AddressMatchesInputPredicateTest {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    public void test_equals() {","lastModifiedDate":"2022-10-29"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"        String firstPredicateInput \u003d \"bedok\";","lastModifiedDate":"2022-10-29"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"        String secondPredicateInput \u003d \"Blk 522\";","lastModifiedDate":"2022-10-29"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        AddressContainsInputPredicate firstPredicate \u003d new AddressContainsInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"        AddressContainsInputPredicate secondPredicate \u003d new AddressContainsInputPredicate(secondPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        // EP: null value","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(null)); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        // EP: same object","lastModifiedDate":"2022-10-29"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: same internal address","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        AddressContainsInputPredicate firstPredicateCopy \u003d new AddressContainsInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        // EP: different internal address","lastModifiedDate":"2022-10-29"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    public void test_addressContainsInput_returnsTrue() {","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        // EP: single spacing","lastModifiedDate":"2022-10-29"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        // Note: Spacings wil be matched as if it is a character","lastModifiedDate":"2022-10-29"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        AddressContainsInputPredicate predicate \u003d new AddressContainsInputPredicate(\" \");","lastModifiedDate":"2022-10-29"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 123 Bedok St 54\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        // EP: address contains whole keyword","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new AddressContainsInputPredicate(\"Bedok\");","lastModifiedDate":"2022-10-29"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 123 Bedok St 54\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"        // EP: address contains whole input with multiple keywords","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new AddressContainsInputPredicate(\"123 Bedok\");","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 123 Bedok St 54\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new AddressContainsInputPredicate(\"123 Bedok St\");","lastModifiedDate":"2022-10-29"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 123 Bedok St 54\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        // EP: address contains input with different casing","lastModifiedDate":"2022-10-29"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new AddressContainsInputPredicate(\"123 beDOK\");","lastModifiedDate":"2022-10-29"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Blk 123 Bedok St 54\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"    public void test_addressDoesNotContainInput_returnsFalse() {","lastModifiedDate":"2022-10-29"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"        // EP: address does not contain input","lastModifiedDate":"2022-10-29"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"        AddressContainsInputPredicate predicate \u003d new AddressContainsInputPredicate(\"Orchard\");","lastModifiedDate":"2022-10-29"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Blk 123 Bedok St 54\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"        // EP: address only contains part of input","lastModifiedDate":"2022-10-29"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new AddressContainsInputPredicate(\"Blk 55 Bedok\");","lastModifiedDate":"2022-10-29"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Blk 123 Bedok St 54\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"marcusczh":66}},{"path":"src/test/java/longtimenosee/model/person/predicate/BirthdayMatchesInputPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-29"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-29"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-29"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class BirthdayMatchesInputPredicateTest {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    public void test_equals() {","lastModifiedDate":"2022-10-29"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"        String firstPredicateInput \u003d \"2001-02-05\";","lastModifiedDate":"2022-10-29"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"        String secondPredicateInput \u003d \"1990-07-12\";","lastModifiedDate":"2022-10-29"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        BirthdayMatchesInputPredicate firstPredicate \u003d new BirthdayMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"        BirthdayMatchesInputPredicate secondPredicate \u003d new BirthdayMatchesInputPredicate(secondPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        // EP: null value","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(null)); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        // EP: same object","lastModifiedDate":"2022-10-29"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: same internal date","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        BirthdayMatchesInputPredicate firstPredicateCopy \u003d new BirthdayMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        // EP: different internal date","lastModifiedDate":"2022-10-29"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    public void test_birthdayMatchesInput_returnsTrue() {","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        // EP: same date","lastModifiedDate":"2022-10-29"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        BirthdayMatchesInputPredicate predicate \u003d new BirthdayMatchesInputPredicate(\"1990-07-12\");","lastModifiedDate":"2022-10-29"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withBirthday(\"1990-07-12\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"    public void test_birthdayDoesNotMatchInput_returnsFalse() {","lastModifiedDate":"2022-10-29"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        BirthdayMatchesInputPredicate predicate \u003d new BirthdayMatchesInputPredicate(\"1990-07-12\");","lastModifiedDate":"2022-10-29"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"        // EP: same year, same month, different day","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withBirthday(\"1990-07-30\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"        // EP: same year, different month, same day","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withBirthday(\"1990-01-12\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"        // EP: same year, different month, different day","lastModifiedDate":"2022-10-29"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withBirthday(\"1990-05-25\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        // EP: different year, same month, same day","lastModifiedDate":"2022-10-29"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withBirthday(\"2000-07-12\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"        // EP: different year, same month, different day","lastModifiedDate":"2022-10-29"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withBirthday(\"1985-07-15\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"        // EP: different year, different month, same day","lastModifiedDate":"2022-10-29"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withBirthday(\"1992-12-12\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"        // EP: different year, different month, different day","lastModifiedDate":"2022-10-29"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withBirthday(\"1985-02-20\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"marcusczh":65}},{"path":"src/test/java/longtimenosee/model/person/predicate/EmailMatchesInputPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-29"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-29"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-29"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class EmailMatchesInputPredicateTest {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    public void test_equals() {","lastModifiedDate":"2022-10-29"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"        String firstPredicateInput \u003d \"alex@example.com\";","lastModifiedDate":"2022-10-29"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"        String secondPredicateInput \u003d \"bernice@email.abc\";","lastModifiedDate":"2022-10-29"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        EmailMatchesInputPredicate firstPredicate \u003d new EmailMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"        EmailMatchesInputPredicate secondPredicate \u003d new EmailMatchesInputPredicate(secondPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        // EP: null value","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(null)); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        // EP: same object","lastModifiedDate":"2022-10-29"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: same internal email","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        EmailMatchesInputPredicate firstPredicateCopy \u003d new EmailMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        // EP: different internal email","lastModifiedDate":"2022-10-29"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    public void test_emailMatchesInput_returnsTrue() {","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        EmailMatchesInputPredicate predicate \u003d new EmailMatchesInputPredicate(\"alex@example.com\");","lastModifiedDate":"2022-10-29"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        // EP: matches exact email","lastModifiedDate":"2022-10-29"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alex@example.com\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        // EP: matches email with different casing","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alEX@examPLE.com\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"    public void test_emailDoesNotMatchInput_returnsFalse() {","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        EmailMatchesInputPredicate predicate \u003d new EmailMatchesInputPredicate(\"alex@example.com\");","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        // EP: matches partial email","lastModifiedDate":"2022-10-29"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"alex@email.abc\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        // EP: does not match email","lastModifiedDate":"2022-10-29"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"t@b.c\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"marcusczh":54}},{"path":"src/test/java/longtimenosee/model/person/predicate/IncomeMatchesInputPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-29"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-29"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-29"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class IncomeMatchesInputPredicateTest {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    public void test_equals() {","lastModifiedDate":"2022-10-29"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"        String firstPredicateInput \u003d \"100000\";","lastModifiedDate":"2022-10-29"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"        String secondPredicateInput \u003d \"200000\";","lastModifiedDate":"2022-10-29"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        IncomeMatchesInputPredicate firstPredicate \u003d new IncomeMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"        IncomeMatchesInputPredicate secondPredicate \u003d new IncomeMatchesInputPredicate(secondPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        // EP: null value","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(null)); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        // EP: same object","lastModifiedDate":"2022-10-29"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: same internal income","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        IncomeMatchesInputPredicate firstPredicateCopy \u003d new IncomeMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        // EP: different internal income","lastModifiedDate":"2022-10-29"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    public void test_incomeMatchesInput_returnsTrue() {","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        IncomeMatchesInputPredicate predicate \u003d new IncomeMatchesInputPredicate(\"100000\");","lastModifiedDate":"2022-10-29"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        // EP: same income value","lastModifiedDate":"2022-10-29"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withIncome(\"100000\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        // EP: same income bracket","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withIncome(\"120000\").build())); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"    public void test_incomeDoesNotMatchInput_returnsFalse() {","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        IncomeMatchesInputPredicate predicate \u003d new IncomeMatchesInputPredicate(\"200000\");","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        // EP: different income bracket","lastModifiedDate":"2022-10-29"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withIncome(\"200001\").build())); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withIncome(\"160000\").build())); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"marcusczh":53}},{"path":"src/test/java/longtimenosee/model/person/predicate/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":73,"marcusczh":2}},{"path":"src/test/java/longtimenosee/model/person/predicate/PhoneContainsNumberPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-29"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-29"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-29"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class PhoneContainsNumberPredicateTest {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    public void test_equals() {","lastModifiedDate":"2022-10-29"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"        String firstPredicateInput \u003d \"87654321\";","lastModifiedDate":"2022-10-29"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"        String secondPredicateInput \u003d \"99825542\";","lastModifiedDate":"2022-10-29"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        PhoneContainsNumberPredicate firstPredicate \u003d new PhoneContainsNumberPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"        PhoneContainsNumberPredicate secondPredicate \u003d new PhoneContainsNumberPredicate(secondPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        // EP: null value","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(null)); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        // EP: same object","lastModifiedDate":"2022-10-29"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: same internal number","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        PhoneContainsNumberPredicate firstPredicateCopy \u003d new PhoneContainsNumberPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        // EP: different internal number","lastModifiedDate":"2022-10-29"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    public void test_phoneContainsInput_returnsTrue() {","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"        PhoneContainsNumberPredicate predicate \u003d new PhoneContainsNumberPredicate(\"8765\");","lastModifiedDate":"2022-10-29"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        // EP: same number","lastModifiedDate":"2022-10-29"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"8765\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        // EP: phone contains input","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"87654321\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"    public void test_phoneDoesNotContainInput_returnsFalse() {","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        PhoneContainsNumberPredicate predicate \u003d new PhoneContainsNumberPredicate(\"8765\");","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"        // EP: phone contains partial input","lastModifiedDate":"2022-10-29"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"876\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        // EP: phone does not contain input","lastModifiedDate":"2022-10-29"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"1234\").build())); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"marcusczh":54}},{"path":"src/test/java/longtimenosee/model/person/predicate/RiskAppetiteMatchesInputPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-29"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-29"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-29"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"public class RiskAppetiteMatchesInputPredicateTest {","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"    public void test_equals() {","lastModifiedDate":"2022-10-29"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"        String firstPredicateInput \u003d \"H\";","lastModifiedDate":"2022-10-29"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"        String secondPredicateInput \u003d \"M\";","lastModifiedDate":"2022-10-29"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        RiskAppetiteMatchesInputPredicate firstPredicate \u003d new RiskAppetiteMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"        RiskAppetiteMatchesInputPredicate secondPredicate \u003d new RiskAppetiteMatchesInputPredicate(secondPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        // EP: null value","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(null)); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        // EP: same object","lastModifiedDate":"2022-10-29"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        // EP: same internal risk appetite","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"        RiskAppetiteMatchesInputPredicate firstPredicateCopy \u003d","lastModifiedDate":"2022-10-29"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"                new RiskAppetiteMatchesInputPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-29"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"        // EP: different internal risk appetite","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"    public void test_riskAppetiteMatchesInput_returnsTrue() {","lastModifiedDate":"2022-10-29"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"        // EP: same risk appetite H","lastModifiedDate":"2022-10-29"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        RiskAppetiteMatchesInputPredicate predicate \u003d new RiskAppetiteMatchesInputPredicate(\"H\");","lastModifiedDate":"2022-10-29"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRiskAppetite(\"H\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"        // EP: same risk appetite M","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new RiskAppetiteMatchesInputPredicate(\"M\");","lastModifiedDate":"2022-10-29"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRiskAppetite(\"M\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"        // EP: same risk appetite L","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new RiskAppetiteMatchesInputPredicate(\"L\");","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRiskAppetite(\"L\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"    public void test_riskAppetiteDoesNotMatchInput_returnsFalse() {","lastModifiedDate":"2022-10-29"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        RiskAppetiteMatchesInputPredicate predicate \u003d new RiskAppetiteMatchesInputPredicate(\"H\");","lastModifiedDate":"2022-10-29"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        // EP: different risk appetite","lastModifiedDate":"2022-10-29"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withRiskAppetite(\"M\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withRiskAppetite(\"L\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"marcusczh":59}},{"path":"src/test/java/longtimenosee/model/person/predicate/TagContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.person.predicate;","lastModifiedDate":"2022-10-29"},{"lineNumber":2,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-29"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-29"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-29"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-29"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.PersonBuilder;","lastModifiedDate":"2022-10-29"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"public class TagContainsKeywordsPredicateTest {","lastModifiedDate":"2022-10-29"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"    public void equals() {","lastModifiedDate":"2022-10-29"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"        List\u003cString\u003e firstPredicateInput \u003d List.of(\"friends\");","lastModifiedDate":"2022-10-29"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"        List\u003cString\u003e secondPredicateInput \u003d List.of(\"family\", \"colleagues\");","lastModifiedDate":"2022-10-29"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"marcusczh"},"content":"        // EP: null value","lastModifiedDate":"2022-10-29"},{"lineNumber":22,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(null)); // Boundary value","lastModifiedDate":"2022-10-29"},{"lineNumber":23,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"        // EP: same object","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":27,"author":{"gitId":"marcusczh"},"content":"        // EP: same internal tags","lastModifiedDate":"2022-10-29"},{"lineNumber":28,"author":{"gitId":"marcusczh"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateInput);","lastModifiedDate":"2022-10-29"},{"lineNumber":29,"author":{"gitId":"marcusczh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-29"},{"lineNumber":30,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":31,"author":{"gitId":"marcusczh"},"content":"        // EP: different internal tags","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"marcusczh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-29"},{"lineNumber":33,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":36,"author":{"gitId":"marcusczh"},"content":"    public void test_tagContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-10-29"},{"lineNumber":37,"author":{"gitId":"marcusczh"},"content":"        // EP: matching single tag","lastModifiedDate":"2022-10-29"},{"lineNumber":38,"author":{"gitId":"marcusczh"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(List.of(\"friends\"));","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":40,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"marcusczh"},"content":"        // EP: matching multiple tags","lastModifiedDate":"2022-10-29"},{"lineNumber":42,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(List.of(\"friends\", \"colleagues\", \"family\"));","lastModifiedDate":"2022-10-29"},{"lineNumber":43,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\", \"colleagues\", \"family\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"marcusczh"},"content":"        // EP: matching single tag with different casing","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(List.of(\"friends\"));","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":49,"author":{"gitId":"marcusczh"},"content":"        // EP: matching multiple tags with different casing","lastModifiedDate":"2022-10-29"},{"lineNumber":50,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(List.of(\"Friends\", \"FAMILY\", \"colleaGUES\"));","lastModifiedDate":"2022-10-29"},{"lineNumber":51,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"family\", \"colleagues\", \"friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":52,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":53,"author":{"gitId":"marcusczh"},"content":"        // EP: single keyword match one of many tags","lastModifiedDate":"2022-10-29"},{"lineNumber":54,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(List.of(\"Friends\"));","lastModifiedDate":"2022-10-29"},{"lineNumber":55,"author":{"gitId":"marcusczh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"family\", \"colleagues\", \"friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":56,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":57,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":58,"author":{"gitId":"marcusczh"},"content":"    @Test","lastModifiedDate":"2022-10-29"},{"lineNumber":59,"author":{"gitId":"marcusczh"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-10-29"},{"lineNumber":60,"author":{"gitId":"marcusczh"},"content":"        // EP: single tag does not match","lastModifiedDate":"2022-10-29"},{"lineNumber":61,"author":{"gitId":"marcusczh"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(List.of(\"family\"));","lastModifiedDate":"2022-10-29"},{"lineNumber":62,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":63,"author":{"gitId":"marcusczh"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":64,"author":{"gitId":"marcusczh"},"content":"        // EP: partial match of keywords","lastModifiedDate":"2022-10-29"},{"lineNumber":65,"author":{"gitId":"marcusczh"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(List.of(\"family\", \"friends\", \"colleagues\"));","lastModifiedDate":"2022-10-29"},{"lineNumber":66,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"family\", \"friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":67,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"colleagues\", \"friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":68,"author":{"gitId":"marcusczh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));","lastModifiedDate":"2022-10-29"},{"lineNumber":69,"author":{"gitId":"marcusczh"},"content":"    }","lastModifiedDate":"2022-10-29"},{"lineNumber":70,"author":{"gitId":"marcusczh"},"content":"}","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"marcusczh":70}},{"path":"src/test/java/longtimenosee/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.model.tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"-":24,"marcusczh":2}},{"path":"src/test/java/longtimenosee/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"cowlinn"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"cowlinn"},"content":"    private static final String VALID_INCOME \u003d BENSON.getIncome().toString();","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"    private static final String VALID_RISK_APPETITE \u003d BENSON.getRiskAppetite().toString();","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"Ssatu"},"content":"    //TODO: To implement dummy list of assigned policies","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"Ssatu"},"content":"    private static final List\u003cJsonAdaptedAssignedPolicy\u003e VALID_POLICIES \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"Ssatu"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"loyhongshenggg"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-09"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":63,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":72,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"loyhongshenggg"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-09"},{"lineNumber":80,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":81,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":90,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"loyhongshenggg"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-09"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":99,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":108,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,","lastModifiedDate":"2022-10-12"},{"lineNumber":116,"author":{"gitId":"Ssatu"},"content":"                VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,","lastModifiedDate":"2022-10-12"},{"lineNumber":127,"author":{"gitId":"Ssatu"},"content":"                        VALID_BIRTHDAY, VALID_INCOME, VALID_RISK_APPETITE, false, VALID_POLICIES);","lastModifiedDate":"2022-10-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"loyhongshenggg":3,"Ssatu":12,"cowlinn":15,"-":92,"marcusczh":9}},{"path":"src/test/java/longtimenosee/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"/*import static longtimenosee.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.HOON;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.IDA;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"cowlinn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;*/","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":20,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"cowlinn"},"content":"    /*    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"cowlinn"},"content":"    */","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"cowlinn":4,"-":97,"marcusczh":8}},{"path":"src/test/java/longtimenosee/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.util.JsonUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.testutil.TypicalPersons;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ReubenChay":1,"-":41,"marcusczh":6}},{"path":"src/test/java/longtimenosee/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":118,"marcusczh":5}},{"path":"src/test/java/longtimenosee/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.storage;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"cowlinn"},"content":"//import static longtimenosee.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.GuiSettings;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"cowlinn"},"content":"//import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"//import longtimenosee.model.ReadOnlyAddressBook;","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.UserPrefs;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"    /*    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        *//*","lastModifiedDate":"2022-10-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"         *//*","lastModifiedDate":"2022-10-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"cowlinn"},"content":"     }*/","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"cowlinn":7,"-":58,"marcusczh":3}},{"path":"src/test/java/longtimenosee/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":31,"marcusczh":3}},{"path":"src/test/java/longtimenosee/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                                    Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"-":33,"marcusczh":1}},{"path":"src/test/java/longtimenosee/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-13"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2022-10-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2022-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2022-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2022-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2022-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"        descriptor.setBirthday(person.getBirthday());","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"        descriptor.setIncome(person.getIncome());","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"        descriptor.setRiskAppetite(person.getRiskAppetite());","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2022-10-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":94,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"     * Parses the {@code validBirthday} into a {@code Birthday} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2022-10-13"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"     * that we are building.","lastModifiedDate":"2022-10-13"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":98,"author":{"gitId":"cowlinn"},"content":"    public EditPersonDescriptorBuilder withBirthday(String validBirthdayAmy) {","lastModifiedDate":"2022-10-13"},{"lineNumber":99,"author":{"gitId":"cowlinn"},"content":"        descriptor.setBirthday(new Birthday(validBirthdayAmy));","lastModifiedDate":"2022-10-13"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"        return this;","lastModifiedDate":"2022-10-13"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":102,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":103,"author":{"gitId":"cowlinn"},"content":"     * Parses the {@code validIncome} into a {@code Income} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2022-10-13"},{"lineNumber":104,"author":{"gitId":"cowlinn"},"content":"     * that we are building.","lastModifiedDate":"2022-10-13"},{"lineNumber":105,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":106,"author":{"gitId":"cowlinn"},"content":"    public EditPersonDescriptorBuilder withIncome(String validIncome) {","lastModifiedDate":"2022-10-13"},{"lineNumber":107,"author":{"gitId":"cowlinn"},"content":"        descriptor.setIncome(new Income(validIncome));","lastModifiedDate":"2022-10-13"},{"lineNumber":108,"author":{"gitId":"cowlinn"},"content":"        return this;","lastModifiedDate":"2022-10-13"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"     * Parses the {@code validRA} into a {@code RiskAppetite} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2022-10-13"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"     * that we are building.","lastModifiedDate":"2022-10-13"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"    public EditPersonDescriptorBuilder withRiskAppetite(String validRA) {","lastModifiedDate":"2022-10-13"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"        descriptor.setRiskAppetite(new RiskAppetite(validRA));","lastModifiedDate":"2022-10-13"},{"lineNumber":116,"author":{"gitId":"cowlinn"},"content":"        return this;","lastModifiedDate":"2022-10-13"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"ReubenChay":4,"cowlinn":28,"-":79,"marcusczh":8}},{"path":"src/test/java/longtimenosee/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Date;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Description;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Duration;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":" * A utility class to help with building Event objects.","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"public class EventBuilder {","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":"    public static final String DEFAULT_DATE \u003d \"2022-12-12\";","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Lunch with Alice Pauline\";","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"    public static final String DEFAULT_DURATION \u003d \"10:00__12:00\";","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"    private Date date;","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"    private Description description;","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"    private Duration duration;","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"    private Name name;","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"     * Creates a {@code EventBuilder} with the default details.","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"    public EventBuilder() {","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"        date \u003d new Date(DEFAULT_DATE);","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"        duration \u003d new Duration(DEFAULT_DURATION);","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}.","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"    public EventBuilder(Event eventToCopy) {","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"        name \u003d eventToCopy.getPersonName();","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"        description \u003d eventToCopy.getDescription();","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"        date \u003d eventToCopy.getDate();","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"        duration \u003d eventToCopy.getDuration();","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"     * Sets the {@code Name} of the {@code Event} that we are building.","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"    public EventBuilder withName(String name) {","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"        return this;","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"     * Sets the {@code Duration} of the {@code Event} that we are building.","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"    public EventBuilder withDuration(String duration) {","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"        this.duration \u003d new Duration(duration);","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"        return this;","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"     * Sets the {@code Description} of the {@code Event} that we are building.","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"    public EventBuilder withDescription(String description) {","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"        return this;","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"     * Sets the {@code Date} of the {@code Event} that we are building.","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"    public EventBuilder withDate(String date) {","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"        this.date \u003d new Date(date);","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"        return this;","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"     * Main builds a copy of the current client stored.","lastModifiedDate":"2022-11-01"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"     * @return person","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"    public Event build() {","lastModifiedDate":"2022-11-01"},{"lineNumber":84,"author":{"gitId":"ReubenChay"},"content":"        return new Event(description, name, date, duration);","lastModifiedDate":"2022-11-01"},{"lineNumber":85,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":86,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":87}},{"path":"src/test/java/longtimenosee/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Address;","lastModifiedDate":"2022-10-05"},{"lineNumber":7,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Email;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.Income;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Name;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Phone;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"cowlinn"},"content":"import longtimenosee.model.person.RiskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.util.SampleDataUtil;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"cowlinn"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"2000-05-05\";","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"cowlinn"},"content":"    public static final String DEFAULT_INCOME \u003d \"100.0\";","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"cowlinn"},"content":"    public static final String DEFAULT_RISK_APPETITE \u003d \"H\";","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":37,"author":{"gitId":"cowlinn"},"content":"    private Birthday birthday;","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"cowlinn"},"content":"    private Income income;","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"    private RiskAppetite riskAppetite;","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"cowlinn"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"cowlinn"},"content":"        income \u003d new Income(DEFAULT_INCOME);","lastModifiedDate":"2022-10-13"},{"lineNumber":52,"author":{"gitId":"cowlinn"},"content":"        riskAppetite \u003d new RiskAppetite(DEFAULT_RISK_APPETITE);","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"cowlinn"},"content":"        birthday \u003d personToCopy.getBirthday();","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"        income \u003d personToCopy.getIncome();","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"        riskAppetite \u003d personToCopy.getRiskAppetite();","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":110,"author":{"gitId":"cowlinn"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-12"},{"lineNumber":111,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":112,"author":{"gitId":"cowlinn"},"content":"    public PersonBuilder withBirthday(String birthday) {","lastModifiedDate":"2022-10-12"},{"lineNumber":113,"author":{"gitId":"cowlinn"},"content":"        this.birthday \u003d new Birthday(birthday);","lastModifiedDate":"2022-10-12"},{"lineNumber":114,"author":{"gitId":"cowlinn"},"content":"        return this;","lastModifiedDate":"2022-10-12"},{"lineNumber":115,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":117,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":118,"author":{"gitId":"cowlinn"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-12"},{"lineNumber":119,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":120,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":121,"author":{"gitId":"cowlinn"},"content":"    public PersonBuilder withIncome(String income) {","lastModifiedDate":"2022-10-12"},{"lineNumber":122,"author":{"gitId":"cowlinn"},"content":"        this.income \u003d new Income(income);","lastModifiedDate":"2022-10-12"},{"lineNumber":123,"author":{"gitId":"cowlinn"},"content":"        return this;","lastModifiedDate":"2022-10-12"},{"lineNumber":124,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":125,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":126,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":127,"author":{"gitId":"cowlinn"},"content":"     * Sets the {@code RiskAppetite} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-12"},{"lineNumber":128,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":129,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":130,"author":{"gitId":"cowlinn"},"content":"    public PersonBuilder withRiskAppetite(String ra) {","lastModifiedDate":"2022-10-12"},{"lineNumber":131,"author":{"gitId":"cowlinn"},"content":"        this.riskAppetite \u003d new RiskAppetite(ra);","lastModifiedDate":"2022-10-12"},{"lineNumber":132,"author":{"gitId":"cowlinn"},"content":"        return this;","lastModifiedDate":"2022-10-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":135,"author":{"gitId":"cowlinn"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":136,"author":{"gitId":"cowlinn"},"content":"     * Main builds a copy of the current client stored.","lastModifiedDate":"2022-10-12"},{"lineNumber":137,"author":{"gitId":"cowlinn"},"content":"     * @return person","lastModifiedDate":"2022-10-12"},{"lineNumber":138,"author":{"gitId":"cowlinn"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":139,"author":{"gitId":"cowlinn"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":140,"author":{"gitId":"cowlinn"},"content":"    public Person build() {","lastModifiedDate":"2022-10-12"},{"lineNumber":141,"author":{"gitId":"cowlinn"},"content":"        return new Person(name, phone, email, address, tags, birthday,","lastModifiedDate":"2022-10-12"},{"lineNumber":142,"author":{"gitId":"cowlinn"},"content":"                income, riskAppetite);","lastModifiedDate":"2022-10-12"},{"lineNumber":143,"author":{"gitId":"cowlinn"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"cowlinn":50,"-":86,"marcusczh":8}},{"path":"src/test/java/longtimenosee/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_BIRTHDAY;","lastModifiedDate":"2022-10-13"},{"lineNumber":5,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-05"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_INCOME;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_RISK_APPETITE;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.AddCommand;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-05"},{"lineNumber":16,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.tag.Tag;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"        sb.append(PREFIX_BIRTHDAY + person.getBirthday().value + \" \");","lastModifiedDate":"2022-10-13"},{"lineNumber":44,"author":{"gitId":"cowlinn"},"content":"        sb.append(PREFIX_INCOME + person.getIncome().value + \" \");","lastModifiedDate":"2022-10-13"},{"lineNumber":45,"author":{"gitId":"cowlinn"},"content":"        sb.append(PREFIX_RISK_APPETITE + person.getRiskAppetite().value + \" \");","lastModifiedDate":"2022-10-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"cowlinn"},"content":"        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY).append(birthday.value).append(\" \"));","lastModifiedDate":"2022-10-13"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"        descriptor.getIncome().ifPresent(income -\u003e sb.append(PREFIX_INCOME).append(income.value).append(\" \"));","lastModifiedDate":"2022-10-13"},{"lineNumber":68,"author":{"gitId":"cowlinn"},"content":"        descriptor.getRA().ifPresent(riskAppetite -\u003e sb.append(PREFIX_RISK_APPETITE)","lastModifiedDate":"2022-10-13"},{"lineNumber":69,"author":{"gitId":"cowlinn"},"content":"                .append(riskAppetite.value).append(\" \"));","lastModifiedDate":"2022-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"cowlinn":10,"-":52,"marcusczh":10}},{"path":"src/test/java/longtimenosee/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":71,"marcusczh":1}},{"path":"src/test/java/longtimenosee/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.Model;","lastModifiedDate":"2022-10-05"},{"lineNumber":10,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":51,"marcusczh":4}},{"path":"src/test/java/longtimenosee/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ReubenChay"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-11-01"},{"lineNumber":2,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":3,"author":{"gitId":"ReubenChay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-11-01"},{"lineNumber":4,"author":{"gitId":"ReubenChay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-11-01"},{"lineNumber":5,"author":{"gitId":"ReubenChay"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-11-01"},{"lineNumber":6,"author":{"gitId":"ReubenChay"},"content":"import java.util.List;","lastModifiedDate":"2022-11-01"},{"lineNumber":7,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":8,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-11-01"},{"lineNumber":9,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.event.Event;","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"ReubenChay"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"ReubenChay"},"content":"/**","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"ReubenChay"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests.","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"ReubenChay"},"content":" */","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"ReubenChay"},"content":"public class TypicalEvents {","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"ReubenChay"},"content":"    public static final Event WITH_ALICE \u003d new EventBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"ReubenChay"},"content":"            .withDate(\"2023-12-12\")","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"ReubenChay"},"content":"            .withDescription(\"Lunch with Alice Pauline\")","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"ReubenChay"},"content":"            .withDuration(\"10:00__12:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"ReubenChay"},"content":"            .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"ReubenChay"},"content":"    public static final Event WITH_BENSON \u003d new EventBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"ReubenChay"},"content":"            .withDate(\"2023-11-11\")","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"ReubenChay"},"content":"            .withDescription(\"Coffee with Benson\")","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"ReubenChay"},"content":"            .withDuration(\"15:00__16:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"ReubenChay"},"content":"            .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"ReubenChay"},"content":"    public static final Event WITH_CARL \u003d new EventBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"ReubenChay"},"content":"            .withDate(\"2023-12-05\")","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"ReubenChay"},"content":"            .withDescription(\"Dinner with Carl\")","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"ReubenChay"},"content":"            .withDuration(\"19:00__20:30\")","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"ReubenChay"},"content":"            .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"    public static final Event WITH_ELLE \u003d new EventBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"ReubenChay"},"content":"            .withDate(\"2023-12-20\")","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"ReubenChay"},"content":"            .withDescription(\"Lunch with Elle\")","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"            .withDuration(\"12:00__13:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"            .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"    public static final Event WITH_FIONA \u003d new EventBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"ReubenChay"},"content":"            .withDate(\"2023-12-20\")","lastModifiedDate":"2022-11-01"},{"lineNumber":40,"author":{"gitId":"ReubenChay"},"content":"            .withDescription(\"Coffee with Fiona\")","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"ReubenChay"},"content":"            .withDuration(\"14:30__15:30\")","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"            .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":43,"author":{"gitId":"ReubenChay"},"content":"    public static final Event CALENDAR_EVENT_GEORGE \u003d new EventBuilder().withName(\"George Best\")","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"            .withDate(getValidDate())","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"            .withDescription(\"Drinks with Mr Best\")","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"ReubenChay"},"content":"            .withDuration(\"21:00__23:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"ReubenChay"},"content":"            .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"ReubenChay"},"content":"    public static final Event CALENDAR_EVENT_DANIEL \u003d new EventBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2022-11-01"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"            .withDate(getValidDate())","lastModifiedDate":"2022-11-01"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"            .withDescription(\"Lunch with Daniel\")","lastModifiedDate":"2022-11-01"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"            .withDuration(\"12:00__13:00\")","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"            .build();","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"ReubenChay"},"content":"    private TypicalEvents() {} // prevents instantiation","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"ReubenChay"},"content":"    /**","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"ReubenChay"},"content":"     * Returns an {@code AddressBook} with all the typical persons and events.","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"ReubenChay"},"content":"     */","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"        for (Person person : TypicalPersons.getTypicalPersons()) {","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"            ab.addPerson(person);","lastModifiedDate":"2022-11-01"},{"lineNumber":65,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":66,"author":{"gitId":"ReubenChay"},"content":"        for (Event event : getTypicalEvents()) {","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"ReubenChay"},"content":"            ab.addEvent(event);","lastModifiedDate":"2022-11-01"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"        return ab;","lastModifiedDate":"2022-11-01"},{"lineNumber":70,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":71,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":72,"author":{"gitId":"ReubenChay"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {","lastModifiedDate":"2022-11-01"},{"lineNumber":73,"author":{"gitId":"ReubenChay"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(WITH_ALICE, WITH_BENSON, WITH_CARL, WITH_ELLE, WITH_FIONA,","lastModifiedDate":"2022-11-01"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"                CALENDAR_EVENT_DANIEL, CALENDAR_EVENT_GEORGE));","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":77,"author":{"gitId":"ReubenChay"},"content":"    public static String getValidDate() {","lastModifiedDate":"2022-11-01"},{"lineNumber":78,"author":{"gitId":"ReubenChay"},"content":"        LocalDateTime date \u003d LocalDateTime.now().plusDays(2);","lastModifiedDate":"2022-11-01"},{"lineNumber":79,"author":{"gitId":"ReubenChay"},"content":"        String dateString \u003d date.toString();","lastModifiedDate":"2022-11-01"},{"lineNumber":80,"author":{"gitId":"ReubenChay"},"content":"        return dateString.substring(0, 10);","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"    }","lastModifiedDate":"2022-11-01"},{"lineNumber":82,"author":{"gitId":"ReubenChay"},"content":"}","lastModifiedDate":"2022-11-01"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"ReubenChay":83}},{"path":"src/test/java/longtimenosee/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.commons.core.index.Index;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"-":10,"marcusczh":2}},{"path":"src/test/java/longtimenosee/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.testutil;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":5,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":8,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":9,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_INCOME_AMY;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_INCOME_BOB;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":12,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":13,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-10-05"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_RISK_APPETITE_AMY;","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"cowlinn"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_RISK_APPETITE_BOB;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-10-05"},{"lineNumber":18,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":24,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.AddressBook;","lastModifiedDate":"2022-10-05"},{"lineNumber":25,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.model.person.Person;","lastModifiedDate":"2022-10-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"ReubenChay"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@gmail.com\")","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"cowlinn"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"ReubenChay"},"content":"            .withBirthday(\"2018-06-05\")","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"100000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"ReubenChay"},"content":"            .withRiskAppetite(\"M\")","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":42,"author":{"gitId":"ReubenChay"},"content":"            .withEmail(\"johnd@yahoo.com\").withPhone(\"98765432\")","lastModifiedDate":"2022-10-20"},{"lineNumber":43,"author":{"gitId":"cowlinn"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"ReubenChay"},"content":"            .withBirthday(\"2017-05-05\")","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"200.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":46,"author":{"gitId":"cowlinn"},"content":"            .withRiskAppetite(\"M\")","lastModifiedDate":"2022-10-13"},{"lineNumber":47,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"ReubenChay"},"content":"            .withEmail(\"heinz@yahoo.com\").withAddress(\"wall street\")","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"ReubenChay"},"content":"            .withBirthday(\"2016-06-05\")","lastModifiedDate":"2022-10-20"},{"lineNumber":51,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"25000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":52,"author":{"gitId":"ReubenChay"},"content":"            .withRiskAppetite(\"L\")","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"ReubenChay"},"content":"            .withEmail(\"cornelia@gmail.com\").withAddress(\"10th street\")","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"cowlinn"},"content":"            .withBirthday(\"2019-06-05\")","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"70000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":58,"author":{"gitId":"cowlinn"},"content":"            .withRiskAppetite(\"H\")","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"cowlinn"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"ReubenChay"},"content":"            .withEmail(\"werner@gmail.com\").withAddress(\"michegan ave\")","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"ReubenChay"},"content":"            .withBirthday(\"2019-05-05\")","lastModifiedDate":"2022-10-20"},{"lineNumber":63,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"300000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":64,"author":{"gitId":"ReubenChay"},"content":"            .withRiskAppetite(\"L\")","lastModifiedDate":"2022-10-20"},{"lineNumber":65,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":67,"author":{"gitId":"cowlinn"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"ReubenChay"},"content":"            .withBirthday(\"2019-06-07\")","lastModifiedDate":"2022-10-20"},{"lineNumber":69,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"150000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":70,"author":{"gitId":"cowlinn"},"content":"            .withRiskAppetite(\"H\")","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"cowlinn"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")","lastModifiedDate":"2022-10-12"},{"lineNumber":74,"author":{"gitId":"ReubenChay"},"content":"            .withBirthday(\"2022-06-05\")","lastModifiedDate":"2022-10-20"},{"lineNumber":75,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"1000000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":76,"author":{"gitId":"ReubenChay"},"content":"            .withRiskAppetite(\"M\")","lastModifiedDate":"2022-10-20"},{"lineNumber":77,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"ReubenChay"},"content":"            .withEmail(\"stefan@yahoo.com\").withAddress(\"little india\")","lastModifiedDate":"2022-10-20"},{"lineNumber":82,"author":{"gitId":"cowlinn"},"content":"            .withBirthday(\"2019-06-05\")","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"100000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":84,"author":{"gitId":"cowlinn"},"content":"            .withRiskAppetite(\"H\")","lastModifiedDate":"2022-10-12"},{"lineNumber":85,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"ReubenChay"},"content":"            .withEmail(\"hans@hotmail.com\").withAddress(\"chicago ave\")","lastModifiedDate":"2022-10-20"},{"lineNumber":88,"author":{"gitId":"cowlinn"},"content":"            .withBirthday(\"2019-06-05\")","lastModifiedDate":"2022-10-12"},{"lineNumber":89,"author":{"gitId":"ReubenChay"},"content":"            .withIncome(\"50000.00\")","lastModifiedDate":"2022-10-20"},{"lineNumber":90,"author":{"gitId":"ReubenChay"},"content":"            .withRiskAppetite(\"L\")","lastModifiedDate":"2022-10-20"},{"lineNumber":91,"author":{"gitId":"cowlinn"},"content":"            .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"cowlinn"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)","lastModifiedDate":"2022-10-12"},{"lineNumber":96,"author":{"gitId":"cowlinn"},"content":"            .withBirthday(VALID_BIRTHDAY_AMY).withIncome(VALID_INCOME_AMY)","lastModifiedDate":"2022-10-12"},{"lineNumber":97,"author":{"gitId":"cowlinn"},"content":"            .withRiskAppetite(VALID_RISK_APPETITE_AMY).build();","lastModifiedDate":"2022-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":100,"author":{"gitId":"cowlinn"},"content":"            .withBirthday(VALID_BIRTHDAY_BOB).withIncome(VALID_INCOME_BOB)","lastModifiedDate":"2022-10-12"},{"lineNumber":101,"author":{"gitId":"cowlinn"},"content":"            .withRiskAppetite(VALID_RISK_APPETITE_BOB).build();","lastModifiedDate":"2022-10-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"ReubenChay":27,"cowlinn":31,"-":50,"marcusczh":13}},{"path":"src/test/java/longtimenosee/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":34,"marcusczh":1}},{"path":"src/test/java/longtimenosee/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusczh"},"content":"package longtimenosee.ui;","lastModifiedDate":"2022-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"import static longtimenosee.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"marcusczh"},"content":"import longtimenosee.MainApp;","lastModifiedDate":"2022-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":111,"marcusczh":3}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"\u003c?import longtimenosee.ui.TestFxmlObject?\u003e","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":3,"marcusczh":1}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"marcusczh"},"content":"\u003cfx:root type\u003d\"longtimenosee.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2022-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":5,"marcusczh":1}}]
